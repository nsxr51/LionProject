<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dart.Snmp.45</name>
    </assembly>
    <members>
        <member name="T:Dart.Snmp.ComponentBase">
            <summary>
            Base class for PowerTCP Components.
            </summary>
        </member>
        <member name="M:Dart.Snmp.ComponentBase.Deserialize(System.IO.Stream)">
            <summary>
            Deserialize a previously serialized object.
            </summary>
            <param name="serializedObject">A stream containing the serialized data to deserialize.</param>
            <returns>The deserialized object.</returns>
            <remarks>
            Provides a simple mechanism for restoring a previously serialized state.
            For example, the state (all runtime parameters) of a Session object could be saved.
            The provided serializedObject is read from its current position.
            </remarks>
        </member>
        <member name="M:Dart.Snmp.ComponentBase.Serialize(System.Object,System.IO.Stream)">
            <summary> 
            Serialize an object to the provided destination stream.
            </summary>
            <param name="objectToSerialize">Object to serialize.</param>
            <param name="destination">Stream destination for the serialized data.</param>
            <remarks>
            Can be used at runtime to persist the state of an object.
            For example, all runtime parameters of a Session object could be saved.
            </remarks>
        </member>
        <member name="M:Dart.Snmp.ComponentBase.Marshal(System.String,System.Object)">
            <summary>
            Marshals a string and/or object to the UI thread and raises the UserState event.
            </summary>
            <param name="message">Message to pass into the UserState event.</param>
            <param name="state">Object to pass to the UserState event; can be null.</param>
            <remarks>
                <para>
                Used to marshal a string and/or object from a worker thread to the UI thread 
                for typical display purposes. 
                It calls <see cref="M:Dart.Snmp.ComponentBase.OnUserState(Dart.Snmp.UserStateEventArgs)"/>, which raises the <see cref="E:Dart.Snmp.ComponentBase.UserState"/> event.
                </para>
                <para>
                See the <see cref="P:Dart.Snmp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
                updating UI controls in your event handler.
                Internally, SynchronizingObject.BeginInvoke is used to marshal data when the SynchronizingObject is not null, and
                Delegate.DynamicInvoke is used when SynchronizingObject is null.  
                This method is provided for convenience; the developer may use alternative methods for marshaling data as required.
                </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.ComponentBase.Marshal(System.Exception)">
            <summary>
            Marshals an exception to the UI thread and raises the Error event.
            </summary>
            <param name="exception">The Exception to be marshaled.</param>
            <remarks>
                <para>
                Used to marshal exceptions from a worker thread to the UI thread for typical display purposes.  
                It calls <see cref="M:Dart.Snmp.ComponentBase.OnError(Dart.Snmp.ErrorEventArgs)"/>, which raises the <see cref="E:Dart.Snmp.ComponentBase.Error"/> event.
                </para>
                <para>
                When Start is used, unhandled exceptions generated on worker threads are marshaled to the UI thread
                by this method.
                </para>
                <para>
                See the <see cref="P:Dart.Snmp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
                updating UI controls in your event handler.
                Internally, SynchronizingObject.BeginInvoke is used to marshal data when the SynchronizingObject is not null, and
                Delegate.DynamicInvoke is used when SynchronizingObject is null.   
                This method is provided for convenience; the developer may use alternative methods for marshaling data as required.
                </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.ComponentBase.VirtualWorkerDelegate(Dart.Snmp.ComponentBase.WorkerWrapperParams)">
            <summary>
            Override this method in derived classes. Used because Delegate.DynamicInvoke() is not in CF.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Dart.Snmp.ComponentBase.OnUserState(Dart.Snmp.UserStateEventArgs)">
            <summary>
            Raises the <see cref="E:Dart.Snmp.ComponentBase.UserState"/> event.
            </summary>
            <param name="e">A <see cref="T:Dart.Snmp.UserStateEventArgs"/> object that contains the user information.</param>
            <remarks>
            If the Synchronizing property is set, this method invokes <see cref="E:Dart.Snmp.ComponentBase.UserState"/> asynchronously on the UI thread.
            If the Synchronizing property is null, this method invokes UserState on the executing thread.
            <para>
            OnUserState allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class, but marshaling is not provided.
            </para>
            <para>
            <b>Note to Inheritors:</b> When overriding OnUserState in a derived class, 
            be sure to call the base class OnUserState method, so that registered delegates receive the event. 
            </para>
            <para>
            See the <see cref="P:Dart.Snmp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
            updating UI controls in your event handler.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.ComponentBase.OnError(Dart.Snmp.ErrorEventArgs)">
            <summary>
            Raises the <see cref="E:Dart.Snmp.ComponentBase.Error"/> event.
            </summary>
            <param name="e">A <see cref="T:Dart.Snmp.ErrorEventArgs"/> object that contains the exception.</param>
            <remarks>
            If the Synchronizing property is set, this method invokes <see cref="E:Dart.Snmp.ComponentBase.Error"/> asynchronously on the UI thread.
            If the Synchronizing property is null, this method invokes the Error event on the executing thread.
            <para>
            OnError allows derived classes to handle the Error event without attaching a delegate, but marshaling is not provided.
            This is the preferred technique for handling the event in a derived class.
            </para>
            <para>
            <b>Note to Inheritors:</b> When overriding OnError in a derived class, 
            be sure to call the base class OnError method, so that registered delegates receive the event. 
            </para>
            <para>
            See the <see cref="P:Dart.Snmp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
            updating UI controls in your event handler.
            </para>
            </remarks>
        </member>
        <member name="P:Dart.Snmp.ComponentBase.SynchronizingObject">
            <summary>
            Gets or sets the object used to marshal data to the UI thread (for raising events). 
            </summary>
            <remarks>
                <para>
                This property determines the thread on which the component's event handlers are raised. If set
                to a UI control, events are raised on the UI thread. If null, events are raised on the current thread.
                </para>
                <para>
                This property is automatically set to the containing control when used in the Windows Forms designer. 
                When a derived class is dynamically created this property must be set if marshaling
                to the UI thread is desired.
                </para>
            </remarks>
        </member>
        <member name="P:Dart.Snmp.ComponentBase.SyncRoot">
            <summary>
            Gets an object that is used to synchronize access to the upper layer protocol in use.
            </summary>
            <remarks>
            Upper layer protocols typically send a command and wait for it to complete. Use of this object in a C# "lock" statement
            can allow your code to wait until any ongoing command has completed.
            </remarks>
        </member>
        <member name="E:Dart.Snmp.ComponentBase.UserState">
            <summary>
            Raised when <see cref="M:Dart.Snmp.ComponentBase.Marshal(System.String,System.Object)"/> is used.
            </summary>
            <remarks>
                See the <see cref="P:Dart.Snmp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
                updating UI controls in your event handler.
            </remarks>
        </member>
        <member name="E:Dart.Snmp.ComponentBase.Error">
            <summary>
            Raised when <see cref="M:Dart.Snmp.ComponentBase.Marshal(System.Exception)"/> is used or an unhandled Exception is thrown in a worker thread created using Start.
            </summary>
            <remarks>
                See the <see cref="P:Dart.Snmp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
                updating UI controls in your event handler.
            </remarks>
        </member>
        <member name="P:Dart.Snmp.ComponentBase.Encoding">
            <summary>
            Character encoding used by the component.
            </summary>
        </member>
        <member name="P:Dart.Snmp.ComponentBase.Tag">
            <summary>
            Gets or sets an object that stores any user data.
            </summary>
        </member>
        <member name="T:Dart.Snmp.UserStateEventArgs">
            <summary>
            Provides data for <see cref="E:Dart.Snmp.ComponentBase.UserState"/>.
            Base class for EventArgs that have <see cref="P:Dart.Snmp.UserStateEventArgs.Message"/> and <see cref="P:Dart.Snmp.UserStateEventArgs.UserState"/> properties.
            </summary>
        </member>
        <member name="M:Dart.Snmp.UserStateEventArgs.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new UserStateEventArgs.
            </summary>
        </member>
        <member name="P:Dart.Snmp.UserStateEventArgs.Message">
            <summary>
            Returns the message argument provided by the Marshal method.
            </summary>
        </member>
        <member name="P:Dart.Snmp.UserStateEventArgs.UserState">
            <summary>
            Returns the user state argument provided by the Marshal method.
            </summary>
        </member>
        <member name="T:Dart.Snmp.ErrorEventArgs">
            <summary>
            Provides data for the <see cref="E:Dart.Snmp.ComponentBase.Error">Error</see> event.
            </summary>
        </member>
        <member name="M:Dart.Snmp.ErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Save an exception within this class.
            </summary>
            <param name="exception">Exception to save.</param>
        </member>
        <member name="M:Dart.Snmp.ErrorEventArgs.GetException">
            <summary>
            Returns the Exception marshaled to the UI thread.
            </summary>
            <returns>Exception</returns>
        </member>
        <member name="T:Dart.Snmp.DartLicenseException">
             <summary>
             The base class for all Dart component license exceptions.
             </summary>
             <remarks>
             <para>
             Use the DartLicenseException class to catch runtime licensing exceptions.
             These exceptions are thrown at component creation time and during access of select properties or methods.
             The Message property will provide a description of the specific licensing problem encountered.
             The InnerException property should also be examined for additional details.
             </para> 
            </remarks>
        </member>
        <member name="M:Dart.Common.LicenseManager.DoCOMLicensing(System.Type)">
            <summary>
            Triggered by lc.exe, use within a development environment, and use via COM interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dart.Common.LicenseManager.SaveLicenseKey">
            <summary>
            Simply use existing Microsoft License infrastructure (this is called by LC.EXE)
            </summary>
        </member>
        <member name="M:Dart.Common.LicenseManager.GetAppDomainLicense(System.Type,System.String@)">
            <summary>
            Search that CurrentDomain for a license.
            </summary>
        </member>
        <member name="M:Dart.Common.LicenseManager.NagTick(System.Object,System.EventArgs)">
            <summary>
            In the COM environment, a timer will generate a periodic nag message if:
            	1. No license is present.
            	2. License does not match the signature of the application being run.
            </summary>
        </member>
        <member name="M:Dart.Common.LicenseManager.GetRuntimeLicense(System.Type)">
            <summary>
            Used for COM interop.
            </summary>
            <returns>Returns true if a runtime license is present (can be a trial license)</returns>
        </member>
        <member name="M:Dart.Common.LicenseManager.SaveRuntimeLicense(System.String)">
            <summary>
            This method is invoked by license.exe, so don't change the signature!
            </summary>
            <param name="appPath"></param>
            <returns>Path to created file.</returns>
        </member>
        <member name="M:Dart.Common.LicenseManager.RuntimeLicensePath">
            <summary>
            Return the path of the runtime license for reading.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dart.Common.LicenseManager.RuntimeLicensePath(System.String)">
            <summary>
            Construct the path of the runtime license for writing.
            </summary>
            <param name="appPath"></param>
            <returns></returns>
        </member>
        <member name="M:Dart.Common.LicenseManager.GetLicense(System.Type,System.String,System.IO.Stream)">
            <summary>
            Get license out of a list of streams (ILMerge can produce a list).
            </summary>
        </member>
        <member name="M:Dart.Common.LicenseManager.FindLicenseKey(System.Type,Dart.Common.LicenseManager.Environment,System.Boolean@,System.String@)">
            <summary>
            Returns null if no license can be found.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dart.Common.LicenseManager.Message(System.String,Dart.Common.LicenseManager.Environment,System.Diagnostics.EventLogEntryType,System.Boolean,System.Boolean)">
            <summary>
            Message is used to inform user of some aspect of trial operation
            </summary>
        </member>
        <member name="M:Dart.Common.LicenseManager.GetLicenseKey">
            <summary>
            Get the runtime LicenseKey that will be saved as a license resource.
            Called from devenv.exe for licensing WebSite
            Called from devenv.exe when environment is creating an instance within it's development environment
            Called from lc.exe for licensing non-WebSite (standard MsBuild)
            Called whenever else a development environment creates an instance of us with UsageMode == Designtime.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dart.Common.LicenseManager.Verify(System.String,System.Type,Dart.Common.LicenseManager.Environment,System.Boolean,System.String)">
            <summary>
            Handle any user notification concerning licensing. Valid license passes with no notification.
            </summary>
            <param name="licenseKey">Key found in resource.</param>
            <param name="type"></param>
            <param name="environment"></param>
            <param name="plugin">True if a plugin scenario.</param>
            <param name="licensedAssemblyName">Filename of assembly where license was found.</param>
        </member>
        <member name="M:Dart.Common.LicenseManager.GetResourceLicenseStream(System.IO.FileInfo)">
            <summary>
            Use this method when we know the top-level process (app) is the managed app with the license resource in it.
            True for all device apps.
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:Dart.Common.LicenseManager.GetSystemNumber">
            <summary>
            Return a unique local system number that can be used for license validation at design-time.
            Ensures that at least one system identifier is used in construction of this fingerprint.
            If only defaults can be used, an exception is thrown.  In practice this should never happen.
            </summary>
            <returns>The system number, aka machine fingerprint.</returns>
        </member>
        <member name="M:Dart.Common.LicenseAccessProvider.GetContractVersion">
            <summary>
            Returns the version of this interface contract.
            A change in this number means the interfaces are no longer compatible.
            This allows older versions of tools to fail gracefully and avoid attempting to use assemblies that aren't compatible.
            As such, this is typically the very first method invoked, and the version must match the major version number of the tool.
            </summary>
            <returns>The contract version number</returns>
        </member>
        <member name="M:Dart.Common.LicenseAccessProvider.GetDeveloperLicense">
            <summary>
            Returns the fully qualified path to a developer license if this assembly is activated.
            </summary>
            <returns>The fully qualified license if activated, or null if not.</returns>
        </member>
        <member name="M:Dart.Common.LicenseAccessProvider.GenerateActivationCode(System.String)">
            <summary>
            Generates an activation code after validating the specified product license.
            </summary>
            <param name="productLicense">The license to validate</param>
            <returns>The non-zero system number, or zero if the specified license is invalid.</returns>
        </member>
        <member name="F:Dart.Common.MessageBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dart.Common.MessageBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Dart.Common.MessageBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Dart.Snmp.Segment">
            <summary>
            Used to describe a byte[] segment that holds data.
            </summary>
        </member>
        <member name="M:Dart.Snmp.Segment.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Used to create a Segment object that holds a buffer of data.
            </summary>
            <param name="buffer">Byte[] containing data.</param>
            <param name="offset">Offset into the buffer where the data starts.</param>
            <param name="count">Byte count of data.</param>
        </member>
        <member name="P:Dart.Snmp.Segment.Buffer">
            <summary>
            Gets the buffer that holds data.
            </summary>
        </member>
        <member name="P:Dart.Snmp.Segment.Offset">
            <summary>
            The offset into the buffer where the data starts.
            </summary>
        </member>
        <member name="P:Dart.Snmp.Segment.Count">
            <summary>
            Byte count of data.
            </summary>
        </member>
        <member name="T:Dart.Snmp.SocketBase">
            <summary>
            Base class for PowerTCP Components.
            </summary>
        </member>
        <member name="M:Dart.Snmp.SocketBase.Dispose(System.Boolean)">
            <summary>
            Disposes of SocketBase and its associated resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:Dart.Snmp.SocketBase.Socket">
            <summary>
            Gets the socket used by the component for communications.
            </summary>
            <value>The <see cref="T:System.Net.Sockets.Socket">Socket</see> used for UDP or TCP communications. Returns null when not in use.</value>
        </member>
        <member name="T:Dart.Snmp.IPEndPoint">
            <summary>
            Allows user to specify a range of IPEndPoints for local binding. Also resolves hostnames and saves them for future use.
            </summary>
        </member>
        <member name="M:Dart.Snmp.IPEndPoint.#ctor">
            <summary>
            Creates an IPEndPoint using IPAddress.Any and an ephemeral port (0).
            </summary>
        </member>
        <member name="M:Dart.Snmp.IPEndPoint.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            Creates an IPEndPoint using IPAddress.Any or IPAddress.IPv6Any and an ephemeral port (0).
            </summary>
            <param name="addressFamily">AddressFamily to match.</param>
        </member>
        <member name="M:Dart.Snmp.IPEndPoint.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Creates an IPEndPoint using a specified IPAddress and port.
            </summary>
            <param name="address">An IPv4 or IPv6 address.</param>
            <param name="port">The port to bind to.</param>
        </member>
        <member name="M:Dart.Snmp.IPEndPoint.#ctor(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            Creates an IPEndPoint using an IPAddress, port, and port range.
            </summary>
            <param name="address">An IPv4 or IPv6 address.</param>
            <param name="port">The port to bind to.</param>
            <param name="range">The range of ports, starting at port, to attempt to bind to.</param>
            <para>
            The socket will try to bind to the specified <i>port</i>. Upon failure, it will try to bind to each 
            successive port up to (<i>port</i> + <i>range</i>), until successful. 
            An Exception is raised if all binding attempts fail.
            </para>
        </member>
        <member name="M:Dart.Snmp.IPEndPoint.#ctor(System.String)">
            <summary>
            Creates an IPEndPoint using a hostname or address, and port 0.
            </summary>
            <param name="hostNameOrAddress">A hostname or an IPv4 or IPv6 address. Empty string resolves to the first local IPv4 network interface.</param>
            <remarks>
            <para>
            The <i>hostNameOrAddress</i> parameter is limited to 126 characters in pre-4.0 versions of the .NET Framework, and 255 characters in versions 4.0 and higher.
            </para>
            <para>
            If <i>hostNameOrAddress</i> is a hostname, resolves to the IPv4 address.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.IPEndPoint.#ctor(System.String,System.Int32)">
            <summary>
            Creates an IPEndPoint using a hostname or address, and port.
            </summary>
            <param name="hostNameOrAddress">A hostname or an IPv4 or IPv6 address. Empty string resolves to the first local IPv4 network interface.</param>
            <param name="port">The port to bind to.</param>
            <remarks>
            <para>
            The <i>hostNameOrAddress</i> parameter is limited to 126 characters in pre-4.0 versions of the .NET Framework, and 255 characters in versions 4.0 and higher.
            </para>
            <para>
            If <i>hostNameOrAddress</i> is a hostname, resolves to the IPv4 address.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.IPEndPoint.#ctor(System.String,System.Net.Sockets.AddressFamily,System.Int32)">
            <summary>
            Creates an IPEndPoint using a hostname or address, port, and AddressFamily.
            </summary>
            <param name="hostNameOrAddress">A hostname or string address. Empty string resolves to the first local network interface in the specified AddressFamily.</param>
            <param name="addressFamily">The <see cref="T:System.Net.Sockets.AddressFamily"/> to match if resolving a hostname.</param>
            <param name="port">The port to bind to.</param>
            <remarks>
            <para>
            The <i>hostNameOrAddress</i> parameter is limited to 126 characters in pre-4.0 versions of the .NET Framework, and 255 characters in versions 4.0 and higher.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.IPEndPoint.#ctor(System.String,System.Net.Sockets.AddressFamily,System.Int32,System.Int32)">
            <summary>
            Creates an IPEndPoint using a hostname or address, address family, port and range.
            </summary>
            <param name="hostNameOrAddress">A hostname or string address. Empty string resolves to the first local network interface in the specified AddressFamily.</param>
            <param name="addressFamily">The <see cref="T:System.Net.Sockets.AddressFamily">AddressFamily</see> to match if resolving a hostname.</param>
            <param name="port">The port to bind to.</param>
            <param name="range">The range of ports, starting at port, to attempt to bind to.</param>
            <remarks>
            <para>
            The socket will try to bind to the specified <i>port</i>. Upon failure, it will try with each 
            successive port up to (<i>port</i> + <i>range</i>), until successful. 
            An Exception is raised if all binding attempts fail.
            </para>
            <para>
            The <i>hostNameOrAddress</i> parameter is limited to 126 characters in pre-4.0 versions of the .NET Framework, and 255 characters in versions 4.0 and higher.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.IPEndPoint.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates an IPEndPoint using a hostname or address, address, port and range.
            </summary>
            <param name="hostNameOrAddress">A hostname or string address.</param>
            <param name="address">The IPAddress in string notation.</param>
            <param name="port">The port to bind to.</param>
            <param name="range">The range of ports, starting at port, to attempt to bind to.</param>
            <remarks>
            <para>
            This constructor is typically used to serialize the IPEndPoint and does not resolve hostNameOrAddress. 
            The hostname can be needed for some proxies.
            </para>
            </remarks>
        </member>
        <member name="F:Dart.Snmp.IPEndPoint.Range">
            <summary>
            The socket will be bound to a port between IPEndPoint.Port and (IPEndPoint.Port + Range), inclusive.
            </summary>
        </member>
        <member name="P:Dart.Snmp.IPEndPoint.HostNameOrAddress">
            <summary>
            Gets or sets the host name or address resolved to create this IPEndPoint. Also performs a DNS resolution.
            </summary>
            <remarks>The value of this property is limited to 126 characters in pre-4.0 versions of the .NET Framework,
            and 255 characters in versions 4.0 and higher. IDN encoding is performed for DNS resolution if a non-ASCII hostname is provided.</remarks>
        </member>
        <member name="P:Dart.Snmp.IPEndPoint.HostNameOrAddressColonPort">
            <summary>
            The host name or address used to create this IPEndPoint with ":port" appended.
            </summary>
            <remarks>If HostNameOrAddress is an IPv6 address, the format includes square brackets as follows: [xx:yy...zz]:port.</remarks>
        </member>
        <member name="P:Dart.Snmp.IPEndPoint.Port">
            <summary>
            Gets or sets the port number of the endpoint.
            </summary>
        </member>
        <member name="P:Dart.Snmp.IPEndPoint.Address">
            <summary>
            Gets or sets the address of the endpoint.
            </summary>
        </member>
        <member name="T:Dart.Snmp.SocketOption">
            <summary>
            Contains socket options that may be set by TCP and UDP sockets. These options are automatically applied to the connection used.
            </summary>
        </member>
        <member name="F:Dart.Snmp.SocketOption.LocalEndPoint">
            <summary>
            Gets or sets the desired local IPEndPointRange (address, port, range) the socket should be bound to.
            </summary>
            <remarks>
            Socket.Bind will be used bind the socket to the specified endpoint(s).
            .mjb.11-17-10.Remove from public interface...set from within Connect() instead.
            </remarks>
        </member>
        <member name="P:Dart.Snmp.SocketOption.ExclusiveAddressUse">
            <summary>
            When set to true, forbids multiple socket bindings to the same address.
            <remarks>Set this value to true to ensure you have exclusive use of the local endpoint. Socket.ExclusiveAddressUse is set to this
            value before Socket.Bind is used.</remarks>
            </summary>
        </member>
        <member name="P:Dart.Snmp.SocketOption.ReceiveBufferSize">
            <summary>
            Gets or sets a value that specifies the size of the system receive buffer.
            </summary>
            <value>An integer with a default value of 32786.</value>
            <remarks>
                <para>
                Increasing the buffer size may help performance when transferring large amounts of data,
                or when high bandwidth, high latency connections (such as a satellite broadband provider) are used.
                </para>
                <para>
                The value cannot be changed on CF devices.
                </para>
            </remarks>
        </member>
        <member name="P:Dart.Snmp.SocketOption.ReceiveTimeout">
            <summary>
            Gets or sets a value that specifies the amount of time after which the underlying Socket.Receive call will time out.
            </summary>
            <value>The time-out value in milliseconds.</value>
            <remarks>
            A value of 0 or -1 indicates an infinite time-out period.
            </remarks>
        </member>
        <member name="P:Dart.Snmp.SocketOption.ReuseAddress">
            <summary>
            When set to true, allows multiple socket bindings to the same address.
            <remarks>Set this value to true to allow multiple sockets to bind to the same local address.</remarks>
            </summary>
        </member>
        <member name="P:Dart.Snmp.SocketOption.SendBufferSize">
            <summary>
            Gets or sets a value that specifies the size of the system send buffer.
            </summary>
            <value>An integer with a default value of 8192.</value>
            <remarks>
                <para>
                Increasing the buffer size may help performance when transferring large amounts of data,
                or when high bandwidth, high latency connections (such as a satellite broadband provider) are used.
                </para>
            </remarks>
        </member>
        <member name="P:Dart.Snmp.SocketOption.SendTimeout">
            <summary>
            Gets or sets a value that specifies the amount of time after which the underlying Socket Send call will time out.
            </summary>
            <value>The time-out value in milliseconds. The default value is 0, which indicates an infinite time-out period.</value>
            <remarks>
                <para>
                Values between 1 and 499 will be changed to 500, as 500 is the minimum positive value. 
                Values of 0 and -1 indicate an infinite time-out period.
                </para>
                <para>
                This option has no affect on CF devices (the Write method will not time out).
                </para>
            </remarks>
        </member>
        <member name="T:Dart.Snmp.Agent">
            <summary>
            Specializes packet communications for the transport of SNMP messages between agents and managers.
            </summary>
            <example>
        The following example demonstrates starting a simple agent with one variable.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Add a variable to the agent
            agent1.Variables.Add(agent1.Mib.GetByNodeName(NodeName.sysContact).GetIid(),
                agent1.Mib.CreateVariable(NodeName.sysContact, "Systems Admin"));

            //Start listening for requests
            agent1.Start(agent1_MessageReceived, null);
        }

        private void agent1_MessageReceived(Agent agent, RequestMessage request, object state)
        {
            //Create and send a response whenever a request is received
            agent1.Send(agent1.CreateResponse(request), request.Origin);
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Add a variable to the agent
            agent1.Variables.Add(agent1.Mib.GetByNodeName(NodeName.sysContact).GetIid(), agent1.Mib.CreateVariable(NodeName.sysContact, "Systems Admin"))

            'Start listening for requests
            agent1.Start(AddressOf agent1_MessageReceived, Nothing)
        End Sub

        Private Sub agent1_MessageReceived(ByVal agent As Agent, ByVal request As RequestMessage, ByVal state As Object)
            'Create and send a response whenever a request is received
            agent1.Send(agent1.CreateResponse(request), request.Origin)
        End Sub
        </code>
      </example>
        </member>
        <member name="T:Dart.Snmp.SnmpBase">
            <summary>
            Base class used by Agent and Manager for common functionality.
            </summary>
        </member>
        <member name="M:Dart.Snmp.SnmpBase.#ctor">
            <summary>
            Presence of this internal constructor keeps us out of toolbox under CF.
            </summary>
        </member>
        <member name="F:Dart.Snmp.SnmpBase.Security">
            <summary>
            Security configuration for SNMPv3 entities.
            </summary>
            <value>
            <see cref="T:Dart.Snmp.SessionSecurity"/> containing cached security configuration and passwords.
            </value>
        </member>
        <member name="M:Dart.Snmp.SnmpBase.Open(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Opens <see cref="T:System.Net.Sockets.Socket"/> using the specified IPEndPoint. Only necessary if <see cref="M:Dart.Snmp.SnmpBase.Receive"/> is used.
            </summary>
            <param name="localEP">
            The local <see cref="T:System.Net.IPEndPoint">IPEndPoint</see> the socket will bind to. Use port 161 for most agent applications; 
            port 162 for most manager applications.
            </param>
            <param name="acceptBroadcast">Indicates whether broadcast packets will be processed. Must be false when using a dual mode socket.</param>
            <remarks>
            <para>
            Open and <see cref="M:Dart.Snmp.SnmpBase.Receive"/> are used when the current thread should sleep while waiting for the next packet. This technique
            is typically used in scripting applications. Use <see cref="M:Dart.Snmp.SnmpBase.Close"/> to release resources.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SnmpBase.Open(System.Net.IPEndPoint,System.Boolean,System.Boolean)">
            <summary>
            Opens <see cref="T:System.Net.Sockets.Socket"/> using the specified IPEndPoint. Only necessary if <see cref="M:Dart.Snmp.SnmpBase.Receive"/> is used.
            </summary>
            <param name="localEP">
            The local <see cref="T:System.Net.IPEndPoint">IPEndPoint</see> the socket will bind to. Use port 161 for most agent applications; 
            port 162 for most manager applications.
            </param>
            <param name="acceptBroadcast">Specifies whether broadcast packets will be processed. Must be false when using an IPv4-mapped IPv6 dual mode socket.</param>
            <param name="dualMode">Specifies whether the socket should be a dual mode IPv6 socket. Only supported on Vista and newer operating systems.</param>
            <remarks>
            <para>
            If dual mode (simultaneous IPv4 and IPv6) socket operation is desired, use IPAddress.IPv6Any (for all IPv4 and IPv6 interfaces) or an IPv4-mapped IPv6 
            address for the localEP address, and true for the dualMode argument. An IPv4-mapped IPv6 address is the IPv4 address of a network interface preceded by 
            "::ffff:". Ex: ::ffff:192.168.1.1. If an IPv4-mapped IPv6 address is used then <i>acceptBroadcast</i> must be false. To accept broadcast packets in dual mode, 
            IPAddress.IPv6Any must be used.
            </para>
            <para>
            Open and <see cref="M:Dart.Snmp.SnmpBase.Receive"/> are used when the current thread should sleep while waiting for the next packet. This technique
            is typically used in scripting applications. Use <see cref="M:Dart.Snmp.SnmpBase.Close"/> to release resources. 
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SnmpBase.CreateResponse(Dart.Snmp.RequestMessage)">
            <summary>
            Creates a <see cref="T:Dart.Snmp.ResponseMessage">ResponseMessage</see> from the <see cref="T:Dart.Snmp.RequestMessage">RequestMessage</see> received.
            Supports SNMPv3 discovery packets by returning a <see cref="T:Dart.Snmp.ReportMessage">ReportMessage</see> that should be sent to the initiator.
            </summary>
            <param name="request">The received RequestMessage.</param>
            <remarks>
            <para>
            An SNMPv3 <see cref="T:Dart.Snmp.ReportMessage"/> is returned when:<br/>
            1. The engine ID of the request does not match Security.AuthoritativeEngine.Id (a usmStatsUnknownEngineIDs variable is added to the variable bindings).<br/>
            2. Authentication is requested and the time window has not been synchronized (a usmStatsNotInTimeWindows variable is added to the variable bindings).<br/>
            3. The received username is not present in Security.AuthoritativeEngine.Users or Security.TrapUsers (a usmStatsUnknownUserNames variable is added to the variable bindings).<br/>
            4. The received username is present, but the security level in the packet does not match the security level in the AuthoritativeEngine 
            (a usmStatsUnsupportedSecLevels variable is added to the variable bindings).<br/>
            5. Authentication failed because the computed digest failed to match (a usmStatsWrongDigests variable is added to the variable bindings).
            </para>
            <para>
            No response is desired if the received request could not be decrypted with the specified password. A null is returned in this case.
            </para>
            </remarks>
            <returns>The ResponseMessage created based on the RequestMessage.</returns>
        </member>
        <member name="M:Dart.Snmp.SnmpBase.Receive">
            <summary>
            Used to receive an SNMP message on the current thread.
            </summary>
            <returns>A <see cref="T:Dart.Snmp.MessageBase"/> that can be cast to the expected <see cref="T:Dart.Snmp.Trap1Message"/>, <see cref="T:Dart.Snmp.Trap2Message"/>,
            <see cref="T:Dart.Snmp.InformMessage"/>, <see cref="T:Dart.Snmp.SetMessage"/>, <see cref="T:Dart.Snmp.GetMessage"/>, <see cref="T:Dart.Snmp.GetNextMessage"/> or <see cref="T:Dart.Snmp.GetBulkMessage"/>.</returns>
            <remarks>
            <para>
            <see cref="M:Dart.Snmp.SnmpBase.Open(System.Net.IPEndPoint,System.Boolean)">Open</see> must be used to create <see cref="T:System.Net.Sockets.Socket"/> before using Receive. The thread sleeps while waiting for the next packet. 
            This technique is used in scripting and console applications where the main thread must be blocked until terminated. <see cref="M:Dart.Snmp.SnmpBase.Close"/>
            can be used (on another thread) to release a pending Receive (a SocketException is thrown).
            </para>
            <para>
            <see cref="T:Dart.Snmp.Agent"/> can open port 161 and use this method to receive 
            <see cref="T:Dart.Snmp.SetMessage"/>, <see cref="T:Dart.Snmp.GetMessage"/>, <see cref="T:Dart.Snmp.GetNextMessage"/> and <see cref="T:Dart.Snmp.GetBulkMessage"/> PDUs.
            </para>
            <para>
            <see cref="T:Dart.Snmp.Manager"/> can open port 162 and use this method to receive <see cref="T:Dart.Snmp.Trap1Message"/>, <see cref="T:Dart.Snmp.Trap2Message"/> and <see cref="T:Dart.Snmp.InformMessage"/> PDUs.
            </para>
            </remarks>
            <exception cref="T:System.Net.Sockets.SocketException">Thrown by <see cref="T:System.Net.Sockets.Socket"/>.</exception>
        </member>
        <member name="M:Dart.Snmp.SnmpBase.ReadCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Unified receive of asynchronous packet is used by Agent (for requests) and Manager (for traps and informs).
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dart.Snmp.SnmpBase.Send(Dart.Snmp.MessageBase,System.Net.IPEndPoint)">
            <summary>
            Send a message to the SNMP manager or agent specified.
            </summary>
            <param name="message">The SNMP message to send.</param>
            <param name="remoteEP">An <see cref="T:System.Net.IPEndPoint">IPEndPoint</see> that specifies the destination of the message.</param>
            <returns>The number of bytes sent.</returns>
            <remarks>
            <para>
            An agent will typically use this method to communicate with SNMP managers. A <see cref="T:Dart.Snmp.Trap1Message"/> or <see cref="T:Dart.Snmp.Trap2Message"/> can be 
            sent at any time to indicate an alarm. Also used to reply to a <see cref="T:Dart.Snmp.RequestMessage"/>. 
            An agent can receive a <see cref="T:Dart.Snmp.GetMessage"/>, <see cref="T:Dart.Snmp.GetNextMessage"/>, <see cref="T:Dart.Snmp.GetBulkMessage"/> or <see cref="T:Dart.Snmp.SetMessage"/> request after 
            <see cref="M:Dart.Snmp.Agent.Start(Dart.Snmp.RequestReceived,System.Net.IPEndPoint,System.Boolean,System.Object)"/> or <see cref="M:Dart.Snmp.SnmpBase.Receive"/> is used. <see cref="M:Dart.Snmp.SnmpBase.CreateResponse(Dart.Snmp.RequestMessage)"/> is 
            used to create a <see cref="T:Dart.Snmp.ResponseMessage"/> that is sent using this method.
            </para>
            <para>
            A manager can receive an <see cref="T:Dart.Snmp.InformMessage"/> after <see cref="M:Dart.Snmp.Manager.Start(Dart.Snmp.NotificationReceived,System.Net.IPEndPoint,System.Boolean,System.Object)"/> or <see cref="M:Dart.Snmp.SnmpBase.Receive"/> is used.
            <see cref="M:Dart.Snmp.SnmpBase.CreateResponse(Dart.Snmp.RequestMessage)"/> is used to create a <see cref="T:Dart.Snmp.ResponseMessage"/> that is sent using this method.
            </para>
            <para>
            The AddressFamily of <see cref="P:Dart.Snmp.SocketBase.Socket">Socket</see> must match the AddressFamily of remoteEP.
            </para>
            <para>
            If <see cref="P:Dart.Snmp.SocketBase.Socket">Socket</see> is null, a new Socket is created on IPAddress.Any or IPAddress.IPv6Any as appropriate for remoteEP. <see cref="M:Dart.Snmp.SnmpBase.Close"/> should be used as warranted.
            </para>
            <para>
            If <see cref="P:Dart.Snmp.Trap1Message.AgentAddress"/> is not set it will be initialized to the address of <see cref="P:Dart.Snmp.SocketBase.Socket">Socket</see>.
            </para>
            <para>
            The <see cref="P:Dart.Snmp.MessageBase.EncodedMessage">EncodedMessage</see> property of the message is updated with the encoded message actually sent.
            </para>
            </remarks>
            <exception cref="T:System.Net.Sockets.SocketException">A problem occurred using network resources.</exception>
            <example>
        The following example demonstrates how to send traps with the agent.
        <code lang="C#">
        private void TrapSender_Load(object sender, EventArgs e)
        {
            //Set sysObjectId to your enterprise number (for Trap1).
            agent1.Variables.Add(agent1.Mib.GetByNodeName(NodeName.sysObjectID).GetIid(), agent1.Mib.CreateVariable(NodeName.sysObjectID, "1.3.6.1.4.1.52222"));
        }

        private void buttonSendTrap1_Click(object sender, EventArgs e)
        {
            //Send an SNMPv1 Trap
            agent1.Send(new Dart.Snmp.Trap1.warmStart(agent1.Variables[agent1.Mib.GetByNodeName(NodeName.sysObjectID).GetIid()].Value.ToString(), agent1.SysUpTime), myManagerAddress);
        }

        private void buttonSendTrap2_Click(object sender, EventArgs e)
        {
            //Send an SNMPv2 Trap (for SNMPv3, configure warmStart.Security.User)
            agent1.Send(new Dart.Snmp.Trap2.warmStart(agent1.SysUpTime), myManagerAddress);
        }
        </code>
        <code lang="VB">
        Private Sub TrapSender_Load(ByVal sender As Object, ByVal e As EventArgs)
            'Set sysObjectId to your enterprise number (for Trap1).
            agent1.Variables.Add(agent1.Mib.GetByNodeName(NodeName.sysObjectID).GetIid(), agent1.Mib.CreateVariable(NodeName.sysObjectID, "1.3.6.1.4.1.52222"))
        End Sub

        Private Sub buttonSendTrap1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Send an SNMPv1 Trap
            agent1.Send(New Dart.Snmp.Trap1.warmStart(agent1.Variables(agent1.Mib.GetByNodeName(NodeName.sysObjectID).GetIid()).Value.ToString(), agent1.SysUpTime), myManagerAddress)
        End Sub

        Private Sub buttonSendTrap2_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Send an SNMPv2 Trap (for SNMPv3, configure warmStart.Security.User)
            agent1.Send(New Dart.Snmp.Trap2.warmStart(agent1.SysUpTime), myManagerAddress)
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.SnmpBase.Start(Dart.Snmp.ThreadStart,System.Object)">
            <summary>
            Starts a worker thread on which the specified user method executes.
            </summary>
            <param name="worker"><see cref="T:Dart.Snmp.ThreadStart"/> delegate specifies the user method to execute.</param>
            <param name="state">Object to pass to the user method; can be null.</param>
            <remarks>
            <para>
            This method is used to execute functions on multiple, concurrent worker threads. 
            Applications should use this technique to execute processes (like a series of GetRequest methods) that would 
            block the current thread.
            For example, a complex application could contact several agents concurrently by running multiple requests on multiple threads.
            </para>
            <para>
            Creates an <see cref="T:Dart.Snmp.SnmpSocket"/> bound to IPAddress.Any and port 0 (the ephemeral port), and passes it into the user method. 
            To specify the local binding address, use <see cref="M:Dart.Snmp.SnmpBase.Start(Dart.Snmp.ThreadStart,System.Net.IPEndPoint,System.Object)"/>.
            </para>
            <para>
            Socket resources are automatically released when the user method completes.
            Unhandled exceptions thrown on the worker thread are caught and reported by the 
            <see cref="E:Dart.Snmp.ComponentBase.Error">Error</see> event.
            </para>
            </remarks>
            <example>
        The following example demonstrates sending an SNMPv1 Get request to an agent and receiving the response.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Create and send request on a worker thread
            manager1.Start(manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact));
        }

        private void button2_Click(object sender, EventArgs e)
        {
            //If you don't have the MIB, retrieve the value by IID:
            manager1.Start(manager1_SendGetRequest, new Variable("1.3.6.1.2.1.1.4.0"));
        }

        private void manager1_SendGetRequest(SnmpSocket managerSocket, object state)
        {
            //Create Get Request
            GetMessage request = new GetMessage();
            request.Variables.Add(state as Variable);

            //Send request and get response
            ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

            //Marshal response to the UI thread using the Message event
            manager1.Marshal(new ResponseMessage[] { response }, "", null);
        }

        private void manager1_Message(object sender, MessageEventArgs e)
        {
            //Display info about the first variable in the response, and its value
            Variable vari = e.Messages[0].Variables[0];
            label1.Text += vari.Definition.ToString() + vari.Value.ToString() + "\r\n";
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create and send request on a worker thread
            manager1.Start(AddressOf manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact))
        End Sub

        Private Sub button2_Click(ByVal sender As Object, ByVal e As EventArgs)
            'If you don't have the MIB, retrieve the value by IID:
            manager1.Start(AddressOf manager1_SendGetRequest, New Variable("1.3.6.1.2.1.1.4.0"))
        End Sub

        Private Sub manager1_SendGetRequest(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Create Get Request
            Dim request As New GetMessage()
            request.Variables.Add(TryCast(state, Variable))

            'Send request and get response
            Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

            'Marshal response to the UI thread using the Message event
            manager1.Marshal(New ResponseMessage() { response }, "", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
            'Display info about the first variable in the response, and its value
            Dim vari As Variable = e.Messages(0).Variables(0)
            label1.Text &amp;= vari.Definition.ToString() &amp; vari.Value.ToString() &amp; vbCrLf
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.SnmpBase.Start(Dart.Snmp.ThreadStart,System.Net.IPEndPoint,System.Object)">
            <summary>
            Starts a worker thread on which the specified user method executes.  
            </summary>
            <param name="worker"><see cref="T:Dart.Snmp.ThreadStart"/> delegate specifies the user method to execute.</param>
            <param name="localEP">
            The local <see cref="T:System.Net.IPEndPoint">IPEndPoint</see> to bind to. The ephemeral port of 0 is typically used.
            </param>
            <param name="state">Object to pass to the user method; can be null.</param>
            <remarks>
            <para>
            This method is used to execute functions on multiple, concurrent worker threads. 
            Applications should use this technique to execute processes (like a series of GetRequest methods) that would 
            block the current thread.
            For example, a complex application could contact several agents concurrently by running multiple requests on multiple threads.
            </para>
            <para>
            localEP.AddressFamily must match the AddressFamily of the target SNMP entity.
            </para>
            <para>
            Socket resources are automatically released when the user method completes.
            Unhandled exceptions thrown on the worker thread are caught and reported by the 
            <see cref="E:Dart.Snmp.ComponentBase.Error">Error</see> event.
            </para>
            </remarks>
            <example>
        The following example demonstrates sending an SNMPv1 Get request to an agent and receiving the response.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Create and send request on a worker thread
            manager1.Start(manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact));
        }

        private void button2_Click(object sender, EventArgs e)
        {
            //If you don't have the MIB, retrieve the value by IID:
            manager1.Start(manager1_SendGetRequest, new Variable("1.3.6.1.2.1.1.4.0"));
        }

        private void manager1_SendGetRequest(SnmpSocket managerSocket, object state)
        {
            //Create Get Request
            GetMessage request = new GetMessage();
            request.Variables.Add(state as Variable);

            //Send request and get response
            ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

            //Marshal response to the UI thread using the Message event
            manager1.Marshal(new ResponseMessage[] { response }, "", null);
        }

        private void manager1_Message(object sender, MessageEventArgs e)
        {
            //Display info about the first variable in the response, and its value
            Variable vari = e.Messages[0].Variables[0];
            label1.Text += vari.Definition.ToString() + vari.Value.ToString() + "\r\n";
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create and send request on a worker thread
            manager1.Start(AddressOf manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact))
        End Sub

        Private Sub button2_Click(ByVal sender As Object, ByVal e As EventArgs)
            'If you don't have the MIB, retrieve the value by IID:
            manager1.Start(AddressOf manager1_SendGetRequest, New Variable("1.3.6.1.2.1.1.4.0"))
        End Sub

        Private Sub manager1_SendGetRequest(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Create Get Request
            Dim request As New GetMessage()
            request.Variables.Add(TryCast(state, Variable))

            'Send request and get response
            Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

            'Marshal response to the UI thread using the Message event
            manager1.Marshal(New ResponseMessage() { response }, "", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
            'Display info about the first variable in the response, and its value
            Dim vari As Variable = e.Messages(0).Variables(0)
            label1.Text &amp;= vari.Definition.ToString() &amp; vari.Value.ToString() &amp; vbCrLf
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.SnmpBase.Start(Dart.Snmp.ThreadStart,System.Net.IPEndPoint,System.Boolean,System.Object)">
            <summary>
            Starts a worker thread on which the specified user method executes.  
            </summary>
            <param name="worker"><see cref="T:Dart.Snmp.ThreadStart"/> delegate specifies the user method to execute.</param>
            <param name="localEP">
            The local <see cref="T:System.Net.IPEndPoint">IPEndPoint</see> to bind to. The ephemeral port of 0 is typically used.
            </param>
            <param name="dualMode">
            Specifies whether the socket should be a dual mode IPv6 socket or not. Only supported on Vista and newer operating systems.
            </param>
            <param name="state">Object to pass to the user method; can be null.</param>
            <remarks>
            <para>
            This method is used to execute functions on multiple, concurrent worker threads. 
            Applications should use this technique to execute processes (like a series of GetRequest methods) that would 
            block the current thread.
            For example, a complex application could contact several agents concurrently by running multiple requests on multiple threads.
            </para>
            <para>
            localEP.AddressFamily must match the AddressFamily of the target SNMP entity unless dualMode is true and localEP.Address 
            is IPAddress.IPv6Any or an IPv4-mapped IPv6 address. If dual mode (simultaneous IPv4 and IPv6) socket operation is desired, 
            use IPAddress.IPv6Any (for all IPv4 and IPv6 interfaces) or an IPv4-mapped IPv6 address for the localEP address, and true 
            for the dualMode argument. An IPv4-mapped IPv6 address is the IPv4 address of a network interface preceded by 
            "::ffff:". Ex: ::ffff:192.168.1.1.
            </para>
            <para>
            Socket resources are automatically released when the user method completes.
            Unhandled exceptions thrown on the worker thread are caught and reported by the 
            <see cref="E:Dart.Snmp.ComponentBase.Error">Error</see> event.
            </para>
            </remarks>
            <example>
        The following example demonstrates sending an SNMPv1 Get request to an agent and receiving the response.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Create and send request on a worker thread
            manager1.Start(manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact));
        }

        private void button2_Click(object sender, EventArgs e)
        {
            //If you don't have the MIB, retrieve the value by IID:
            manager1.Start(manager1_SendGetRequest, new Variable("1.3.6.1.2.1.1.4.0"));
        }

        private void manager1_SendGetRequest(SnmpSocket managerSocket, object state)
        {
            //Create Get Request
            GetMessage request = new GetMessage();
            request.Variables.Add(state as Variable);

            //Send request and get response
            ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

            //Marshal response to the UI thread using the Message event
            manager1.Marshal(new ResponseMessage[] { response }, "", null);
        }

        private void manager1_Message(object sender, MessageEventArgs e)
        {
            //Display info about the first variable in the response, and its value
            Variable vari = e.Messages[0].Variables[0];
            label1.Text += vari.Definition.ToString() + vari.Value.ToString() + "\r\n";
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create and send request on a worker thread
            manager1.Start(AddressOf manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact))
        End Sub

        Private Sub button2_Click(ByVal sender As Object, ByVal e As EventArgs)
            'If you don't have the MIB, retrieve the value by IID:
            manager1.Start(AddressOf manager1_SendGetRequest, New Variable("1.3.6.1.2.1.1.4.0"))
        End Sub

        Private Sub manager1_SendGetRequest(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Create Get Request
            Dim request As New GetMessage()
            request.Variables.Add(TryCast(state, Variable))

            'Send request and get response
            Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

            'Marshal response to the UI thread using the Message event
            manager1.Marshal(New ResponseMessage() { response }, "", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
            'Display info about the first variable in the response, and its value
            Dim vari As Variable = e.Messages(0).Variables(0)
            label1.Text &amp;= vari.Definition.ToString() &amp; vari.Value.ToString() &amp; vbCrLf
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.SnmpBase.OnLog(Dart.Snmp.LogEventArgs)">
            <summary>
            Raises the <see cref="E:Dart.Snmp.SnmpBase.Log"/> event.
            </summary>
            <param name="e">A <see cref="T:Dart.Snmp.LogEventArgs"/> object containing event data.</param>
            <remarks>
            If the Synchronizing property is set, this method asynchronously invokes the event on the UI thread.
            If the Synchronizing property is null, this method invokes the event on the executing thread.
            <para>
            The OnLog method allows derived classes to handle the event without attaching a delegate, but marshaling is not provided.
            This is the preferred technique for handling the event in a derived class.
            </para>
            <para>
            <b>Note to Inheritors:</b> When overriding this method in a derived class, 
            be sure to call the base class OnLog method, so that registered delegates receive the event. 
            </para>
            <para>
            See the <see cref="P:Dart.Snmp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
            updating UI controls in your event handler.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SnmpBase.Close">
            <summary>
             Terminates Agent or Trap operation by releasing communication resources.
             </summary>
            	<remarks>
             <para>
             The Socket property is null after Close is used.
             </para>
            	</remarks>
        </member>
        <member name="F:Dart.Snmp.SnmpBase.Mib">
            <summary>
            Gets the MibNodes object containing MIB definitions.
            </summary>
            <remarks>
            <para>This property is used during response message decoding to populate Variable.MibNode with a MibNode object containing a matching Variable.Id value.</para>
            <para>Mib is initialized with objects from the intrinsic MibNode objects as well objects added with code or imported from external mib files.</para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SnmpBase.Marshal(Dart.Snmp.MessageBase[],System.String,System.Object)">
            <summary>
            Marshals SNMP messages to the UI thread.
            </summary>
            <param name="messages">Message instances derived from MessageBase to marshal to the UI thread.</param>
            <param name="message">String message to pass into the Message event.</param>
            <param name="state">Object to pass to the Message event; can be null.</param>
            <remarks>
            <para>
            This method is used to marshal messages from a worker thread to the UI thread for typical display purposes. 
            It calls the <see cref="M:Dart.Snmp.SnmpBase.OnMessage(Dart.Snmp.MessageEventArgs)"/> method, which raises the <see cref="E:Dart.Snmp.SnmpBase.Message"/> event.
            </para>
            <para>
            See the <see cref="P:Dart.Snmp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
            updating UI controls in your event handler.
            </para>
            </remarks>
            <example>
        The following example demonstrates sending an SNMPv1 Get request to an agent and receiving the response.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Create and send request on a worker thread
            manager1.Start(manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact));
        }

        private void button2_Click(object sender, EventArgs e)
        {
            //If you don't have the MIB, retrieve the value by IID:
            manager1.Start(manager1_SendGetRequest, new Variable("1.3.6.1.2.1.1.4.0"));
        }

        private void manager1_SendGetRequest(SnmpSocket managerSocket, object state)
        {
            //Create Get Request
            GetMessage request = new GetMessage();
            request.Variables.Add(state as Variable);

            //Send request and get response
            ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

            //Marshal response to the UI thread using the Message event
            manager1.Marshal(new ResponseMessage[] { response }, "", null);
        }

        private void manager1_Message(object sender, MessageEventArgs e)
        {
            //Display info about the first variable in the response, and its value
            Variable vari = e.Messages[0].Variables[0];
            label1.Text += vari.Definition.ToString() + vari.Value.ToString() + "\r\n";
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create and send request on a worker thread
            manager1.Start(AddressOf manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact))
        End Sub

        Private Sub button2_Click(ByVal sender As Object, ByVal e As EventArgs)
            'If you don't have the MIB, retrieve the value by IID:
            manager1.Start(AddressOf manager1_SendGetRequest, New Variable("1.3.6.1.2.1.1.4.0"))
        End Sub

        Private Sub manager1_SendGetRequest(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Create Get Request
            Dim request As New GetMessage()
            request.Variables.Add(TryCast(state, Variable))

            'Send request and get response
            Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

            'Marshal response to the UI thread using the Message event
            manager1.Marshal(New ResponseMessage() { response }, "", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
            'Display info about the first variable in the response, and its value
            Dim vari As Variable = e.Messages(0).Variables(0)
            label1.Text &amp;= vari.Definition.ToString() &amp; vari.Value.ToString() &amp; vbCrLf
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.SnmpBase.OnMessage(Dart.Snmp.MessageEventArgs)">
            <summary>
            Raises the <see cref="E:Dart.Snmp.SnmpBase.Message"/> event.
            </summary>
            <param name="e">A <see cref="T:Dart.Snmp.MessageEventArgs"/> object containing event data.</param>
            <remarks>
            If the Synchronizing property is set, this method asynchronously invokes the event on the UI thread.
            If the Synchronizing property is null, this method invokes the event on the executing thread.
            <para>
            The OnMessage method allows derived classes to handle the event without attaching a delegate, but marshaling is not provided.
            This is the preferred technique for handling the event in a derived class.
            </para>
            <para>
            <b>Note to Inheritors:</b> When overriding this method in a derived class, 
            be sure to call the base class OnMessage method, so that registered delegates receive the event. 
            </para>
            <para>
            See the <see cref="P:Dart.Snmp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
            updating UI controls in your event handler.
            </para>
            </remarks>
        </member>
        <member name="P:Dart.Snmp.SnmpBase.IsActive">
            <summary>
            Gets a value indicating if the component has an active socket.
            </summary>
            <remarks>
            <see cref="M:Dart.Snmp.SnmpBase.Close"/> can be used to stop receiving messages.
            </remarks>
        </member>
        <member name="E:Dart.Snmp.SnmpBase.Log">
            <summary>
            Used to log SNMP messages sent or received.
            </summary>
            <remarks>
            Useful for capturing discovery packets.
            </remarks>
            <example>
        The following example demonstrates using the Log event to record traffic or update a UI.
        <code lang="C#">
        //Call file.Close() when the app shuts down
        FileStream file = new FileStream("log.txt", FileMode.Append, FileAccess.Write);

        private void manager1_Log(object sender, LogEventArgs e)
        {
            //Write SNMP packets to a file
            string label = (e.Message.Origin == null) ? "\r\nSent:\r\n" : "\r\nReceived:\r\n";
            file.Write(System.Text.Encoding.Default.GetBytes(label), 0, label.Length);
            file.Write(e.Message.EncodedMessage, 0, e.Message.EncodedMessage.Length);

            //Indicate in UI that a message was received
            if (e.Message is ResponseMessage)
                label1.Text += System.DateTime.Now.ToString() + ": " + e.Message.Origin.ToString() + ": " +
                    "Response received with " + e.Message.Variables.Count.ToString() + " variable(s).\r\n";
        }
        </code>
        <code lang="VB">
        'Call file.Close() when the app shuts down
        Private file As New FileStream("log.txt", FileMode.Append, FileAccess.Write)

        Private Sub manager1_Log(ByVal sender As Object, ByVal e As LogEventArgs)
            'Write SNMP packets to a file
            Dim label As String = If(e.Message.Origin Is Nothing, vbCrLf &amp; "Sent:" &amp; vbCrLf, vbCrLf &amp; "Received:" &amp; vbCrLf)
            file.Write(System.Text.Encoding.Default.GetBytes(label), 0, label.Length)
            file.Write(e.Message.EncodedMessage, 0, e.Message.EncodedMessage.Length)

            'Indicate in UI that a message was received
            If TypeOf e.Message Is ResponseMessage Then
                label1.Text &amp;= Date.Now.ToString() &amp; ": " &amp; e.Message.Origin.ToString() &amp; ": " &amp; "Response received with " &amp; e.Message.Variables.Count.ToString() &amp; " variable(s)." &amp; vbCrLf
            End If
        End Sub
        </code>
      </example>
        </member>
        <member name="E:Dart.Snmp.SnmpBase.Message">
            <summary>
            Raised when <see cref="M:Dart.Snmp.SnmpBase.Marshal(Dart.Snmp.MessageBase[],System.String,System.Object)"/> is used.
            </summary>
            <remarks>
                See the <see cref="P:Dart.Snmp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
                updating UI controls in your event handler.
            </remarks>
            <example>
        The following example demonstrates sending an SNMPv1 Get request to an agent and receiving the response.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Create and send request on a worker thread
            manager1.Start(manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact));
        }

        private void button2_Click(object sender, EventArgs e)
        {
            //If you don't have the MIB, retrieve the value by IID:
            manager1.Start(manager1_SendGetRequest, new Variable("1.3.6.1.2.1.1.4.0"));
        }

        private void manager1_SendGetRequest(SnmpSocket managerSocket, object state)
        {
            //Create Get Request
            GetMessage request = new GetMessage();
            request.Variables.Add(state as Variable);

            //Send request and get response
            ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

            //Marshal response to the UI thread using the Message event
            manager1.Marshal(new ResponseMessage[] { response }, "", null);
        }

        private void manager1_Message(object sender, MessageEventArgs e)
        {
            //Display info about the first variable in the response, and its value
            Variable vari = e.Messages[0].Variables[0];
            label1.Text += vari.Definition.ToString() + vari.Value.ToString() + "\r\n";
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create and send request on a worker thread
            manager1.Start(AddressOf manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact))
        End Sub

        Private Sub button2_Click(ByVal sender As Object, ByVal e As EventArgs)
            'If you don't have the MIB, retrieve the value by IID:
            manager1.Start(AddressOf manager1_SendGetRequest, New Variable("1.3.6.1.2.1.1.4.0"))
        End Sub

        Private Sub manager1_SendGetRequest(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Create Get Request
            Dim request As New GetMessage()
            request.Variables.Add(TryCast(state, Variable))

            'Send request and get response
            Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

            'Marshal response to the UI thread using the Message event
            manager1.Marshal(New ResponseMessage() { response }, "", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
            'Display info about the first variable in the response, and its value
            Dim vari As Variable = e.Messages(0).Variables(0)
            label1.Text &amp;= vari.Definition.ToString() &amp; vari.Value.ToString() &amp; vbCrLf
        End Sub
        </code>
      </example>
        </member>
        <member name="F:Dart.Snmp.Agent.DefaultPort">
            <summary>
            The "well-known" default port for Agent operations; 161.
            </summary>
            <value>161</value>
        </member>
        <member name="M:Dart.Snmp.Agent.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the Agent component.
            </summary>
            <param name="container">An object that implements IContainer. The Agent component adds itself to this container so it will be disposed of by the site.</param>
        </member>
        <member name="M:Dart.Snmp.Agent.#ctor">
            <summary>
            Initializes a new instance of the Agent component.
            </summary>
        </member>
        <member name="M:Dart.Snmp.Agent.Start(Dart.Snmp.RequestReceived,System.Object)">
            <summary>
            Starts receiving SNMP requests asynchronously, invoking the specified callback method on an IO completion thread as each <see cref="T:Dart.Snmp.RequestMessage"/> is received.
            </summary>
            <param name="callback">A <see cref="T:Dart.Snmp.RequestReceived"/> delegate specifying the method to execute when a <see cref="T:Dart.Snmp.RequestMessage"/> is received.</param>
            <param name="state">Object to pass to the callback method; can be null.</param>
            <remarks>
            <para>
            Use this method to receive SNMP requests from SNMP managers. It is possible for the RequestReceived callback method to be invoked concurrently on multiple IO completion threads,
            so its code should be thread-safe.
            </para>
            <para>
            The socket is bound to the first local IPv4 network interface on port 161 and will receive datagrams sent to IPAddress.Broadcast.
            </para>
            <para>
            This method creates a new <see cref="P:Dart.Snmp.SocketBase.Socket"/>. Use multiple <see cref="T:Dart.Snmp.Agent"/> instances to accept SNMP requests on multiple sockets.
            </para>
            <para>
            Unhandled exceptions thrown on the IO Completion thread are caught and reported by the <see cref="E:Dart.Snmp.ComponentBase.Error">Error</see> event.
            </para>
            <para>
            Scripting applications should use <see cref="M:Dart.Snmp.SnmpBase.Receive"/> instead.
            </para>
            </remarks>
            <example>
        The following example demonstrates starting a simple agent with one variable.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Add a variable to the agent
            agent1.Variables.Add(agent1.Mib.GetByNodeName(NodeName.sysContact).GetIid(),
                agent1.Mib.CreateVariable(NodeName.sysContact, "Systems Admin"));

            //Start listening for requests
            agent1.Start(agent1_MessageReceived, null);
        }

        private void agent1_MessageReceived(Agent agent, RequestMessage request, object state)
        {
            //Create and send a response whenever a request is received
            agent1.Send(agent1.CreateResponse(request), request.Origin);
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Add a variable to the agent
            agent1.Variables.Add(agent1.Mib.GetByNodeName(NodeName.sysContact).GetIid(), agent1.Mib.CreateVariable(NodeName.sysContact, "Systems Admin"))

            'Start listening for requests
            agent1.Start(AddressOf agent1_MessageReceived, Nothing)
        End Sub

        Private Sub agent1_MessageReceived(ByVal agent As Agent, ByVal request As RequestMessage, ByVal state As Object)
            'Create and send a response whenever a request is received
            agent1.Send(agent1.CreateResponse(request), request.Origin)
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.Agent.Start(Dart.Snmp.RequestReceived,System.Net.IPEndPoint,System.Boolean,System.Object)">
            <summary>
            Starts receiving SNMP requests asynchronously, invoking the specified callback method on an IO completion thread as each <see cref="T:Dart.Snmp.RequestMessage"/> is received.
            </summary>
            <param name="callback">A <see cref="T:Dart.Snmp.RequestReceived"/> delegate specifying the method to execute when a <see cref="T:Dart.Snmp.RequestMessage"/> is received.</param>
            <param name="localEP"><see cref="T:System.Net.IPEndPoint">IPEndPoint</see> specifying the local network interface to bind to.</param>
            <param name="acceptBroadcast">Specifies whether the Agent should accept requests that are broadcast to the network. Must be false when using a dual mode socket.</param>
            <param name="state">Object to pass to the callback method; can be null.</param>
            <remarks>
            <para>
            Use this method to receive SNMP requests from SNMP managers. It is possible for the RequestReceived delegate to be raised concurrently on multiple IO Completion threads,
            so its code should be thread-safe.
            </para>
            <para>
            This method always creates a new <see cref="P:Dart.Snmp.SocketBase.Socket"/>. Use multiple <see cref="T:Dart.Snmp.Agent"/> instances to accept SNMP requests on multiple sockets.
            </para>
            <para>
            Unhandled exceptions thrown on the IO Completion thread are caught and reported by the <see cref="E:Dart.Snmp.ComponentBase.Error">Error</see> event.
            </para>
            <para>
            Scripting applications should use <see cref="M:Dart.Snmp.SnmpBase.Receive"/> instead.
            </para>
            </remarks>
            <example>
        The following example demonstrates starting a simple agent with one variable.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Add a variable to the agent
            agent1.Variables.Add(agent1.Mib.GetByNodeName(NodeName.sysContact).GetIid(),
                agent1.Mib.CreateVariable(NodeName.sysContact, "Systems Admin"));

            //Start listening for requests
            agent1.Start(agent1_MessageReceived, null);
        }

        private void agent1_MessageReceived(Agent agent, RequestMessage request, object state)
        {
            //Create and send a response whenever a request is received
            agent1.Send(agent1.CreateResponse(request), request.Origin);
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Add a variable to the agent
            agent1.Variables.Add(agent1.Mib.GetByNodeName(NodeName.sysContact).GetIid(), agent1.Mib.CreateVariable(NodeName.sysContact, "Systems Admin"))

            'Start listening for requests
            agent1.Start(AddressOf agent1_MessageReceived, Nothing)
        End Sub

        Private Sub agent1_MessageReceived(ByVal agent As Agent, ByVal request As RequestMessage, ByVal state As Object)
            'Create and send a response whenever a request is received
            agent1.Send(agent1.CreateResponse(request), request.Origin)
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.Agent.Start(Dart.Snmp.RequestReceived,System.Net.IPEndPoint,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Starts receiving SNMP requests asynchronously, invoking the specified callback method on an IO completion thread as each <see cref="T:Dart.Snmp.RequestMessage"/> is received.
            </summary>
            <param name="callback">A <see cref="T:Dart.Snmp.RequestReceived"/> delegate specifying the method to execute when a <see cref="T:Dart.Snmp.RequestMessage"/> is received.</param>
            <param name="localEP"><see cref="T:System.Net.IPEndPoint">IPEndPoint</see> specifying the local network interface to bind to.</param>
            <param name="acceptBroadcast">Specifies whether the Agent should accept requests that are broadcast to the network. Must be false when using an IPv4-mapped IPv6 dual mode socket.</param>
            <param name="dualMode">Specifies whether the socket should be a dual mode IPv6 socket. Only supported on Vista and newer operating systems.</param>
            <param name="state">Object to pass to the callback method; can be null.</param>
            <remarks>
            <para>
            Use this method to receive SNMP requests from SNMP managers. It is possible for the RequestReceived delegate to be raised concurrently on multiple IO Completion threads,
            so its code should be thread-safe.
            </para>
            <para>
            If dual mode (simultaneous IPv4 and IPv6) socket operation is desired, use IPAddress.IPv6Any (for all IPv4 and IPv6 interfaces) or an IPv4-mapped IPv6 
            address for the localEP address, and true for the dualMode argument. An IPv4-mapped IPv6 address is the IPv4 address of a network interface preceded by 
            "::ffff:". Ex: ::ffff:192.168.1.1. If an IPv4-mapped IPv6 address is used then <i>acceptBroadcast</i> must be false. To accept broadcast packets in dual mode, 
            IPAddress.IPv6Any must be used.
            </para>
            <para>
            This method always creates a new <see cref="P:Dart.Snmp.SocketBase.Socket"/>. Use multiple <see cref="T:Dart.Snmp.Agent"/> instances to accept SNMP requests on multiple sockets.
            </para>
            <para>
            Unhandled exceptions thrown on the IO Completion thread are caught and reported by the <see cref="E:Dart.Snmp.ComponentBase.Error">Error</see> event.
            </para>
            <para>
            Scripting applications should use <see cref="M:Dart.Snmp.SnmpBase.Receive"/> instead.
            </para>
            </remarks>
        </member>
        <member name="F:Dart.Snmp.Agent.Variables">
            <summary>
            A <see cref="T:Dart.Snmp.Variable"/> list used by <see cref="M:Dart.Snmp.SnmpBase.CreateResponse(Dart.Snmp.RequestMessage)"/>.
            </summary>
            <value><see cref="T:Dart.Snmp.VariableList"/></value>
            <remarks>
            <para>
            When a <see cref="T:Dart.Snmp.SetMessage"/> arrives, values are updated when <see cref="M:Dart.Snmp.SnmpBase.CreateResponse(Dart.Snmp.RequestMessage)"/> is used.
            When a <see cref="T:Dart.Snmp.GetMessage"/>, <see cref="T:Dart.Snmp.GetNextMessage"/> or <see cref="T:Dart.Snmp.GetBulkMessage"/> arrives, <see cref="M:Dart.Snmp.SnmpBase.CreateResponse(Dart.Snmp.RequestMessage)"/> uses this list to initialize the <see cref="T:Dart.Snmp.ResponseMessage"/>. 
            If values contain OIDs that are in <see cref="F:Dart.Snmp.SnmpBase.Mib">Mib</see>, then 
            <see cref="F:Dart.Snmp.MibNode.Access"/> is checked for read-write access to this list, and the ResponseMessage is constructed accordingly.
            </para>
            </remarks>
            <example>
        Demonstrates adding a variable to the Agent's variables collection.
        <code lang="C#">
        //Add an object value instance to an agent's variables collection in one of four ways:

        //1. By a common object already defined in the NodeName enumeration.
        private void button1_Click(object sender, EventArgs e)
        {
            agent1.Variables.Add(agent1.Mib.CreateVariable(NodeName.sysContact, "Systems Admin"));
        }
        //2. By string name. Can refer to default objects, or objects from MIBs loaded at 
        //   runtime with Agent.Mib.Parse() and Agent.Mib.GenerateNodes().
        private void button2_Click(object sender, EventArgs e)
        {
            agent1.Variables.Add(new Variable(agent1.Mib["sysContact"], "Systems Admin"));
        }
        //3. By enumeration from generated and imported Mib code files.
        //   See the included Mib Treeview sample for a demonstration of generating a Mib code file from MIBs.
        private void button3_Click(object sender, EventArgs e)
        {
            //This would normally be called when loading your application; 
            //demonstrated here because it's required for the subsequent line.
            Mib.Import(agent1.Mib);

            agent1.Variables.Add(agent1.Mib.CreateVariable(Mib.NodeName.testString, "Test string value"));
        }
        //4. By IID.
        private void button4_Click(object sender, EventArgs e)
        {
            agent1.Variables.Add(new Variable("1.3.6.1.2.1.1.4.0", new Dart.Snmp.SimpleType.OctetString("Systems Admin")));
        }
        </code>
        <code lang="VB">
        'Add an object value instance to an agent's variables collection in one of four ways:

        '1. By a common object already defined in the NodeName enumeration.
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            agent1.Variables.Add(agent1.Mib.CreateVariable(NodeName.sysContact, "Systems Admin"))
        End Sub
        '2. By string name. Can refer to default objects, or objects from MIBs loaded at 
        '   runtime with Agent.Mib.Parse() and Agent.Mib.GenerateNodes().
        Private Sub button2_Click(ByVal sender As Object, ByVal e As EventArgs)
            agent1.Variables.Add(New Variable(agent1.Mib("sysContact"), "Systems Admin"))
        End Sub
        '3. By enumeration from generated and imported Mib code files.
        '   See the included Mib Treeview sample for a demonstration of generating a Mib code file from MIBs.
        Private Sub button3_Click(ByVal sender As Object, ByVal e As EventArgs)
            'This would normally be called when loading your application; 
            'demonstrated here because it's required for the subsequent line.
            Mib.Import(agent1.Mib)

            agent1.Variables.Add(agent1.Mib.CreateVariable(Mib.NodeName.testString, "Test string value"))
        End Sub
        '4. By IID.
        Private Sub button4_Click(ByVal sender As Object, ByVal e As EventArgs)
            agent1.Variables.Add(New Variable("1.3.6.1.2.1.1.4.0", New Dart.Snmp.SimpleType.OctetString("Systems Admin")))
        End Sub
        </code>
      </example>
        </member>
        <member name="P:Dart.Snmp.Agent.SysUpTime">
            <summary>
            Gets or sets the time since the agent was created, in hundredths of a second.
            </summary>
            <value>Hundredths of a second since the Agent was created.</value>
            <remarks>
            <para>
            Can be used to initialize <see cref="P:Dart.Snmp.Trap1Message.SysUpTime"/> and <see cref="P:Dart.Snmp.Trap2Message.SysUpTime"/>
            when they are created. Also used by <see cref="M:Dart.Snmp.ResponseMessage.#ctor(Dart.Snmp.RequestMessage,Dart.Snmp.SnmpBase)">ResponseMessage(RequestMessage, Agent)</see> 
            when creating a ResponseMessage if the requested <see cref="P:Dart.Snmp.MessageBase.Variables">Variables</see> contain a sysUpTime IID.
            </para>
            <para>
            Applications can change this property to specify an alternative value. For example, it may be reset to 0 if the Agent is reinitialized.
            </para>
            </remarks>
        </member>
        <member name="T:Dart.Snmp.RequestReceived">
            <summary>
            References the method to invoke on an IO completion thread as each <see cref="T:Dart.Snmp.RequestMessage"/> is received.
            </summary>
            <param name="agent">A reference to the <see cref="T:Dart.Snmp.Agent"/> component.</param>
            <param name="request">The decoded request received.</param>
            <param name="state">The state argument from <see cref="M:Dart.Snmp.Agent.Start(Dart.Snmp.RequestReceived,System.Object)"/>.</param>
            <example>
        The following example demonstrates starting a simple agent with one variable.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Add a variable to the agent
            agent1.Variables.Add(agent1.Mib.GetByNodeName(NodeName.sysContact).GetIid(),
                agent1.Mib.CreateVariable(NodeName.sysContact, "Systems Admin"));

            //Start listening for requests
            agent1.Start(agent1_MessageReceived, null);
        }

        private void agent1_MessageReceived(Agent agent, RequestMessage request, object state)
        {
            //Create and send a response whenever a request is received
            agent1.Send(agent1.CreateResponse(request), request.Origin);
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Add a variable to the agent
            agent1.Variables.Add(agent1.Mib.GetByNodeName(NodeName.sysContact).GetIid(), agent1.Mib.CreateVariable(NodeName.sysContact, "Systems Admin"))

            'Start listening for requests
            agent1.Start(AddressOf agent1_MessageReceived, Nothing)
        End Sub

        Private Sub agent1_MessageReceived(ByVal agent As Agent, ByVal request As RequestMessage, ByVal state As Object)
            'Create and send a response whenever a request is received
            agent1.Send(agent1.CreateResponse(request), request.Origin)
        End Sub
        </code>
      </example>
        </member>
        <member name="T:Dart.Snmp.ComponentDesigner">
            <summary>
            Classes added 11.19.10 to replace classes in Design.dll because Design.dll is not supported by Client Profile
            </summary>
        </member>
        <member name="T:Dart.Snmp.Designer">
            <summary>
            Summary description for Designer.
            </summary>
            
        </member>
        <member name="T:Dart.Snmp.NodeName">
            <summary>
            Defines the names of all the intrinsic MibNode names that can be used to lookup MibNode instances in the MibNodes dictionary.
            </summary>
            <remarks>
            Use MibNodes[NodeName.iso.ToString()], for example, to reference an instance of the MibNode class that describes the "iso" MIB identifier.
            </remarks>
        </member>
        <member name="T:Dart.Snmp.TrapName">
            <summary>
            Defines the names of all the intrinsic trap names that can be used to lookup MibTrap instances in the MibNodes.MibTraps dictionary.
            </summary>
            <remarks>
            Use MibTraps[TrapName.coldStart.ToString()], for example, to reference an instance of the MibTrap class that describes the "coldStart" MIB identifier.
            </remarks>
        </member>
        <member name="T:Dart.Snmp.Module">
            <summary>
            Contains all names either imported or defined within a module.
            </summary>
            <remarks>
            <para>
            Represents a value in the <see cref="F:Dart.Snmp.MibNodes.Modules"/> hash table.
            </para>
            </remarks>
        </member>
        <member name="F:Dart.Snmp.Module.NodeNameDefinitions">
            <summary>
            Names defined within the module.
            </summary>
            <remarks>
            <para>
            Use the name as a key to its definition (e.g., "system 6").
            </para>
            </remarks>
        </member>
        <member name="F:Dart.Snmp.Module.ImportedModuleNames">
            <summary>
            Names imported into the module.
            </summary>
            <remarks>
            <para>
            Use the module name as a key to the string name value.
            </para>
            </remarks>
        </member>
        <member name="T:Dart.Snmp.MibDefinition">
            <summary>
            Base class containing members that are common to <see cref="T:Dart.Snmp.MibNode"/> and <see cref="T:Dart.Snmp.MibTrap"/>.
            </summary>
        </member>
        <member name="M:Dart.Snmp.MibDefinition.#ctor(System.String,System.String,System.String)">
            <summary>
            Base constructor for <see cref="T:Dart.Snmp.MibNode"/> and <see cref="T:Dart.Snmp.MibTrap"/>.
            </summary>
            <param name="description">Description of the MIB definition.</param>
            <param name="name">Name of the MIB definition.</param>
            <param name="module">Module name where the definition occurs.</param>
        </member>
        <member name="F:Dart.Snmp.MibDefinition.Description">
            <summary>
             Gets the description.
             </summary>
            	<remarks>
            	<para>
             The value is extracted from the MIB file used to define the MIB node or trap.
             </para>
             </remarks>
            	<value>String</value>
        </member>
        <member name="F:Dart.Snmp.MibDefinition.Module">
            <summary>
            Gets the module identifier.
            </summary>
            <remarks>
            <para>
            The value is extracted from the MIB file used to define the MIB node or trap.
            </para>
            </remarks>
            <value>String</value>
        </member>
        <member name="F:Dart.Snmp.MibDefinition.Name">
            <summary>
            Gets the human readable name.
            </summary>
            <remarks>
            <para>
            This property is used as the key for looking up a specific MibNode in the <see cref="T:Dart.Snmp.MibNodes"/> dictionary
            or looking up a specific MibTrap in the <see cref="F:Dart.Snmp.MibNodes.Traps"/> dictionary.
            </para>
            </remarks>
            <value>String</value>
        </member>
        <member name="T:Dart.Snmp.MibTrap">
            <summary>
            This class is used to represent SNMPv1 traps defined in MIB files.
            </summary>
            <remarks>
            <para>
            Object defined in MIB-II are automatically created and added to the <see cref="F:Dart.Snmp.MibNodes.Traps"/> dictionary. 
            Developers can add additional MibTrap instances by importing them directly from MIB files or by manually adding instances of this class to the MibNodes.MibTraps class.
            </para>
            <para>
            SNMPv2 trap definitions are represented by <see cref="T:Dart.Snmp.MibNode"/>; SNMPv2 generalized the trap definition.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.MibTrap.#ctor(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructs a MibTrap initialized to the specified values.
            </summary>
            <param name="genericTrap">Generic trap value. Use 6 if a specificTrap value is provided.</param>
            <param name="specificTrap">If genericTrap is 6, provide an enterprise-specific trap value here.</param>
            <param name="name">The human-readable trap name.</param>
            <param name="enterprise">Use 'snmp' for generic traps, and other values specified in the MIB for specific traps.</param>
            <param name="variables">A list of comma delimited variable names present in the trap.</param>
            <param name="description">A description found in the MIB.</param>
            <param name="module">The module name that identifies where the trap is described.</param>
        </member>
        <member name="F:Dart.Snmp.MibTrap.GenericTrap">
            <summary>
            Gets the generic trap value. Use 6 if a SpecificTrap value is provided.
            </summary>
            <remarks><para>This property has a value of 6 if the <see cref="F:Dart.Snmp.MibTrap.SpecificTrap"/> value is set.</para></remarks>
        </member>
        <member name="F:Dart.Snmp.MibTrap.SpecificTrap">
            <summary>
            Gets the enterprise-specific trap value.
            </summary>
            <remarks><para><see cref="F:Dart.Snmp.MibTrap.GenericTrap"/> should be 6 if this value is greater than 0.</para></remarks>
        </member>
        <member name="F:Dart.Snmp.MibTrap.Enterprise">
            <summary>
            Gets the Enterprise name or Oid.
            </summary>
            <remarks><para>The value is 'snmp' for generic traps.</para></remarks>
        </member>
        <member name="F:Dart.Snmp.MibTrap.Variables">
            <summary>
            Gets a list of variable names present in the trap.
            </summary>
        </member>
        <member name="T:Dart.Snmp.MibNode">
            <summary>
            This class is used to represent nodes and objects defined in MIB files.
            </summary>
            <remarks>
            <para>
            Object defined in MIB-II are automatically created and added to the <see cref="T:Dart.Snmp.MibNodes"/> dictionary. 
            Developers can add additional MibNode instances by importing them directly from MIB files or by manually adding instances of this class to the MibNodes class.
            </para>
            </remarks>
            <example>
        The following example demonstrates sending an SNMPv1 Get request to an agent and receiving the response.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Create and send request on a worker thread
            manager1.Start(manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact));
        }

        private void button2_Click(object sender, EventArgs e)
        {
            //If you don't have the MIB, retrieve the value by IID:
            manager1.Start(manager1_SendGetRequest, new Variable("1.3.6.1.2.1.1.4.0"));
        }

        private void manager1_SendGetRequest(SnmpSocket managerSocket, object state)
        {
            //Create Get Request
            GetMessage request = new GetMessage();
            request.Variables.Add(state as Variable);

            //Send request and get response
            ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

            //Marshal response to the UI thread using the Message event
            manager1.Marshal(new ResponseMessage[] { response }, "", null);
        }

        private void manager1_Message(object sender, MessageEventArgs e)
        {
            //Display info about the first variable in the response, and its value
            Variable vari = e.Messages[0].Variables[0];
            label1.Text += vari.Definition.ToString() + vari.Value.ToString() + "\r\n";
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create and send request on a worker thread
            manager1.Start(AddressOf manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact))
        End Sub

        Private Sub button2_Click(ByVal sender As Object, ByVal e As EventArgs)
            'If you don't have the MIB, retrieve the value by IID:
            manager1.Start(AddressOf manager1_SendGetRequest, New Variable("1.3.6.1.2.1.1.4.0"))
        End Sub

        Private Sub manager1_SendGetRequest(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Create Get Request
            Dim request As New GetMessage()
            request.Variables.Add(TryCast(state, Variable))

            'Send request and get response
            Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

            'Marshal response to the UI thread using the Message event
            manager1.Marshal(New ResponseMessage() { response }, "", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
            'Display info about the first variable in the response, and its value
            Dim vari As Variable = e.Messages(0).Variables(0)
            label1.Text &amp;= vari.Definition.ToString() &amp; vari.Value.ToString() &amp; vbCrLf
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.MibNode.#ctor(Dart.Snmp.Usage,System.String,System.String,Dart.Snmp.Access,Dart.Snmp.Status,System.String,System.String,System.Type,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the MibNode class.</summary>
            <param name="usage">A MibNodeUsage value that indicates the usage of the MibNode.</param>
            <param name="oid">String value of the OID of the MibNode.</param>
            <param name="syntax">String value that describes the syntax of the MibNode.</param>
            <param name="access">Access enum that defines the availability of the MibNode.</param>
            <param name="status">Status enum that describes the current status of the MibNode.</param>
            <param name="description">A string value assigned to the Description of the MibNode.</param>
            <param name="name">A string value assigned to the Name of the MibNode.</param>
            <param name="valueType">System.Type value that describes the .NET type of the value associated with the MibNode.</param>
            <param name="units">String value indicating the units.</param>
            <param name="defVal">String value indicating the default value.</param>
            <param name="index">String value indicating the index used if Usage is Dart.Snmp.Usage.TableEntry.</param>
            <param name="augments">String value indicating the augments field imported from the MIB.</param>
            <param name="objects">String value indicating the objects if Usage is Dart.Snmp.Usage.Notification or Dart.Snmp.Usage.Group.</param>
            <param name="notifications">String value indicating the notifications if Usage is Dart.Snmp.Usage.Group.</param>
            <param name="module">String value indicating the source module (MIB file).</param>
            <param name="composedsyntax">String value that indicates the raw syntax from a mib definition.</param>
            <param name="displayHint">String value indicating how the value should be displayed.</param>
        </member>
        <member name="M:Dart.Snmp.MibNode.#ctor(Dart.Snmp.Usage,System.String,System.String,Dart.Snmp.Access,Dart.Snmp.Status,System.String,System.String,System.Type,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the MibNode class.</summary>
            <param name="usage">A MibNodeUsage value that indicates the usage of the MibNode.</param>
            <param name="oid">String value of the OID of the MibNode.</param>
            <param name="syntax">String value that describes the syntax of the MibNode.</param>
            <param name="access">Access enum that defines the availability of the MibNode.</param>
            <param name="status">Status enum that describes the current status of the MibNode.</param>
            <param name="description">A string value assigned to the Description of the MibNode.</param>
            <param name="name">A string value assigned to the Name of the MibNode.</param>
            <param name="valueType">System.Type value that describes the .NET type of the value associated with the MibNode.</param>
            <param name="units">String value indicating the units.</param>
            <param name="defVal">String value indicating the default value.</param>
            <param name="index">String value indicating the index used if Usage is Dart.Snmp.Usage.TableEntry.</param>
            <param name="augments">String value indicating the augments field imported from the MIB.</param>
            <param name="objects">String value indicating the objects if Usage is Dart.Snmp.Usage.Notification or Dart.Snmp.Usage.Group.</param>
            <param name="notifications">String value indicating the notifications if Usage is Dart.Snmp.Usage.Group.</param>
            <param name="module">String value indicating the source module (MIB file).</param>
            <param name="composedsyntax">String value that indicates the raw syntax from a mib definition.</param>
        </member>
        <member name="M:Dart.Snmp.MibNode.GetOid(System.String)">
            <summary>
            Strips off the trailing instance suffix and returns the root OID.
            </summary>
            <param name="iid">Any instance id.</param>
        </member>
        <member name="M:Dart.Snmp.MibNode.GetFullName(Dart.Snmp.MibNodes)">
            <summary>
            Generates a human-readable OID of this node from each subidentifier's name.
            </summary>
            <remarks>
            The human-readable OID is generated by stepping through the provided MibNodes collection and appending the name 
            of each parent node. If a parent node is missing from the MibNodes collection then the node's integer subidentifier will remain.
            </remarks>
            <param name="Mib">A MibNodes collection containing the parent nodes required to generate the human-readable OID for this node</param>
        </member>
        <member name="F:Dart.Snmp.MibNode.Access">
            <summary>
            Gets the Access value of the MibNode.
            </summary>
            <remarks>
            <para>
            Access describes the operations that can be performed by a Variable. 
            The Agent uses this information when creating a ResponseMessage for Get, GetNext, GetBulk and Set Requests 
            to determine whether the request is a valid operation on the variable.
            </para>
            </remarks>
            <value>Returns an Access value assigned to the MibNode.</value>
        </member>
        <member name="F:Dart.Snmp.MibNode.Augments">
            <summary>
             Gets the AUGMENTS clause of the MibNode.
             </summary> 
            	<value>String</value>
        </member>
        <member name="F:Dart.Snmp.MibNode.Usage">
            <summary>Gets the type of the MibNode.</summary>
            	<value>
            	Returns a Usage value that indicates how the MibNode can be used.
            	</value>
        </member>
        <member name="F:Dart.Snmp.MibNode.DefVal">
            <summary>
             Gets the DEFVAL clause of the MibNode.
             </summary>
            	<value>String</value>
        </member>
        <member name="F:Dart.Snmp.MibNode.DisplayHint">
            <summary>
            Gets or sets the DISPLAY-HINT clause of the MibNode.
            </summary>
        </member>
        <member name="M:Dart.Snmp.MibNode.GetIid">
            <summary>
            Gets the scalar instance ID of the MibNode.
            </summary>
            <remarks>
            <see cref="F:Dart.Snmp.MibNode.Oid"/> + ".0" is returned.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if Usage != Usage.Object (MibNode is not a scalar object with only one value).</exception>
        </member>
        <member name="M:Dart.Snmp.MibNode.GetIid(System.String)">
            <summary>
            Gets the instance ID of the MibNode.
            </summary>
            <param name="indexer">The indexer used to identify the row of the table column.</param>
            <remarks>
            If <see cref="F:Dart.Snmp.MibNode.Usage"/> == <see cref="F:Dart.Snmp.Usage.Object"/> then <see cref="F:Dart.Snmp.MibNode.Oid"/> + ".0" is returned (indexer can be null). 
            If <see cref="F:Dart.Snmp.MibNode.Usage"/> == <see cref="F:Dart.Snmp.Usage.TableColumn"/> then <see cref="F:Dart.Snmp.MibNode.Oid"/> + indexer is returned.
            Otherwise, an empty string is returned, indicating that an Iid is not defined for this MibNode.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if indexer is null or empty or Usage != Usage.TableColumn.</exception>
        </member>
        <member name="F:Dart.Snmp.MibNode.Index">
            <summary>
             Gets the INDEX clause of the MibNode.
             </summary>
            	<remarks>
            	<para>
             Usually provided when <see cref="F:Dart.Snmp.MibNode.Usage"/> is Dart.Snmp.Usage.TableEntry, 
             this property defines how the associated table column is indexed into.
             </para>
            	</remarks>
            	<value>String</value>
        </member>
        <member name="F:Dart.Snmp.MibNode.Notifications">
            <summary>
            Gets the NOTIFICATIONS clause defined in the MIB.
            </summary>
            <remarks>
            <para>
            Used when <see cref="F:Dart.Snmp.MibNode.Usage"/> is Dart.Snmp.Usage.Group.
            </para>
            </remarks>
            <value>String</value>
        </member>
        <member name="F:Dart.Snmp.MibNode.Objects">
            <summary>
            Gets the OBJECTS clause defined in the MIB.
            </summary>
            <remarks>
            <para>
            Used when <see cref="F:Dart.Snmp.MibNode.Usage"/> is Dart.Snmp.Usage.Notification or Dart.Snmp.Usage.Group.
            </para>
            </remarks>
            <value>String</value>
        </member>
        <member name="F:Dart.Snmp.MibNode.Oid">
            <summary>
            Gets the identifier of the MibNode.
            </summary>
            <value>Returns a string in the form of n.n.n...n that represents the OID value assigned.</value>
        </member>
        <member name="F:Dart.Snmp.MibNode.Status">
            <summary>
            Gets the Status value of the MibNode.
            </summary>
            <remarks>
            <para>
            Status describes the suggested implementation requirement of the MibNode.
            </para>
            </remarks>
            <value>Returns a Status value assigned to the MibNode.</value>
        </member>
        <member name="F:Dart.Snmp.MibNode.Syntax">
            <summary>
            Gets the Syntax of the MibNode.
            </summary>
            <remarks>
            <para>
            Syntax describes the data type for a Variable object. 
            Syntax may also describe additional constraints of the data such as a length or maximum value. 
            </para>
            </remarks>
            <value>Returns a string containing the Syntax of the MibNode (expanded to include all textual conventions).</value>
        </member>
        <member name="F:Dart.Snmp.MibNode.Units">
            <summary>
            Gets the UNITS clause of the MibNode.
            </summary>
            <value>String</value>
        </member>
        <member name="F:Dart.Snmp.MibNode.ValueType">
            <summary>
            Gets the .NET class Type (derived from SimpleTaggedType) used by this MibNode.
            </summary>
            <value>One of the types in the Dart.Snmp.SimpleType namespace will be returned.</value>
        </member>
        <member name="F:Dart.Snmp.MibNode.ComposedSyntax">
            <summary>
            Gets the Syntax of the MibNode as defined in the MIB.
            </summary>
            <remarks>
            <para>
            Syntax describes the data type for a Variable object. 
            Syntax may also describe additional constraints of the data such as a length or maximum value. 
            </para>
            </remarks>
            <value>Returns a string containing the Syntax of the MibNode as defined in the MIB.</value>
        </member>
        <member name="M:Dart.Snmp.MibNode.ToString">
            <summary>
            Creates a string representation of the MibNode that can be used as a label.
            </summary>
            <returns>String</returns>
        </member>
        <member name="P:Dart.Snmp.MibNode.Iid">
            <summary>
            Gets the instance ID of the MibNode (the Oid with a ".0" suffix).
            </summary>
        </member>
        <member name="T:Dart.Snmp.MibNodes">
            <summary>
            The MibNodes class localizes all MIB file management to a single class.
            </summary>
            <remarks>
            <para>
            Use MibNodes[NodeName.xxx.ToString()] or MibNodes.GetByNodeName(NodeName.xxx) to lookup specific names.
            </para>
            <para>
            <see cref="F:Dart.Snmp.MibNodes.Traps"/> contains SNMPv1 trap definitions.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.MibNodes.#ctor">
            <summary>
            The default constructor.
            </summary>
            <remarks>
            <para>This collection provides an integer indexer and a string indexer. The string indexer can be used to retrieve a MibNode instance by name or OID.</para>
            <para>Ex: Use MibNodes[NodeName.sysUpTime.ToString()], MibNodes["1.3.6.1.2.1.1.3"] or MibNodes.GetByNodeName(NodeName.sysUpTime) to get the MibNode object corresponding to sysUpTime.</para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.MibNodes.TryGetValue(System.String,Dart.Snmp.MibNode@)">
            <summary>
            Attempts to retrieve a MibNode that matches the provided name or OID key. Locks on <see cref="P:Dart.Snmp.MibNodes.SyncRoot"/> to provide automatic thread safety.
            </summary>
            <param name="key">MibNode name or OID.</param>
            <param name="value">If the key is found, populated with the MibNode associated with the specified key when the method returns; otherwise, null.</param>
            <returns>Returns true if a MibNode matching the key is found, false otherwise.</returns>
        </member>
        <member name="F:Dart.Snmp.MibNodes.Traps">
            <summary>
            Gets a hash table of SNMPv1 MibTrap objects that have been parsed.
            </summary>
            <remarks>
            <para>
            Use the trap name as the key to lookup the MibTrap object. The dictionary is cleared when <see cref="M:Dart.Snmp.MibNodes.Reset"/> is used.
            </para>
            <para>
            SNMPv2 traps are contained in <see cref="T:Dart.Snmp.MibNodes"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Dart.Snmp.MibNodes.Modules">
            <summary>
            Gets a hash table of modules that have been parsed.
            </summary>
            <remarks>
            <para>
            Use the module name as the key to lookup the Module object. The dictionary is cleared when <see cref="M:Dart.Snmp.MibNodes.Reset"/> is used.
            </para>
            </remarks>
        </member>
        <member name="F:Dart.Snmp.MibNodes.MibNodesByOid">
            <summary>
            A Dictionary of MibNode objects indexed by OID. Obsolete.
            </summary>
            <remarks>
            <para>
            Contains a collection of MibNode objects representing all intrinsic MIB nodes, 
            nodes generated and compiled into the application, and nodes loaded at runtime. 
            The collection is indexed by <see cref="F:Dart.Snmp.MibNode.Oid"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.MibNodes.Add(Dart.Snmp.MibNode)">
            <summary>
            Adds a MibNode object to the MibNodes collection. 
            Locks on <see cref="P:Dart.Snmp.MibNodes.SyncRoot"/> to provide automatic thread safety.
            </summary>
            <param name="value">MibNode object to add.</param>
        </member>
        <member name="M:Dart.Snmp.MibNodes.AddRange(System.Collections.Generic.IEnumerable{Dart.Snmp.MibNode})">
            <summary>
            Adds a collection of MibNode objects to the MibNodes collection. 
            Locks on <see cref="P:Dart.Snmp.MibNodes.SyncRoot"/> to provide automatic thread safety.
            </summary>
            <param name="collection">IEnumerable collection of MibNode objects to add.</param>
        </member>
        <member name="M:Dart.Snmp.MibNodes.ContainsKey(System.String)">
            <summary>
            Searches the collection to see if a MibNode with the corresponding name or Oid is present in the collection.
            Locks on <see cref="P:Dart.Snmp.MibNodes.SyncRoot"/> to provide automatic thread safety.
            </summary>
            <param name="key">Name or OID of the desired MibNode.</param>
            <returns>True if a MibNode with the specified name or Oid is found in the collection.</returns>
        </member>
        <member name="M:Dart.Snmp.MibNodes.Sort">
            <summary>
            Sorts the MibNodes collection lexicographically by OID.
            Locks on <see cref="P:Dart.Snmp.MibNodes.SyncRoot"/> to provide automatic thread safety.
            </summary>
        </member>
        <member name="M:Dart.Snmp.MibNodes.RemoveAll(System.Predicate{Dart.Snmp.MibNode})">
            <summary>
            Removes MibNode objects from the MibNodes collection that match the supplied Predicate. 
            Locks on <see cref="P:Dart.Snmp.MibNodes.SyncRoot"/> to provide automatic thread safety.
            </summary>
            <param name="match">A Predicate&lt;MibNode&gt; delegate that defines the conditions of the MibNode objects to remove.</param>
        </member>
        <member name="M:Dart.Snmp.MibNodes.Remove(Dart.Snmp.MibNode)">
            <summary>
            Removes the specified MibNode object from the MibNodes collection. 
            Locks on <see cref="P:Dart.Snmp.MibNodes.SyncRoot"/> to provide automatic thread safety.
            </summary>
            <param name="value">The MibNode to remove.</param>
        </member>
        <member name="M:Dart.Snmp.MibNodes.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of MibNode objects from the MibNodes collection, starting from the specified index up to the count. 
            Locks on <see cref="P:Dart.Snmp.MibNodes.SyncRoot"/> to provide automatic thread safety.
            </summary>
            <param name="index">The zero-based starting index of the range of MibNode objects to remove.</param>
            <param name="count">The number of MibNode objects to remove.</param>
        </member>
        <member name="M:Dart.Snmp.MibNodes.Remove(System.String)">
            <summary>
            Removes the specified MibNode object from the MibNodes collection. 
            Locks on <see cref="P:Dart.Snmp.MibNodes.SyncRoot"/> to provide automatic thread safety.
            </summary>
            <param name="key">A MibNode name or OID that correlates to the MibNode to remove.</param>
        </member>
        <member name="M:Dart.Snmp.MibNodes.RemoveAt(System.Int32)">
            <summary>
            Removes a MibNode object at the specified index in the MibNodes collection. 
            Locks on <see cref="P:Dart.Snmp.MibNodes.SyncRoot"/> to provide automatic thread safety.
            </summary>
            <param name="index">Index of the MibNode to remove.</param>
        </member>
        <member name="M:Dart.Snmp.MibNodes.Insert(System.Int32,Dart.Snmp.MibNode)">
            <summary>
            Inserts a MibNode object at the specified index in the MibNodes collection. 
            Locks on <see cref="P:Dart.Snmp.MibNodes.SyncRoot"/> to provide automatic thread safety.
            </summary>
            <param name="index">Index to insert the MibNode at.</param>
            <param name="item">The Mibnode to insert.</param>
        </member>
        <member name="M:Dart.Snmp.MibNodes.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Dart.Snmp.MibNode})">
            <summary>
            Inserts a collection of MibNode objects at the specified index in the MibNodes collection. 
            Locks on <see cref="P:Dart.Snmp.MibNodes.SyncRoot"/> to provide automatic thread safety.
            </summary>
            <param name="index">Index to start the insert operation at.</param>
            <param name="collection">IEnumerable collection of MibNode objects to insert.</param>
        </member>
        <member name="M:Dart.Snmp.MibNodes.Clear">
            <summary>
            Clears the MibNodes collection. Locks on <see cref="P:Dart.Snmp.MibNodes.SyncRoot"/> to provide automatic thread safety.
            </summary>
        </member>
        <member name="M:Dart.Snmp.MibNodes.GetOid(System.String)">
            <summary>
            Returns the OID associated with the specified IID.
            </summary>
            <param name="iid">The IID from which to get the OID.</param>
            <returns>An OID string</returns>
        </member>
        <member name="M:Dart.Snmp.MibNodes.GetTableColumns(System.String)">
            <summary>
            Returns the columnar MibNode objects that are under the table that corresponds to the provided name or OID.
            </summary>
            <param name="tableNameOrOid">The name or OID of the table parent of the columnar MibNode objects to return.</param>
            <returns>An array of columnar MibNode objects.</returns>
            <remarks>
            This method assumes that the MibNodes collection is ordered by OID. If it has been modified by <see cref="M:Dart.Snmp.MibNodes.Add(Dart.Snmp.MibNode)">adding</see> or 
            <see cref="M:Dart.Snmp.MibNodes.Insert(System.Int32,Dart.Snmp.MibNode)">inserting</see> MibNode objects then <see cref="M:Dart.Snmp.MibNodes.Sort"/> should be called prior to calling this method. 
            This is not required after calling <see cref="M:Dart.Snmp.MibNodes.Import(System.Collections.Generic.List{Dart.Snmp.MibDefinition})"/>; it sorts this collection during the import process.
            </remarks>
            <exception cref="T:System.ArgumentException">
            The collection does not contain a table entry or column MibNode under the specified table, or the collection is unsorted and MibNodes.Sort() should be called.
            </exception>
            <example>
        The following example demonstrates adding a whole table to Agent.Variables from a 2d array.
        <code lang="C#">
        /// &lt;summary&gt;
        /// Adds/sets table values from the specified 2d string array to/in the Agent's variables collection.
        /// &lt;/summary&gt;
        /// &lt;param name="myAgent"&gt;Agent instance to add/set the table data to/in.&lt;/param&gt;
        /// &lt;param name="tableNameOrOid"&gt;Name or OID of the table.&lt;/param&gt;
        /// &lt;param name="tableData"&gt;A 2d array [rows, columns] containing the table data to set on the agent.&lt;/param&gt;
        /// &lt;remarks&gt;
        /// This method takes a string tableNameOrOid argument, therefore it is compatible with dynamically loaded MIBs.
        /// This method requires the MIB or Mib Code File defining the table to be loaded/imported in myManager.Mib.
        /// To sparsely populate the table, or to not update a table cell, specify null/Nothing for the tableData element.
        /// &lt;/remarks&gt;
        private void setLocalTable(Agent myAgent, string tableNameOrOid, string[,] tableData)
        {
            //Can also take a MibNode argument
            MibNode[] tableNodes = myAgent.Mib.GetTableColumns(tableNameOrOid);
            int rows = tableData.GetLength(0);
            int columns = tableData.GetLength(1);

            if (columns != tableNodes.Length)
                throw new ArgumentException("The number of columns contained in the table data does not match the table's definition", "tableData");

            for (int rowIndex = 0; rowIndex &lt;= rows - 1; rowIndex++)
            {
                for (int columnIndex = 0; columnIndex &lt;= columns - 1; columnIndex++)
                {
                    if (tableData[rowIndex, columnIndex] != null)
                    {
                        Variable tableCellVariable = new Variable(tableNodes[columnIndex], tableData[rowIndex, columnIndex], rowIndex.ToString());
                        //The below allows updating Variables in and adding Variables to the collection. 
                        //If initializing, Agent.Variables.Add() may be used instead.
                        myAgent.Variables[tableCellVariable.Id] = tableCellVariable;
                    }
                }
            }
        }

        /// &lt;summary&gt;
        /// Overload that takes a NodeName parameter.
        /// &lt;/summary&gt;
        /// &lt;param name="myAgent"&gt;Agent instance to add/set the table data to/in.&lt;/param&gt;
        /// &lt;param name="tableNodeName"&gt;NodeName of the table. From either Dart.Snmp.NodeName or Mib.NodeName.&lt;/param&gt;
        /// &lt;param name="tableData"&gt;A 2d array [rows, columns] containing the table data to set on the agent.&lt;/param&gt;
        /// &lt;remarks&gt;
        /// This overload takes an Enum tableNodeName argument, therefore it can only be used with built-in NodeNames, or 
        /// NodeNames from an imported Mib Code File.
        /// &lt;/remarks&gt;
        private void setLocalTable(Agent myAgent, Enum tableNodeName, string[,] tableData)
        {
            setLocalTable(myAgent, tableNodeName.ToString(), tableData);
        }
        </code>
        <code lang="VB">
        ''' &lt;summary&gt;
        ''' Adds/sets table values from the specified 2d string array to/in the Agent's variables collection.
        ''' &lt;/summary&gt;
        ''' &lt;param name="myAgent"&gt;Agent instance to add/set the table data to/in.&lt;/param&gt;
        ''' &lt;param name="tableNameOrOid"&gt;Name or OID of the table.&lt;/param&gt;
        ''' &lt;param name="tableData"&gt;A 2d array [rows, columns] containing the table data to set on the agent.&lt;/param&gt;
        ''' &lt;remarks&gt;
        ''' This method takes a string tableNameOrOid argument, therefore it is compatible with dynamically loaded MIBs.
        ''' This method requires the MIB or Mib Code File defining the table to be loaded/imported in myManager.Mib.
        ''' To sparsely populate the table, or to not update a table cell, specify null/Nothing for the tableData element.
        ''' &lt;/remarks&gt;
        Private Sub setLocalTable(ByVal myAgent As Agent, ByVal tableNameOrOid As String, ByVal tableData(,) As String)
            'Can also take a MibNode argument
            Dim tableNodes() As MibNode = myAgent.Mib.GetTableColumns(tableNameOrOid)
            Dim rows As Integer = tableData.GetLength(0)
            Dim columns As Integer = tableData.GetLength(1)

            If columns &lt;&gt; tableNodes.Length Then
                Throw New ArgumentException("The number of columns contained in the table data does not match the table's definition", "tableData")
            End If

            For rowIndex As Integer = 0 To rows - 1
                For columnIndex As Integer = 0 To columns - 1
                    If tableData(rowIndex, columnIndex) IsNot Nothing Then
                        Dim tableCellVariable As New Variable(tableNodes(columnIndex), tableData(rowIndex, columnIndex), rowIndex.ToString())
                        'The below allows updating Variables in and adding Variables to the collection. 
                        'If initializing, Agent.Variables.Add() may be used instead.
                        myAgent.Variables(tableCellVariable.Id) = tableCellVariable
                    End If
                Next columnIndex
            Next rowIndex
        End Sub

        ''' &lt;summary&gt;
        ''' Overload that takes a NodeName parameter.
        ''' &lt;/summary&gt;
        ''' &lt;param name="myAgent"&gt;Agent instance to add/set the table data to/in.&lt;/param&gt;
        ''' &lt;param name="tableNodeName"&gt;NodeName of the table. From either Dart.Snmp.NodeName or Mib.NodeName.&lt;/param&gt;
        ''' &lt;param name="tableData"&gt;A 2d array [rows, columns] containing the table data to set on the agent.&lt;/param&gt;
        ''' &lt;remarks&gt;
        ''' This overload takes an Enum tableNodeName argument, therefore it can only be used with built-in NodeNames, or 
        ''' NodeNames from an imported Mib Code File.
        ''' &lt;/remarks&gt;
        Private Sub setLocalTable(ByVal myAgent As Agent, ByVal tableNodeName As [Enum], ByVal tableData(,) As String)
            setLocalTable(myAgent, tableNodeName.ToString(), tableData)
        End Sub
        </code>
      </example>
            <example>
        The following example demonstrates setting a whole table on a remote Agent from a Manager from values in a 2d array.
        <code lang="C#">
        /// &lt;summary&gt;
        /// Sets table values on a remote agent from the values contained in a 2d string array.
        /// &lt;/summary&gt;
        /// &lt;param name="myManager"&gt;Local Manager instance&lt;/param&gt;
        /// &lt;param name="agentEP"&gt;Agent address&lt;/param&gt;
        /// &lt;param name="tableNameOrOid"&gt;Name or OID of the table.&lt;/param&gt;
        /// &lt;param name="tableData"&gt;A 2d array [rows, columns] containing the table data to set on the agent.&lt;/param&gt;
        /// &lt;remarks&gt;
        /// This method takes a string tableNameOrOid argument, therefore it is compatible with dynamically loaded MIBs.
        /// This method requires the MIB or Mib Code File defining the table to be loaded/imported in myManager.Mib.
        /// To sparsely populate the table, or to not update a table cell, specify null/Nothing for the tableData element.
        /// &lt;/remarks&gt;
        private void setRemoteTable(Manager myManager, IPEndPoint agentEP, string tableNameOrOid, string[,] tableData)
        {
            //Can also take a MibNode argument
            MibNode[] tableNodes = myManager.Mib.GetTableColumns(tableNameOrOid);
            int rows = tableData.GetLength(0);
            int columns = tableData.GetLength(1);

            if (columns != tableNodes.Length)
                throw new ArgumentException("The number of columns contained in the table data does not match the table's definition", "tableData");

            SnmpSocket managerSocket = new SnmpSocket(myManager);

            try
            {
                //Set the variables on the agent row by row (instead of trying to set the entire table at once) so that it's unlikely that the set 
                //messages are too large (otherwise the response's ResponseMessage.ErrorStatus is ErrorStatus.TooBig).
                //-If this is the case (can be caused by many columns, or cells that contain a lot of data), break up the Variables across more SetMessages.
                for (int rowIndex = 0; rowIndex &lt;= rows - 1; rowIndex++)
                {
                    SetMessage rowSetMessage = new SetMessage();
                    for (int columnIndex = 0; columnIndex &lt;= columns - 1; columnIndex++)
                        if(tableData[rowIndex, columnIndex] != null)
                            rowSetMessage.Variables.Add(new Variable(tableNodes[columnIndex], tableData[rowIndex, columnIndex], rowIndex.ToString()));
                    ResponseMessage response = managerSocket.GetResponse(rowSetMessage, agentEP, 3);
                    //Handle response as desired here...
                }
            }
            finally
            {
                managerSocket.Close();
            }
        }

        /// &lt;summary&gt;
        /// Overload that takes a NodeName parameter.
        /// &lt;/summary&gt;
        /// &lt;param name="myManager"&gt;Local Manager instance&lt;/param&gt;
        /// &lt;param name="agentEP"&gt;Agent address&lt;/param&gt;
        /// &lt;param name="tableNodeName"&gt;NodeName of the table. From either Dart.Snmp.NodeName or Mib.NodeName.&lt;/param&gt;
        /// &lt;param name="tableData"&gt;A 2d array [rows, columns] containing the table data to set on the agent.&lt;/param&gt;
        /// &lt;remarks&gt;
        /// This overload takes an Enum tableNodeName argument, therefore it can only be used with built-in NodeNames, or 
        /// NodeNames from an imported Mib Code File.
        /// &lt;/remarks&gt;
        private void setRemoteTable(Manager myManager, IPEndPoint agentEP, Enum tableNodeName, string[,] tableData)
        {
            setRemoteTable(myManager, agentEP, tableNodeName.ToString(), tableData);
        }
        </code>
        <code lang="VB">
        ''' &lt;summary&gt;
        ''' Sets table values on a remote agent from the values contained in a 2d string array.
        ''' &lt;/summary&gt;
        ''' &lt;param name="myManager"&gt;Local Manager instance&lt;/param&gt;
        ''' &lt;param name="agentEP"&gt;Agent address&lt;/param&gt;
        ''' &lt;param name="tableNameOrOid"&gt;Name or OID of the table.&lt;/param&gt;
        ''' &lt;param name="tableData"&gt;A 2d array [rows, columns] containing the table data to set on the agent.&lt;/param&gt;
        ''' &lt;remarks&gt;
        ''' This method takes a string tableNameOrOid argument, therefore it is compatible with dynamically loaded MIBs.
        ''' This method requires the MIB or Mib Code File defining the table to be loaded/imported in myManager.Mib.
        ''' To sparsely populate the table, or to not update a table cell, specify null/Nothing for the tableData element.
        ''' &lt;/remarks&gt;
        Private Sub setRemoteTable(ByVal myManager As Manager, ByVal agentEP As IPEndPoint, ByVal tableNameOrOid As String, ByVal tableData(,) As String)
            'Can also take a MibNode argument
            Dim tableNodes() As MibNode = myManager.Mib.GetTableColumns(tableNameOrOid)
            Dim rows As Integer = tableData.GetLength(0)
            Dim columns As Integer = tableData.GetLength(1)

            If columns &lt;&gt; tableNodes.Length Then
                Throw New ArgumentException("The number of columns contained in the table data does not match the table's definition", "tableData")
            End If

            Dim managerSocket As New SnmpSocket(myManager)

            Try
                'Set the variables on the agent row by row (instead of trying to set the entire table at once) so that it's unlikely that the set 
                'messages are too large (otherwise the response's ResponseMessage.ErrorStatus is ErrorStatus.TooBig).
                '-If this is the case (can be caused by many columns, or cells that contain a lot of data), break up the Variables across more SetMessages.
                For rowIndex As Integer = 0 To rows - 1
                    Dim rowSetMessage As New SetMessage()
                    For columnIndex As Integer = 0 To columns - 1
                        If tableData(rowIndex, columnIndex) IsNot Nothing Then
                            rowSetMessage.Variables.Add(New Variable(tableNodes(columnIndex), tableData(rowIndex, columnIndex), rowIndex.ToString()))
                        End If
                    Next columnIndex
                    Dim response As ResponseMessage = managerSocket.GetResponse(rowSetMessage, agentEP, 3)
                    'Handle response as desired here...
                Next rowIndex
            Finally
                managerSocket.Close()
            End Try
        End Sub

        ''' &lt;summary&gt;
        ''' Overload that takes a NodeName parameter.
        ''' &lt;/summary&gt;
        ''' &lt;param name="myManager"&gt;Local Manager instance&lt;/param&gt;
        ''' &lt;param name="agentEP"&gt;Agent address&lt;/param&gt;
        ''' &lt;param name="tableNodeName"&gt;NodeName of the table. From either Dart.Snmp.NodeName or Mib.NodeName.&lt;/param&gt;
        ''' &lt;param name="tableData"&gt;A 2d array [rows, columns] containing the table data to set on the agent.&lt;/param&gt;
        ''' &lt;remarks&gt;
        ''' This overload takes an Enum tableNodeName argument, therefore it can only be used with built-in NodeNames, or 
        ''' NodeNames from an imported Mib Code File.
        ''' &lt;/remarks&gt;
        Private Sub setRemoteTable(ByVal myManager As Manager, ByVal agentEP As IPEndPoint, ByVal tableNodeName As [Enum], ByVal tableData(,) As String)
            setRemoteTable(myManager, agentEP, tableNodeName.ToString(), tableData)
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.MibNodes.GetTableColumns(Dart.Snmp.MibNode)">
            <summary>
            Returns the columnar MibNode objects that are under the specified table MibNode.
            </summary>
            <param name="tableNode">The table MibNode parent of the columnar MibNode objects to return.</param>
            <returns>An array of columnar MibNode objects.</returns>
            <remarks>
            This method assumes that the MibNodes collection is ordered by OID. If it has been modified by <see cref="M:Dart.Snmp.MibNodes.Add(Dart.Snmp.MibNode)">adding</see> or 
            <see cref="M:Dart.Snmp.MibNodes.Insert(System.Int32,Dart.Snmp.MibNode)">inserting</see> MibNode objects then <see cref="M:Dart.Snmp.MibNodes.Sort"/> should be called prior to calling this method. 
            This is not required after calling <see cref="M:Dart.Snmp.MibNodes.Import(System.Collections.Generic.List{Dart.Snmp.MibDefinition})"/>; it sorts this collection during the import process.
            </remarks>
            <exception cref="T:System.ArgumentException">
            The collection does not contain a table entry or column MibNode under the specified table MibNode, or the collection is unsorted and MibNodes.Sort() should be called.
            </exception>
            <example>
        The following example demonstrates adding a whole table to Agent.Variables from a 2d array.
        <code lang="C#">
        /// &lt;summary&gt;
        /// Adds/sets table values from the specified 2d string array to/in the Agent's variables collection.
        /// &lt;/summary&gt;
        /// &lt;param name="myAgent"&gt;Agent instance to add/set the table data to/in.&lt;/param&gt;
        /// &lt;param name="tableNameOrOid"&gt;Name or OID of the table.&lt;/param&gt;
        /// &lt;param name="tableData"&gt;A 2d array [rows, columns] containing the table data to set on the agent.&lt;/param&gt;
        /// &lt;remarks&gt;
        /// This method takes a string tableNameOrOid argument, therefore it is compatible with dynamically loaded MIBs.
        /// This method requires the MIB or Mib Code File defining the table to be loaded/imported in myManager.Mib.
        /// To sparsely populate the table, or to not update a table cell, specify null/Nothing for the tableData element.
        /// &lt;/remarks&gt;
        private void setLocalTable(Agent myAgent, string tableNameOrOid, string[,] tableData)
        {
            //Can also take a MibNode argument
            MibNode[] tableNodes = myAgent.Mib.GetTableColumns(tableNameOrOid);
            int rows = tableData.GetLength(0);
            int columns = tableData.GetLength(1);

            if (columns != tableNodes.Length)
                throw new ArgumentException("The number of columns contained in the table data does not match the table's definition", "tableData");

            for (int rowIndex = 0; rowIndex &lt;= rows - 1; rowIndex++)
            {
                for (int columnIndex = 0; columnIndex &lt;= columns - 1; columnIndex++)
                {
                    if (tableData[rowIndex, columnIndex] != null)
                    {
                        Variable tableCellVariable = new Variable(tableNodes[columnIndex], tableData[rowIndex, columnIndex], rowIndex.ToString());
                        //The below allows updating Variables in and adding Variables to the collection. 
                        //If initializing, Agent.Variables.Add() may be used instead.
                        myAgent.Variables[tableCellVariable.Id] = tableCellVariable;
                    }
                }
            }
        }

        /// &lt;summary&gt;
        /// Overload that takes a NodeName parameter.
        /// &lt;/summary&gt;
        /// &lt;param name="myAgent"&gt;Agent instance to add/set the table data to/in.&lt;/param&gt;
        /// &lt;param name="tableNodeName"&gt;NodeName of the table. From either Dart.Snmp.NodeName or Mib.NodeName.&lt;/param&gt;
        /// &lt;param name="tableData"&gt;A 2d array [rows, columns] containing the table data to set on the agent.&lt;/param&gt;
        /// &lt;remarks&gt;
        /// This overload takes an Enum tableNodeName argument, therefore it can only be used with built-in NodeNames, or 
        /// NodeNames from an imported Mib Code File.
        /// &lt;/remarks&gt;
        private void setLocalTable(Agent myAgent, Enum tableNodeName, string[,] tableData)
        {
            setLocalTable(myAgent, tableNodeName.ToString(), tableData);
        }
        </code>
        <code lang="VB">
        ''' &lt;summary&gt;
        ''' Adds/sets table values from the specified 2d string array to/in the Agent's variables collection.
        ''' &lt;/summary&gt;
        ''' &lt;param name="myAgent"&gt;Agent instance to add/set the table data to/in.&lt;/param&gt;
        ''' &lt;param name="tableNameOrOid"&gt;Name or OID of the table.&lt;/param&gt;
        ''' &lt;param name="tableData"&gt;A 2d array [rows, columns] containing the table data to set on the agent.&lt;/param&gt;
        ''' &lt;remarks&gt;
        ''' This method takes a string tableNameOrOid argument, therefore it is compatible with dynamically loaded MIBs.
        ''' This method requires the MIB or Mib Code File defining the table to be loaded/imported in myManager.Mib.
        ''' To sparsely populate the table, or to not update a table cell, specify null/Nothing for the tableData element.
        ''' &lt;/remarks&gt;
        Private Sub setLocalTable(ByVal myAgent As Agent, ByVal tableNameOrOid As String, ByVal tableData(,) As String)
            'Can also take a MibNode argument
            Dim tableNodes() As MibNode = myAgent.Mib.GetTableColumns(tableNameOrOid)
            Dim rows As Integer = tableData.GetLength(0)
            Dim columns As Integer = tableData.GetLength(1)

            If columns &lt;&gt; tableNodes.Length Then
                Throw New ArgumentException("The number of columns contained in the table data does not match the table's definition", "tableData")
            End If

            For rowIndex As Integer = 0 To rows - 1
                For columnIndex As Integer = 0 To columns - 1
                    If tableData(rowIndex, columnIndex) IsNot Nothing Then
                        Dim tableCellVariable As New Variable(tableNodes(columnIndex), tableData(rowIndex, columnIndex), rowIndex.ToString())
                        'The below allows updating Variables in and adding Variables to the collection. 
                        'If initializing, Agent.Variables.Add() may be used instead.
                        myAgent.Variables(tableCellVariable.Id) = tableCellVariable
                    End If
                Next columnIndex
            Next rowIndex
        End Sub

        ''' &lt;summary&gt;
        ''' Overload that takes a NodeName parameter.
        ''' &lt;/summary&gt;
        ''' &lt;param name="myAgent"&gt;Agent instance to add/set the table data to/in.&lt;/param&gt;
        ''' &lt;param name="tableNodeName"&gt;NodeName of the table. From either Dart.Snmp.NodeName or Mib.NodeName.&lt;/param&gt;
        ''' &lt;param name="tableData"&gt;A 2d array [rows, columns] containing the table data to set on the agent.&lt;/param&gt;
        ''' &lt;remarks&gt;
        ''' This overload takes an Enum tableNodeName argument, therefore it can only be used with built-in NodeNames, or 
        ''' NodeNames from an imported Mib Code File.
        ''' &lt;/remarks&gt;
        Private Sub setLocalTable(ByVal myAgent As Agent, ByVal tableNodeName As [Enum], ByVal tableData(,) As String)
            setLocalTable(myAgent, tableNodeName.ToString(), tableData)
        End Sub
        </code>
      </example>
            <example>
        The following example demonstrates setting a whole table on a remote Agent from a Manager from values in a 2d array.
        <code lang="C#">
        /// &lt;summary&gt;
        /// Sets table values on a remote agent from the values contained in a 2d string array.
        /// &lt;/summary&gt;
        /// &lt;param name="myManager"&gt;Local Manager instance&lt;/param&gt;
        /// &lt;param name="agentEP"&gt;Agent address&lt;/param&gt;
        /// &lt;param name="tableNameOrOid"&gt;Name or OID of the table.&lt;/param&gt;
        /// &lt;param name="tableData"&gt;A 2d array [rows, columns] containing the table data to set on the agent.&lt;/param&gt;
        /// &lt;remarks&gt;
        /// This method takes a string tableNameOrOid argument, therefore it is compatible with dynamically loaded MIBs.
        /// This method requires the MIB or Mib Code File defining the table to be loaded/imported in myManager.Mib.
        /// To sparsely populate the table, or to not update a table cell, specify null/Nothing for the tableData element.
        /// &lt;/remarks&gt;
        private void setRemoteTable(Manager myManager, IPEndPoint agentEP, string tableNameOrOid, string[,] tableData)
        {
            //Can also take a MibNode argument
            MibNode[] tableNodes = myManager.Mib.GetTableColumns(tableNameOrOid);
            int rows = tableData.GetLength(0);
            int columns = tableData.GetLength(1);

            if (columns != tableNodes.Length)
                throw new ArgumentException("The number of columns contained in the table data does not match the table's definition", "tableData");

            SnmpSocket managerSocket = new SnmpSocket(myManager);

            try
            {
                //Set the variables on the agent row by row (instead of trying to set the entire table at once) so that it's unlikely that the set 
                //messages are too large (otherwise the response's ResponseMessage.ErrorStatus is ErrorStatus.TooBig).
                //-If this is the case (can be caused by many columns, or cells that contain a lot of data), break up the Variables across more SetMessages.
                for (int rowIndex = 0; rowIndex &lt;= rows - 1; rowIndex++)
                {
                    SetMessage rowSetMessage = new SetMessage();
                    for (int columnIndex = 0; columnIndex &lt;= columns - 1; columnIndex++)
                        if(tableData[rowIndex, columnIndex] != null)
                            rowSetMessage.Variables.Add(new Variable(tableNodes[columnIndex], tableData[rowIndex, columnIndex], rowIndex.ToString()));
                    ResponseMessage response = managerSocket.GetResponse(rowSetMessage, agentEP, 3);
                    //Handle response as desired here...
                }
            }
            finally
            {
                managerSocket.Close();
            }
        }

        /// &lt;summary&gt;
        /// Overload that takes a NodeName parameter.
        /// &lt;/summary&gt;
        /// &lt;param name="myManager"&gt;Local Manager instance&lt;/param&gt;
        /// &lt;param name="agentEP"&gt;Agent address&lt;/param&gt;
        /// &lt;param name="tableNodeName"&gt;NodeName of the table. From either Dart.Snmp.NodeName or Mib.NodeName.&lt;/param&gt;
        /// &lt;param name="tableData"&gt;A 2d array [rows, columns] containing the table data to set on the agent.&lt;/param&gt;
        /// &lt;remarks&gt;
        /// This overload takes an Enum tableNodeName argument, therefore it can only be used with built-in NodeNames, or 
        /// NodeNames from an imported Mib Code File.
        /// &lt;/remarks&gt;
        private void setRemoteTable(Manager myManager, IPEndPoint agentEP, Enum tableNodeName, string[,] tableData)
        {
            setRemoteTable(myManager, agentEP, tableNodeName.ToString(), tableData);
        }
        </code>
        <code lang="VB">
        ''' &lt;summary&gt;
        ''' Sets table values on a remote agent from the values contained in a 2d string array.
        ''' &lt;/summary&gt;
        ''' &lt;param name="myManager"&gt;Local Manager instance&lt;/param&gt;
        ''' &lt;param name="agentEP"&gt;Agent address&lt;/param&gt;
        ''' &lt;param name="tableNameOrOid"&gt;Name or OID of the table.&lt;/param&gt;
        ''' &lt;param name="tableData"&gt;A 2d array [rows, columns] containing the table data to set on the agent.&lt;/param&gt;
        ''' &lt;remarks&gt;
        ''' This method takes a string tableNameOrOid argument, therefore it is compatible with dynamically loaded MIBs.
        ''' This method requires the MIB or Mib Code File defining the table to be loaded/imported in myManager.Mib.
        ''' To sparsely populate the table, or to not update a table cell, specify null/Nothing for the tableData element.
        ''' &lt;/remarks&gt;
        Private Sub setRemoteTable(ByVal myManager As Manager, ByVal agentEP As IPEndPoint, ByVal tableNameOrOid As String, ByVal tableData(,) As String)
            'Can also take a MibNode argument
            Dim tableNodes() As MibNode = myManager.Mib.GetTableColumns(tableNameOrOid)
            Dim rows As Integer = tableData.GetLength(0)
            Dim columns As Integer = tableData.GetLength(1)

            If columns &lt;&gt; tableNodes.Length Then
                Throw New ArgumentException("The number of columns contained in the table data does not match the table's definition", "tableData")
            End If

            Dim managerSocket As New SnmpSocket(myManager)

            Try
                'Set the variables on the agent row by row (instead of trying to set the entire table at once) so that it's unlikely that the set 
                'messages are too large (otherwise the response's ResponseMessage.ErrorStatus is ErrorStatus.TooBig).
                '-If this is the case (can be caused by many columns, or cells that contain a lot of data), break up the Variables across more SetMessages.
                For rowIndex As Integer = 0 To rows - 1
                    Dim rowSetMessage As New SetMessage()
                    For columnIndex As Integer = 0 To columns - 1
                        If tableData(rowIndex, columnIndex) IsNot Nothing Then
                            rowSetMessage.Variables.Add(New Variable(tableNodes(columnIndex), tableData(rowIndex, columnIndex), rowIndex.ToString()))
                        End If
                    Next columnIndex
                    Dim response As ResponseMessage = managerSocket.GetResponse(rowSetMessage, agentEP, 3)
                    'Handle response as desired here...
                Next rowIndex
            Finally
                managerSocket.Close()
            End Try
        End Sub

        ''' &lt;summary&gt;
        ''' Overload that takes a NodeName parameter.
        ''' &lt;/summary&gt;
        ''' &lt;param name="myManager"&gt;Local Manager instance&lt;/param&gt;
        ''' &lt;param name="agentEP"&gt;Agent address&lt;/param&gt;
        ''' &lt;param name="tableNodeName"&gt;NodeName of the table. From either Dart.Snmp.NodeName or Mib.NodeName.&lt;/param&gt;
        ''' &lt;param name="tableData"&gt;A 2d array [rows, columns] containing the table data to set on the agent.&lt;/param&gt;
        ''' &lt;remarks&gt;
        ''' This overload takes an Enum tableNodeName argument, therefore it can only be used with built-in NodeNames, or 
        ''' NodeNames from an imported Mib Code File.
        ''' &lt;/remarks&gt;
        Private Sub setRemoteTable(ByVal myManager As Manager, ByVal agentEP As IPEndPoint, ByVal tableNodeName As [Enum], ByVal tableData(,) As String)
            setRemoteTable(myManager, agentEP, tableNodeName.ToString(), tableData)
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.MibNodes.GetByNodeName(System.Enum)">
            <summary>
            Returns the MibNode that correlates to the given NodeName.
            </summary>
            <param name="nodeName">A NodeName enum member that correlates to the MibNode to return.</param>
            <returns>A MibNode</returns>
            <remarks>
            <para>
            Intrinsic node names are provided by the <see cref="T:Dart.Snmp.NodeName"/> enumeration. Node names from imported MIB code files 
            are provided by the code file's Mib.NodeName enumeration. Node names from MIB files loaded at runtime can only be accessed 
            from the MibNodes collection by string indexer.
            </para>
            </remarks>
            <example>
        The following example demonstrates starting a simple agent with one variable.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Add a variable to the agent
            agent1.Variables.Add(agent1.Mib.GetByNodeName(NodeName.sysContact).GetIid(),
                agent1.Mib.CreateVariable(NodeName.sysContact, "Systems Admin"));

            //Start listening for requests
            agent1.Start(agent1_MessageReceived, null);
        }

        private void agent1_MessageReceived(Agent agent, RequestMessage request, object state)
        {
            //Create and send a response whenever a request is received
            agent1.Send(agent1.CreateResponse(request), request.Origin);
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Add a variable to the agent
            agent1.Variables.Add(agent1.Mib.GetByNodeName(NodeName.sysContact).GetIid(), agent1.Mib.CreateVariable(NodeName.sysContact, "Systems Admin"))

            'Start listening for requests
            agent1.Start(AddressOf agent1_MessageReceived, Nothing)
        End Sub

        Private Sub agent1_MessageReceived(ByVal agent As Agent, ByVal request As RequestMessage, ByVal state As Object)
            'Create and send a response whenever a request is received
            agent1.Send(agent1.CreateResponse(request), request.Origin)
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.MibNodes.CreateVariable(System.Enum)">
            <summary>
            Creates a variable from the specified NodeName.
            </summary>
            <param name="nodeName">A NodeName enum member that correlates to an intrinsic or imported MibNode.</param>
            <returns>A Variable with an empty value</returns>
            <remarks>
            <para>
            Intrinsic node names are provided by the <see cref="T:Dart.Snmp.NodeName"/> enumeration. Node names from imported MIB code files 
            are provided by the code file's Mib.NodeName enumeration.
            </para>
            <para>
            Variables cannot be created with this method for objects defined in MIBs loaded at runtime; use a <see cref="T:Dart.Snmp.Variable"/> constructor for this scenario. 
            See <see cref="F:Dart.Snmp.Agent.Variables"/> for a demonstration of creating variables from dynamically loaded MIBs.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.MibNodes.CreateVariable(System.Enum,System.String)">
            <summary>
            Creates a variable from the specified NodeName and value.
            </summary>
            <param name="nodeName">A NodeName enum member that correlates to an intrinsic or imported MibNode.</param>
            <param name="value">A string representation of the value.</param>
            <returns>A Variable with the specified value</returns>
            <remarks>
            <para>
            The value argument will be automatically converted into a <see cref="N:Dart.Snmp.SimpleType">SimpleType</see> as applicable for the specified <i>nodeName</i>.
            </para>
            <para>
            Intrinsic node names are provided by the <see cref="T:Dart.Snmp.NodeName"/> enumeration. Node names from imported MIB code files 
            are provided by the code file's Mib.NodeName enumeration.
            </para>
            <para>
            Variables cannot be created with this method for objects defined in MIBs loaded at runtime; use a <see cref="T:Dart.Snmp.Variable"/> constructor for this scenario. 
            See <see cref="F:Dart.Snmp.Agent.Variables"/> for a demonstration of creating variables from dynamically loaded MIBs.
            </para>
            </remarks>
            <example>
        The following example demonstrates starting a simple agent with one variable.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Add a variable to the agent
            agent1.Variables.Add(agent1.Mib.GetByNodeName(NodeName.sysContact).GetIid(),
                agent1.Mib.CreateVariable(NodeName.sysContact, "Systems Admin"));

            //Start listening for requests
            agent1.Start(agent1_MessageReceived, null);
        }

        private void agent1_MessageReceived(Agent agent, RequestMessage request, object state)
        {
            //Create and send a response whenever a request is received
            agent1.Send(agent1.CreateResponse(request), request.Origin);
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Add a variable to the agent
            agent1.Variables.Add(agent1.Mib.GetByNodeName(NodeName.sysContact).GetIid(), agent1.Mib.CreateVariable(NodeName.sysContact, "Systems Admin"))

            'Start listening for requests
            agent1.Start(AddressOf agent1_MessageReceived, Nothing)
        End Sub

        Private Sub agent1_MessageReceived(ByVal agent As Agent, ByVal request As RequestMessage, ByVal state As Object)
            'Create and send a response whenever a request is received
            agent1.Send(agent1.CreateResponse(request), request.Origin)
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.MibNodes.CreateVariable(System.Enum,System.String,System.String)">
            <summary>
            Creates a table cell variable from the specified NodeName, value, and row indexer.
            </summary>
            <param name="nodeName">A table column's NodeName enum member that correlates to an intrinsic or imported MibNode.</param>
            <param name="value">A string representation of the value.</param>
            <param name="indexer">Row indexer to use to construct the Variable.</param>
            <returns>A Variable with the specified value</returns>
            <remarks>
            <para>
            The value argument will be automatically converted into a <see cref="N:Dart.Snmp.SimpleType">SimpleType</see> as applicable for the specified <i>nodeName</i>.
            </para>
            <para>
            Intrinsic node names are provided by the <see cref="T:Dart.Snmp.NodeName"/> enumeration. Node names from imported MIB code files 
            are provided by the code file's Mib.NodeName enumeration.
            </para>
            <para>
            Variables cannot be created with this method for objects defined in MIBs loaded at runtime; use a <see cref="T:Dart.Snmp.Variable"/> constructor for this scenario. 
            See <see cref="F:Dart.Snmp.Agent.Variables"/> for a demonstration of creating variables from dynamically loaded MIBs.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.MibNodes.GetByOid(System.String)">
            <summary>
            Gets the MibNode that corresponds to the specified OID.
            </summary>
            <param name="oid">The OID to use in the lookup.</param>
            <returns>The MibNode with the specified OID.</returns>
        </member>
        <member name="M:Dart.Snmp.MibNodes.GetByIid(System.String)">
            <summary>
            Gets the MibNode that corresponds to the specified IID.
            </summary>
            <param name="iid">The IID to use in the lookup.</param>
            <returns>The MibNode associated with the specified IID.</returns>
        </member>
        <member name="M:Dart.Snmp.MibNodes.Populate(System.Windows.Forms.TreeView)">
            <summary>
            Populates a TreeView with <see cref="T:Dart.Snmp.MibNode"/> objects.
            </summary>
            <param name="treeView">The TreeView object to populate.</param>
            <remarks>
            <para>Each TreeNode.Tag corresponding to a MibNode will contain the MibNode.</para>
            <para>
            To use images for the node, set the treeView's ImageList property to an ImageList with the following image indices:
            </para>
            <para>
            0 = branch, 1 = leaf, 2 = notification, 3 = table, 
            4 = selected branch, 5 = selected leaf, 6 = selected notification, 7 = selected table</para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.MibNodes.Parse(System.IO.Stream)">
            <summary>
            Parses the provided MIB file data.
            </summary>
            <param name="mib">A stream containing the MIB file to parse.</param>
            <remarks>
            <para>
            This method can be called once, or multiple times to process multiple MIB files. 
            After parsing is completed, call <see cref="M:Dart.Snmp.MibNodes.GenerateNodes"/> to populate MibNodes with the parsed definitions.
            </para>
            </remarks>
            <example>
        The following example demonstrates loading a MIB file at runtime, and retrieving the value of an object defined in that MIB from an agent.
        <code lang="C#">
/* This snippet uses a MIB file with the following content:
        
DART-TEST-MIB DEFINITIONS ::= BEGIN

IMPORTS
        private
                FROM RFC1155-SMI
        OBJECT-TYPE
                FROM RFC-1212
        DisplayString
                FROM RFC-1213;

dart        OBJECT IDENTIFIER ::= {private 42}

testString OBJECT-TYPE
    SYNTAX  DisplayString
    ACCESS  read-write
    STATUS  optional
    DESCRIPTION
            "This is a description for a string"
    ::= {dart 1}

*/

private void Form1_Load(object sender, EventArgs e)
{
    //Load the MIB file defined above
    using (FileStream fs = new FileStream("DART-TEST-MIB.mib", FileMode.Open, FileAccess.Read))
        manager1.Mib.Parse(fs);
    //Parse additional MIBs here, before calling GenerateNodes()
    manager1.Mib.GenerateNodes();
}

private void button1_Click(object sender, EventArgs e)
{
    //Create and send request for 'testString' from the MIB, on a worker thread
    manager1.Start(manager1_SendGetRequest, new Variable(manager1.Mib["testString"]));
}

private void manager1_SendGetRequest(SnmpSocket managerSocket, object state)
{
    //Create Get Request
    GetMessage request = new GetMessage();
    request.Variables.Add(state as Variable);

    //Send request and get response
    ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

    //Marshal message to the UI thread using the Message event
    manager1.Marshal(new ResponseMessage[] { response }, "", null);
}

private void manager1_Message(object sender, MessageEventArgs e)
{
    //Display info about the first variable in the response, and its value
    Variable vari = e.Messages[0].Variables[0];
    label1.Text = vari.Definition.ToString() + vari.Value.ToString();
}
        </code>
        <code lang="VB">
' This snippet uses a MIB file with the following content:
'        
'DART-TEST-MIB DEFINITIONS ::= BEGIN
'
'IMPORTS
'        private
'                FROM RFC1155-SMI
'        OBJECT-TYPE
'                FROM RFC-1212
'        DisplayString
'                FROM RFC-1213;
'
'dart        OBJECT IDENTIFIER ::= {private 42}
'
'testString OBJECT-TYPE
'    SYNTAX  DisplayString
'    ACCESS  read-write
'    STATUS  optional
'    DESCRIPTION
'            "This is a description for a string"
'    ::= {dart 1}
'
'

Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
    'Load the MIB file defined above
    Using fs As New FileStream("DART-TEST-MIB.mib", FileMode.Open, FileAccess.Read)
        manager1.Mib.Parse(fs)
    End Using
    'Parse additional MIBs here, before calling GenerateNodes()
    manager1.Mib.GenerateNodes()
End Sub

Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
    'Create and send request for 'testString' from the MIB, on a worker thread
    manager1.Start(AddressOf manager1_SendGetRequest, New Variable(manager1.Mib("testString")))
End Sub

Private Sub manager1_SendGetRequest(ByVal managerSocket As SnmpSocket, ByVal state As Object)
    'Create Get Request
    Dim request As New GetMessage()
    request.Variables.Add(TryCast(state, Variable))

    'Send request and get response
    Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

    'Marshal message to the UI thread using the Message event
    manager1.Marshal(New ResponseMessage() { response }, "", Nothing)
End Sub

Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
    'Display info about the first variable in the response, and its value
    Dim vari As Variable = e.Messages(0).Variables(0)
    label1.Text = vari.Definition.ToString() &amp; vari.Value.ToString()
End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.MibNodes.Import(System.Collections.Generic.List{Dart.Snmp.MibDefinition})">
            <summary>
            Imports additional MibNode and MibTrap objects.
            </summary>
            <remarks>
            The imported MibNode and MibTrap objects may be created within Visual Studio (using "Import MIB Files" from the right-click 
            context menu for our components in the designer) or from an application using <see cref="M:Dart.Snmp.MibNodes.GenerateCode(System.IO.Stream,Dart.Snmp.Language)">MibNodes.GenerateCode()</see>.
            </remarks>
        </member>
        <member name="M:Dart.Snmp.MibNodes.Reset">
            <summary>
            Resets the collection to its default state.
            </summary>
        </member>
        <member name="M:Dart.Snmp.MibNodes.BuildDictionaries">
            <summary>
            Have to keep this method until MibNodesByOid is removed from interface. MJB.
            </summary>
        </member>
        <member name="M:Dart.Snmp.MibNodes.FixSyntax(System.String)">
            When loading in syntax, convert some spaces to underscores so we can parse using spaces
        </member>
        <member name="M:Dart.Snmp.MibNodes.ExpandSyntax(System.String)">
            <summary>
            Expand first token of syntax using m_TypeMap
            </summary>
            <param name="syntax"></param>
            <returns></returns>
        </member>
        <member name="M:Dart.Snmp.MibNodes.GetTypeFromSyntax(System.String)">
            Returns first part of definition that indicates the type
        </member>
        <member name="M:Dart.Snmp.MibNodes.GetOidFromName(System.String)">
            <summary>
            Search through all modules to find name, then build the OID
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Dart.Snmp.MibNodes.GenerateCode(System.IO.Stream,Dart.Snmp.Language)">
            <summary>
            Generates code that can be used to add MibNode and MibTrap objects from previously parsed MIB files to MibNodes.
            </summary>
            <remarks>
            <para>
            <see cref="M:Dart.Snmp.MibNodes.Parse(System.IO.Stream)"/> and <see cref="M:Dart.Snmp.MibNodes.GenerateNodes"/> will normally be called one or more times before this method is used. 
            C++ code generation is dependent on the CppCodeProvider.dll which is part of the Visual Studio 2005 or greater IDE.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.MibNodes.GenerateNodes">
            <summary>
            Generates MibNode and MibTrap objects from previously parsed MIB files and adds them to the MibNodes collection.
            </summary>
            <remarks>
            <para>
            <see cref="M:Dart.Snmp.MibNodes.Parse(System.IO.Stream)"/> will normally be called one or more times before this method is used.
            </para>
            </remarks>
            <example>
        The following example demonstrates loading a MIB file at runtime, and retrieving the value of an object defined in that MIB from an agent.
        <code lang="C#">
/* This snippet uses a MIB file with the following content:
        
DART-TEST-MIB DEFINITIONS ::= BEGIN

IMPORTS
        private
                FROM RFC1155-SMI
        OBJECT-TYPE
                FROM RFC-1212
        DisplayString
                FROM RFC-1213;

dart        OBJECT IDENTIFIER ::= {private 42}

testString OBJECT-TYPE
    SYNTAX  DisplayString
    ACCESS  read-write
    STATUS  optional
    DESCRIPTION
            "This is a description for a string"
    ::= {dart 1}

*/

private void Form1_Load(object sender, EventArgs e)
{
    //Load the MIB file defined above
    using (FileStream fs = new FileStream("DART-TEST-MIB.mib", FileMode.Open, FileAccess.Read))
        manager1.Mib.Parse(fs);
    //Parse additional MIBs here, before calling GenerateNodes()
    manager1.Mib.GenerateNodes();
}

private void button1_Click(object sender, EventArgs e)
{
    //Create and send request for 'testString' from the MIB, on a worker thread
    manager1.Start(manager1_SendGetRequest, new Variable(manager1.Mib["testString"]));
}

private void manager1_SendGetRequest(SnmpSocket managerSocket, object state)
{
    //Create Get Request
    GetMessage request = new GetMessage();
    request.Variables.Add(state as Variable);

    //Send request and get response
    ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

    //Marshal message to the UI thread using the Message event
    manager1.Marshal(new ResponseMessage[] { response }, "", null);
}

private void manager1_Message(object sender, MessageEventArgs e)
{
    //Display info about the first variable in the response, and its value
    Variable vari = e.Messages[0].Variables[0];
    label1.Text = vari.Definition.ToString() + vari.Value.ToString();
}
        </code>
        <code lang="VB">
' This snippet uses a MIB file with the following content:
'        
'DART-TEST-MIB DEFINITIONS ::= BEGIN
'
'IMPORTS
'        private
'                FROM RFC1155-SMI
'        OBJECT-TYPE
'                FROM RFC-1212
'        DisplayString
'                FROM RFC-1213;
'
'dart        OBJECT IDENTIFIER ::= {private 42}
'
'testString OBJECT-TYPE
'    SYNTAX  DisplayString
'    ACCESS  read-write
'    STATUS  optional
'    DESCRIPTION
'            "This is a description for a string"
'    ::= {dart 1}
'
'

Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
    'Load the MIB file defined above
    Using fs As New FileStream("DART-TEST-MIB.mib", FileMode.Open, FileAccess.Read)
        manager1.Mib.Parse(fs)
    End Using
    'Parse additional MIBs here, before calling GenerateNodes()
    manager1.Mib.GenerateNodes()
End Sub

Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
    'Create and send request for 'testString' from the MIB, on a worker thread
    manager1.Start(AddressOf manager1_SendGetRequest, New Variable(manager1.Mib("testString")))
End Sub

Private Sub manager1_SendGetRequest(ByVal managerSocket As SnmpSocket, ByVal state As Object)
    'Create Get Request
    Dim request As New GetMessage()
    request.Variables.Add(TryCast(state, Variable))

    'Send request and get response
    Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

    'Marshal message to the UI thread using the Message event
    manager1.Marshal(New ResponseMessage() { response }, "", Nothing)
End Sub

Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
    'Display info about the first variable in the response, and its value
    Dim vari As Variable = e.Messages(0).Variables(0)
    label1.Text = vari.Definition.ToString() &amp; vari.Value.ToString()
End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.MibNodes.GenerateNewTraps(System.Collections.Generic.ICollection{Dart.Snmp.MibTrap})">
            <summary>
            Generate new traps from previously parsed files that are not included in baseTraps.
            </summary>
            <param name="baseTraps"></param>
            <returns></returns>
        </member>
        <member name="M:Dart.Snmp.MibNodes.GenerateNewNodes(System.Collections.Generic.ICollection{Dart.Snmp.MibNode})">
            <summary>
            Generate new nodes from previously parsed files that are not included in baseNodes.
            </summary>
            <param name="baseNodes"></param>
            <returns></returns>
        </member>
        <member name="P:Dart.Snmp.MibNodes.Item(System.String)">
            <summary>
            Gets or sets the element at the specified index. Locks on <see cref="P:Dart.Snmp.MibNodes.SyncRoot"/> to provide automatic thread safety.
            </summary>
            <param name="key">MibNode name or OID.</param>
            <returns>The MibNode that corresponds to the provided key.</returns>
        </member>
        <member name="P:Dart.Snmp.MibNodes.SyncRoot">
            <summary>
            Use this object to synchronize threadsafe access.
            </summary>
            <remarks>Lock on this property to provide thread safety.</remarks>
        </member>
        <member name="T:Dart.Snmp.MibTraps">
            <summary>
            A collection of SNMPv1 trap types.
            </summary>
            <remarks>
            SNMPv2 traps are contained in <see cref="T:Dart.Snmp.MibNodes"/>.
            </remarks>
        </member>
        <member name="M:Dart.Snmp.MibTraps.GetByTrapName(System.Enum)">
            <summary>
            Returns the MibTrap with the given name.
            </summary>
            <param name="trapName">The name of the MibTrap to get.</param>
            <returns>A MibTrap</returns>
            <remarks>
            <para>
            The trapName parameter is an enumeration of trap names.
            Intrinsic names are provided by the Dart.Snmp.TrapName enumeration. Trap names from imported MIB files
            are provided by the Dart.Snmp.Mib.TrapName enumeration.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.MibTraps.GetByTrapAttributes(System.Int32,System.Int32,System.String)">
            <summary>
            Returns the MibTrap with the specified generic trap, specific trap, and enterprise values.
            </summary>
            <param name="genericTrap">The generic trap value.</param>
            <param name="specificTrap">The specific trap value.</param>
            <param name="enterprise">The enterprise value.</param>
            <returns>A matching MibTrap object, otherwise null.</returns>
        </member>
        <member name="M:Dart.Snmp.MibTraps.CreateGenericTrapMessage(Dart.Snmp.TrapName,System.String,System.Int64)">
            <summary>
            Creates a generic trap from the specified TrapName and enterprise.
            </summary>
            <param name="trapName">The TrapName enumerated type to use.</param>
            <param name="enterprise">The value of the enterprise.</param>
            <param name="sysUpTime">System uptime, usually taken from <see cref="P:Dart.Snmp.Agent.SysUpTime"/>.</param>
            <returns>A generic Trap1Message with the specified enterprise</returns>
            <remarks>
            <para>
            For Enterprise-specific traps, use <see cref="M:Dart.Snmp.MibTraps.CreateSpecificTrapMessage(System.Enum,System.Int64)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.MibTraps.CreateSpecificTrapMessage(System.Enum,System.Int64)">
            <summary>
            Creates a specific trap from the specified TrapName.
            </summary>
            <param name="trapName">The TrapName enumerated type to use.</param>
            <param name="sysUpTime">System uptime, usually taken from <see cref="P:Dart.Snmp.Agent.SysUpTime"/>.</param>
            <returns>A specific Trap1Message.</returns>
            <remarks>
            <para>
            The trapName parameter is an enumeration of trap names; the enum is contained in the Mib Code File 
            generated by <see cref="M:Dart.Snmp.MibNodes.GenerateCode(System.IO.Stream,Dart.Snmp.Language)"/>. 
            Traps cannot be created from dynamically loaded traps using this method; use the 
            <see cref="T:Dart.Snmp.Trap1Message"/> constructor directly instead.
            </para>
            <para>
            For generic traps such as warmstart, use <see cref="M:Dart.Snmp.MibTraps.CreateGenericTrapMessage(Dart.Snmp.TrapName,System.String,System.Int64)"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Dart.Snmp.Trap2.coldStart">
            <summary>
            Creates a Trap2Message that indicates a cold start.
            </summary>
        </member>
        <member name="T:Dart.Snmp.Trap2Message">
            <summary>
            The Trap2Message class is used by agents to notify managers of an event. 
            Uses SNMP version 2/3 encoding and is the functional equivalent of the Trap1Message used by SNMP version 1.
            </summary>
            <remarks>
            <para>Three classes are included that specialize the Trap2Message class to standard 
            NOTIFICATION-OBJECTs that are defined in RFC 1907:</para>
            <para>1. Dart.Snmp.Trap2.coldStart</para>
            <para>2. Dart.Snmp.Trap2.warmStart</para>
            <para>3. Dart.Snmp.Trap2.authenticationFailure</para>
            <para>This class replaces the NotificationMessage class in version 4.5 and prior.</para>
            <para>Serializable using BinaryFormatter and XmlSerializer.</para>
            </remarks>
            <example>
        The following example demonstrates how to send traps with the agent.
        <code lang="C#">
        private void TrapSender_Load(object sender, EventArgs e)
        {
            //Set sysObjectId to your enterprise number (for Trap1).
            agent1.Variables.Add(agent1.Mib.GetByNodeName(NodeName.sysObjectID).GetIid(), agent1.Mib.CreateVariable(NodeName.sysObjectID, "1.3.6.1.4.1.52222"));
        }

        private void buttonSendTrap1_Click(object sender, EventArgs e)
        {
            //Send an SNMPv1 Trap
            agent1.Send(new Dart.Snmp.Trap1.warmStart(agent1.Variables[agent1.Mib.GetByNodeName(NodeName.sysObjectID).GetIid()].Value.ToString(), agent1.SysUpTime), myManagerAddress);
        }

        private void buttonSendTrap2_Click(object sender, EventArgs e)
        {
            //Send an SNMPv2 Trap (for SNMPv3, configure warmStart.Security.User)
            agent1.Send(new Dart.Snmp.Trap2.warmStart(agent1.SysUpTime), myManagerAddress);
        }
        </code>
        <code lang="VB">
        Private Sub TrapSender_Load(ByVal sender As Object, ByVal e As EventArgs)
            'Set sysObjectId to your enterprise number (for Trap1).
            agent1.Variables.Add(agent1.Mib.GetByNodeName(NodeName.sysObjectID).GetIid(), agent1.Mib.CreateVariable(NodeName.sysObjectID, "1.3.6.1.4.1.52222"))
        End Sub

        Private Sub buttonSendTrap1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Send an SNMPv1 Trap
            agent1.Send(New Dart.Snmp.Trap1.warmStart(agent1.Variables(agent1.Mib.GetByNodeName(NodeName.sysObjectID).GetIid()).Value.ToString(), agent1.SysUpTime), myManagerAddress)
        End Sub

        Private Sub buttonSendTrap2_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Send an SNMPv2 Trap (for SNMPv3, configure warmStart.Security.User)
            agent1.Send(New Dart.Snmp.Trap2.warmStart(agent1.SysUpTime), myManagerAddress)
        End Sub
        </code>
      </example>
        </member>
        <member name="T:Dart.Snmp.StandardMessage">
            <summary>
            StandardMessage is the base class for all SNMP messages except Trap1Message. Serializable.
            </summary>
            <remarks>
            <para>StandardMessage specializes <see cref="T:Dart.Snmp.MessageBase"/>.</para>
            <para>Two classes derive from StandardMessage:</para>
            <para>1. <see cref="T:Dart.Snmp.RequestMessage"/> specializes StandardMessage for SNMP requests that are generally 
            sent by managers to agents.</para>
            <para>2. <see cref="T:Dart.Snmp.ResponseMessage"/> specializes StandardMessage for SNMP responses that are 
            returned to managers from agents.</para>
            </remarks>
        </member>
        <member name="T:Dart.Snmp.MessageBase">
            <summary>
            The MessageBase class is the abstract base class for all SNMP messages. Serializable.
            </summary>
            <remarks>
            <para>Two classes specialize MessageBase:</para>
            <para>1. The <see cref="T:Dart.Snmp.Trap1Message"/> specializes MessageBase for SNMP version 1 trap processing. </para>
            <para>2. The <see cref="T:Dart.Snmp.StandardMessage"/> specializes MessageBase for all other formats.</para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.MessageBase.Create(Dart.Snmp.Segment,System.Net.IPEndPoint,Dart.Snmp.Security,Dart.Snmp.SnmpBase)">
            <summary>
            Creates an instance of a class derived from MessageBase using the provided buffer.
            </summary>
            <param name="encodedMessage">A Segment containing the encoded SNMP message. Version 1/2/3 is supported.</param>
            <param name="origin"><see cref="T:System.Net.IPEndPoint">IPEndPoint</see> that indicates the source of the message.
            Used to initialize <see cref="P:Dart.Snmp.MessageBase.Origin"/>. Can be null.</param>
            <param name="requestSecurity">If creating a response, a reference to Request.Security. Can be null.</param>
            <param name="entity">The Manager or Agent decoding the message.</param>
            <returns>A newly created message.</returns>
            <remarks>
            <para>The returned object will normally be cast to the appropriate type before use. If a version 3 message cannot be decrypted,
            a <see cref="T:Dart.Snmp.RequestMessage"/> is created and null is returned if PDU values are referenced.</para>
            </remarks>
            <exception cref="P:Dart.Snmp.MessageBase.DecodingException">A decoding problem was experienced.</exception>
        </member>
        <member name="M:Dart.Snmp.MessageBase.Encode">
            <summary>
            Encodes all SNMP version 1/2 messages.
            </summary>
            <returns>A byte array containing the encoded message.</returns>
        </member>
        <member name="F:Dart.Snmp.MessageBase.Community">
            <summary>
            Gets or sets the community field in the message.
            </summary>
            <remarks>
            <para>
            This property is used as a primitive type of authentication. 
            The application can check for valid values when a version 1/2 RequestMessage is processed in 
            the RequestReceived delegate function.
            </para>
            </remarks>
            <value>Defaults to "public" when the default constructor is used.</value>
        </member>
        <member name="M:Dart.Snmp.MessageBase.ToString">
            <summary>
            Provides a description of the message.
            </summary>
            <returns>String</returns>
        </member>
        <member name="F:Dart.Snmp.MessageBase.Tag">
            <summary>
            Gets or sets a value that can store any associated object.
            </summary>
            <value>Any <see cref="T:System.Object"/> instance. </value>
            <remarks>
            <para>The value is not included in the encoded message.</para>
            </remarks>
        </member>
        <member name="P:Dart.Snmp.MessageBase.DecodingException">
            <summary>
            Returns the reason why the message did not pass all decoding checks. All sequences embedded in the PDU are checked.
            </summary>
        </member>
        <member name="P:Dart.Snmp.MessageBase.Origin">
            <summary>
            Gets or sets the origin of a received or sent message.
            </summary>
            <remarks>
            <para>The value is advisory in nature.</para>
            </remarks>
            <value>The value is initialized when a message is decoded or sent to a destination.</value>
        </member>
        <member name="P:Dart.Snmp.MessageBase.Destination">
            <summary>
            Gets or sets the destination of a received or sent message.
            </summary>
            <remarks>
            <para>The value is advisory in nature.</para>
            </remarks>
            <value>The value is initialized when a message is decoded or sent to a destination.</value>
        </member>
        <member name="P:Dart.Snmp.MessageBase.TimeStamp">
            <summary>
            Gets the DateTime that the message was created or encoded.
            </summary>
            <remarks>
            <para>The value is advisory in nature.</para>
            </remarks>
            <value>The value is initialized when a message is created or encoded.</value>
        </member>
        <member name="P:Dart.Snmp.MessageBase.DeliveryStatus">
            <summary>
            Indicates whether the message was sent or received.
            </summary>
            <remarks>
            <para>The value is advisory in nature.</para>
            </remarks>
            <value><see cref="P:Dart.Snmp.MessageBase.DeliveryStatus"/></value>
        </member>
        <member name="P:Dart.Snmp.MessageBase.EncodedMessage">
            <summary>
            Returns the encoded message.
            </summary>
            <remarks>
            <para>
            For messages received asynchronously, this property contains a copy of the original encoded packet. Set when <see cref="M:Dart.Snmp.MessageBase.Encode"/> is used.
            </para>
            </remarks>
            <example>
        The following example demonstrates logging request and response messages to disk using the EncodedMessage.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Create Get Request
            GetMessage request = new GetMessage();
            request.Variables.Add(manager1.Mib.CreateVariable(NodeName.sysDescr));

            //Send request and get response
            SnmpSocket managerSocket = new SnmpSocket(manager1);
            ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

            //Log the request and response PDUs
            FileStream file = new FileStream("log.txt", FileMode.Append, FileAccess.Write);
            string requestLabel = "\r\nRequest:\r\n";
            string responseLabel = "\r\nResponse:\r\n";
            file.Write(System.Text.Encoding.Default.GetBytes(requestLabel), 0, requestLabel.Length);
            file.Write(request.EncodedMessage, 0, request.EncodedMessage.Length);
            file.Write(System.Text.Encoding.Default.GetBytes(responseLabel), 0, responseLabel.Length);
            file.Write(response.EncodedMessage, 0, response.EncodedMessage.Length);
            file.Close();
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create Get Request
            Dim request As New GetMessage()
            request.Variables.Add(manager1.Mib.CreateVariable(NodeName.sysDescr))

            'Send request and get response
            Dim managerSocket As New SnmpSocket(manager1)
            Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

            'Log the request and response PDUs
            Dim file As New FileStream("log.txt", FileMode.Append, FileAccess.Write)
            Dim requestLabel As String = vbCrLf &amp; "Request:" &amp; vbCrLf
            Dim responseLabel As String = vbCrLf &amp; "Response:" &amp; vbCrLf
            file.Write(System.Text.Encoding.Default.GetBytes(requestLabel), 0, requestLabel.Length)
            file.Write(request.EncodedMessage, 0, request.EncodedMessage.Length)
            file.Write(System.Text.Encoding.Default.GetBytes(responseLabel), 0, responseLabel.Length)
            file.Write(response.EncodedMessage, 0, response.EncodedMessage.Length)
            file.Close()
        End Sub
        </code>
      </example>
        </member>
        <member name="P:Dart.Snmp.MessageBase.Variables">
            <summary>
            Gets or sets the VariableCollection containing the IDs and their associated values in the message.
            </summary>
            <remarks>
            <para>Gets or sets the VariableCollection containing the IDs and their associated values in the message.</para>
            </remarks>
            <value>This value is initialized when a message is decoded. 
            The application will normally add variables to this collection when constructing a message.</value>
        </member>
        <member name="P:Dart.Snmp.MessageBase.Version">
            <summary>
            Gets or sets the SNMP version used for encoding.
            </summary>
            <value>This value is initialized when a message is decoded. 
            The application can set this property to indicate the SNMP version to be used for encoding.</value>
            <remarks>
            <para>
            Messages of type Trap1Message can only be set to SnmpVersion.One.
            </para>
            <para>
            Messages of type InformMessage, GetBulkMessage, ReportMessage and Trap2Message can only be set 
            to SnmpVersion.Two or SnmpVersion.Three.
            </para>
            <para>
            Messages of type ResponseMessage, SetMessage, GetMessage and GetNextMessage can be set to any value.
            </para>
            <para>
            If set to SnmpVersion.Three then <see cref="F:Dart.Snmp.StandardMessage.Security"/> should be initialized to 
            the security values needed to control the authentication and encryption process while encoding.
            When decoding SnmpVersion.Three packets the Agent and Manager get their passwords from the Users property.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">An invalid version is being specified for the message.</exception>
        </member>
        <member name="M:Dart.Snmp.StandardMessage.Encode">
            <summary>
            Encodes all SNMP version 1/2/3 messages except for traps.
            </summary>
            <returns>A byte array with the encoded message.</returns>
        </member>
        <member name="F:Dart.Snmp.StandardMessage.Security">
            <summary>
            Gets or sets the Security instance to use for encoding/encrypting and decoding/decrypting SNMP version 3 messages.
            </summary>
            <value>The Security class provides support for SNMP version 3 message processing.</value>
            <remarks>
            <para>
            Gets or sets the Security instance to use for encoding/encrypting and decoding/decrypting SNMP version 3 messages.
            </para>
            </remarks>
            <example>
        The following example demonstrates how to send a SNMPv3 Set request and receive the response.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Create and send request on a worker thread
            manager1.Start(sendRequest, manager1.Mib.CreateVariable(NodeName.sysContact, "Systems Admin"));
        }

        private void sendRequest(SnmpSocket managerSocket, object state)
        {
            //Create Set Request
            SetMessage request = new SetMessage();
            request.Variables.Add(state as Variable);

            //Use version 3. Setup security username and passwords.
            request.Version = SnmpVersion.Three;
            request.Security.User.Name = "testAuthPriv";
            request.Security.User.AuthenticationProtocol = AuthenticationProtocol.Md5;
            request.Security.User.AuthenticationPassword = "dartauth";
            request.Security.User.PrivacyProtocol = PrivacyProtocol.Des;
            request.Security.User.PrivacyPassword = "dartpriv";

            //Send request and get response
            ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

            //Marshal message to the UI thread using the Message event
            manager1.Marshal(new ResponseMessage[] { response }, "", null);
        }

        private void manager1_Message(object sender, Dart.Snmp.MessageEventArgs e)
        {
            //Fires on the UI thread
            //Display info about the first variable in the response, and its value
            Variable vari = e.Messages[0].Variables[0];
            label1.Text = vari.Definition.ToString() + "\r\nValue: " + vari.Value.ToString();
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create and send request on a worker thread
            manager1.Start(AddressOf sendRequest, manager1.Mib.CreateVariable(NodeName.sysContact, "Systems Admin"))
        End Sub

        Private Sub sendRequest(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Create Set Request
            Dim request As New SetMessage()
            request.Variables.Add(TryCast(state, Variable))

            'Use version 3. Setup security username and passwords.
            request.Version = SnmpVersion.Three
            request.Security.User.Name = "testAuthPriv"
            request.Security.User.AuthenticationProtocol = AuthenticationProtocol.Md5
            request.Security.User.AuthenticationPassword = "dartauth"
            request.Security.User.PrivacyProtocol = PrivacyProtocol.Des
            request.Security.User.PrivacyPassword = "dartpriv"

            'Send request and get response
            Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

            'Marshal message to the UI thread using the Message event
            manager1.Marshal(New ResponseMessage() { response }, "", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As Dart.Snmp.MessageEventArgs)
            'Fires on the UI thread
            'Display info about the first variable in the response, and its value
            Dim vari As Variable = e.Messages(0).Variables(0)
            label1.Text = vari.Definition.ToString() &amp; vbCrLf &amp; "Value: " &amp; vari.Value.ToString()
        End Sub
        </code>
      </example>
        </member>
        <member name="P:Dart.Snmp.StandardMessage.Id">
            <summary>
            Gets or sets the request identification field in the message.
            </summary>
            <value>An integer that can pair a ResponseMessage to a specific RequestMessage.</value>
            <remarks>
            <para>The default constructor for any class derived from RequestMessage will automatically initialize this value
            to one higher than the previous. 
            The first instance will have an Id of 1, the second an Id of 2, and so on.</para>
            <para>All decoded messages return the value encoded in the message.
            Version 3 messages use <see cref="F:Dart.Snmp.Security.Id">Security.Id</see> instead.</para>
            <para>This property is unrelated to Variable.Id, which is either an OID or IID.</para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.Trap2Message.#ctor">
            <summary>
            Creates a new instance of the Trap2Message class. Used for licensing only.
            </summary>
        </member>
        <member name="M:Dart.Snmp.Trap2Message.#ctor(System.String,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the Trap2Message class.
            </summary>
            <param name="oid">The <see cref="P:Dart.Snmp.Trap2Message.Oid"/> that identifies the trap.</param>
            <param name="description">A description of the notification provided by the source MIB.</param>
            <param name="sysUpTime">System uptime, usually taken from <see cref="P:Dart.Snmp.Agent.SysUpTime"/>.</param>
            <remarks>
            <para>
            This constructor will create a version 2 message. 
            When the message is encoded the first variable is an instance of a sysUpTime Variable
            (with the value initialized to MessageBase.SysUpTime) and the second variable is an instance of an snmpTrapOID 
            Variable with the parameter oid as its value.
            </para>
            <para>
            sysUpTime and snmpTrapOID are exposed as properties, and are not presented in <see cref="P:Dart.Snmp.MessageBase.Variables"/>. 
            Additional variables can be included as variables accessed through MessageBase.Variables.</para>
            </remarks>
        </member>
        <member name="F:Dart.Snmp.Trap2Message.Description">
            <summary>
            Gets or sets a description of the Trap2Message.
            </summary>
            <value>This value is initialized in the constructor.</value>
        </member>
        <member name="M:Dart.Snmp.Trap2Message.Encode">
            <summary>
            Encodes the message.
            </summary>
            <returns>A byte array with the encoded message.</returns>
        </member>
        <member name="M:Dart.Snmp.Trap2Message.ToString">
            <summary>
            Provides a description of the message.
            </summary>
            <returns>String</returns>
        </member>
        <member name="P:Dart.Snmp.Trap2Message.Oid">
            <summary>
            Gets or sets the OID of the trap that describes what variables are included.
            </summary>
            <value>This value is initialized in the constructor.</value>
        </member>
        <member name="P:Dart.Snmp.Trap2Message.SysUpTime">
            <summary>
            Gets or sets the hundredths of a second since the agent sending the message was initialized.
            </summary>
            <value>
            Initialized in the constructor.
            </value>    
        </member>
        <member name="F:Dart.Snmp.Trap2.coldStart.OidConst">
            <summary>
            The OID value that identifies the Trap2Message.
            </summary>
        </member>
        <member name="M:Dart.Snmp.Trap2.coldStart.#ctor(System.Int64)">
            <summary>
            Creates a Trap2Message that indicates a cold start.
            </summary>
            <param name="sysUpTime">System uptime, usually taken from <see cref="P:Dart.Snmp.Agent.SysUpTime"/>.</param>
        </member>
        <member name="T:Dart.Snmp.Trap2.warmStart">
            <summary>
            Creates a Trap2Message that indicates a warm start.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Trap2.warmStart.OidConst">
            <summary>
            The OID value that identifies the Trap2Message.
            </summary>
        </member>
        <member name="M:Dart.Snmp.Trap2.warmStart.#ctor(System.Int64)">
            <summary>
            Creates a Trap2Message that indicates a warm start.
            </summary>
            <param name="sysUpTime">System uptime, usually taken from <see cref="P:Dart.Snmp.Agent.SysUpTime"/>.</param>
        </member>
        <member name="T:Dart.Snmp.Trap2.authenticationFailure">
            <summary>
            Creates a Trap2Message that indicates an authentication failure.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Trap2.authenticationFailure.OidConst">
            <summary>
            The OID value that identifies the Trap2Message.
            </summary>
        </member>
        <member name="M:Dart.Snmp.Trap2.authenticationFailure.#ctor(System.Int64)">
            <summary>
            Creates a Trap2Message that indicates an authentication failure.
            </summary>
            <param name="sysUpTime">System uptime, usually taken from <see cref="P:Dart.Snmp.Agent.SysUpTime"/>.</param>
        </member>
        <member name="T:Dart.Snmp.CompileMib">
            <summary>
            Summary description for CompileMib.
            </summary>
        </member>
        <member name="F:Dart.Snmp.CompileMib.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dart.Snmp.CompileMib.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Dart.Snmp.CompileMib.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Dart.Snmp.Sequence">
            <summary>
            A tagged type representing a sequence of tagged types.
            </summary>
            <remarks>
            <para>
            A tagged type representing a sequence of tagged types. ASN.1 Sequence Type: Universal and Constructed.
            </para>
            </remarks>
        </member>
        <member name="T:Dart.Snmp.TaggedType">
            <summary>
            The TaggedType class is the base class for the SimpleTaggedType class.
            </summary>
            <remarks>
            <para>
            The TaggedType class provides a basis for all derived SimpleType objects use to represent values within a SNMP message.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.TaggedType.SaveLength(System.Byte[],System.Int32@)">
            <summary>
            Called by derived classes to process the Length.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Dart.Snmp.TaggedType.EncodeLengthAndTag(System.IO.MemoryStream,System.Int32)">
            Used by derived classes to encode the number of content bytes already encoded into the buffer.
            All encoding is done from back to front.
        </member>
        <member name="M:Dart.Snmp.TaggedType.Encode(System.IO.MemoryStream)">
            <summary>
            Encode the object with no content. Overridden in derived classes that have content.
            </summary>
            <param name="dest">Destination for encoded bytes. Encoding is performed back to front.</param>
            <returns></returns>
        </member>
        <member name="M:Dart.Snmp.TaggedType.Encode">
            <summary>
            Encode object and return as a byte array. Normally used to create an SNMP packet.
            </summary>
            <returns>Byte array</returns>
        </member>
        <member name="P:Dart.Snmp.TaggedType.DecodingException">
            <summary>
            Returns first DecodingException found within this or embedded tagged types.
            </summary>
        </member>
        <member name="P:Dart.Snmp.TaggedType.TagByte">
            <summary>
            Returns tag of derived classes.
            </summary>
        </member>
        <member name="M:Dart.Snmp.Sequence.#ctor(System.Byte[],System.Int32@,Dart.Snmp.MibNodes)">
            <summary>
            Decoding constructor.
            </summary>
        </member>
        <member name="M:Dart.Snmp.Sequence.#ctor">
            <summary>
            Initializes a new empty instance of the Sequence class.
            </summary>
            <remarks>
            <para>
            Using applications will not normally manipulate this class. It provides common code for derived classes 
            <see cref="T:Dart.Snmp.SequenceOf"/>, <see cref="T:Dart.Snmp.SetOf"/>, <see cref="T:Dart.Snmp.Variable"/> and <see cref="T:Dart.Snmp.VariableCollection"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.Sequence.ToString">
            <summary>
            Converts the object to its string representation.
            </summary>
            <returns>
            A string that contains the comma separated concatenation of each element’s ToString value in the Sequence.
            </returns>
        </member>
        <member name="T:Dart.Snmp.SequenceOf">
            <summary>
            A tagged type representing a sequence of tagged types that are ordered and of the same type.
            </summary>
            <remarks>ASN.1: Like <see cref="T:Dart.Snmp.Sequence"/>, but implies all the variable bindings are of the same type.</remarks>
        </member>
        <member name="M:Dart.Snmp.SequenceOf.#ctor(System.Byte[],System.Int32@,Dart.Snmp.MibNodes)">
            <summary>
            Decoding constructor.
            </summary>
        </member>
        <member name="M:Dart.Snmp.SequenceOf.#ctor">
            <summary>
            Initializes a new empty instance of the SequenceOf class.
            </summary>
            <remarks>
            <para>
            An example is a MIB table entry definition, which uses this tagged type to describe multiple table rows that are 
            ordered and of the same type.</para>
            </remarks>
        </member>
        <member name="T:Dart.Snmp.SetOf">
            <summary>
            A tagged type representing a sequence of tagged types that are of the same type.
            </summary>
            <remarks>ASN.1 Set Type. Like <see cref="T:Dart.Snmp.Sequence"/>, Universal and Constructed.</remarks>
        </member>
        <member name="M:Dart.Snmp.SetOf.#ctor">
            <summary>
            Initializes a new empty instance of the SetOf class.
            </summary>
        </member>
        <member name="M:Dart.Snmp.Pdu.#ctor(System.Byte[],System.Int32@,Dart.Snmp.MibNodes)">
            <summary>
            Decoding constructor. Refactored 3.18.14 to removed need for lock(m_Lock) in MessageBase.Create().
            </summary>
        </member>
        <member name="M:Dart.Snmp.Pdu.#ctor(Dart.Snmp.TagByte)">
            Programming constructor. Encode() will be used later.
        </member>
        <member name="T:Dart.Snmp.Variable">
            <summary>
            A Sequence that contains an <see cref="P:Dart.Snmp.Variable.Id"/> and a <see cref="T:Dart.Snmp.SimpleTaggedType"/>.
            </summary>
            <remarks>
            <para>
            <see cref="F:Dart.Snmp.Agent.Variables"/> aggregates Variables that are used as the Management Information Base (MIB). This list is used by the Agent to construct 
            a default <see cref="T:Dart.Snmp.ResponseMessage"/>.
            </para>
            <para>
            <see cref="P:Dart.Snmp.MessageBase.Variables"/> aggregates Variables that are used as variable bindings in the SNMP message.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.Variable.#ctor(System.Byte[],System.Int32@,Dart.Snmp.MibNodes)">
            <summary>
            <see cref="F:Dart.Snmp.SnmpBase.Mib"/> is searched for the decoded <see cref="P:Dart.Snmp.Variable.Id"/>, and <see cref="F:Dart.Snmp.Variable.Definition"/> is initialized to the associated <see cref="T:Dart.Snmp.MibNode"/>.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="mib"></param>
        </member>
        <member name="M:Dart.Snmp.Variable.#ctor(System.String)">
            <summary>
            Creates a Variable without a value.</summary>
            <remarks>
            <para>
            Used for requesting variables from agents, by populating the variables collection of <see cref="T:Dart.Snmp.GetMessage"/>, <see cref="T:Dart.Snmp.GetNextMessage"/> or <see cref="T:Dart.Snmp.GetBulkMessage"/>. 
            </para>
            <para>
            <see cref="P:Dart.Snmp.Variable.Value"/> is initialized to <see cref="T:Dart.Snmp.SimpleType.Empty"/>. An agent's <see cref="T:Dart.Snmp.ResponseMessage">response</see> will include
            the relevant id and its value. GetMessage generates a ResponseMessage with matching Ids, while GetNextMessage and GetBulkMessage
            produce a ResponseMessage with Ids that are "next" (in lexicographical order) to those in the request.
            </para>
            </remarks>
            <param name="id">The IID, OID or OID fragment used to initialize <see cref="P:Dart.Snmp.Variable.Id"/>. '0.0' is the minimum value that may be encoded.</param>
        </member>
        <member name="M:Dart.Snmp.Variable.#ctor(System.String,Dart.Snmp.SimpleTaggedType)">
            <summary>
            Creates a Variable with a value.
            </summary>
            <remarks>
            <para>
            Used to populate the variables collection of <see cref="T:Dart.Snmp.SetMessage"/>, <see cref="T:Dart.Snmp.InformMessage"/>, <see cref="T:Dart.Snmp.Trap1Message"/> or 
            <see cref="T:Dart.Snmp.Trap2Message"/>, and for populating <see cref="F:Dart.Snmp.Agent.Variables"/>
            </para>
            <para>
            Variable aggregates an id and a value. Id is an instance ID (IID) (e.g. "1.3.6.1.2.2.2.0").
            </para>
            </remarks>
            <param name="id">The Instance ID (IID) assigned to <see cref="P:Dart.Snmp.Variable.Id"/>. '0.0' is the minimum value that may be encoded.</param>
            <param name="value">Used to initialize <see cref="P:Dart.Snmp.Variable.Value"/>.</param>
        </member>
        <member name="M:Dart.Snmp.Variable.#ctor(Dart.Snmp.MibNode)">
            <summary>
            Creates a scalar Variable without a value.</summary>
            <param name="definition">MibNode providing a definition for the Variable.</param>
            <remarks>
            <para>
            Used for requesting variables from agents, by populating the variables collection of <see cref="T:Dart.Snmp.GetMessage"/>, <see cref="T:Dart.Snmp.GetNextMessage"/> or <see cref="T:Dart.Snmp.GetBulkMessage"/>. 
            To request a table entry, use <see cref="M:Dart.Snmp.Variable.#ctor(Dart.Snmp.MibNode,System.String,System.String)"/> or <see cref="M:Dart.Snmp.Variable.#ctor(System.String)"/>.
            </para>
            <para>
            <see cref="F:Dart.Snmp.Variable.Definition"/> will be populated with <i>definition</i>. <i>definition</i>.Oid + ".0" is used to initialize <see cref="P:Dart.Snmp.Variable.Id"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if <i>definition</i> does not have a valid ValueType property value.</exception>
        </member>
        <member name="M:Dart.Snmp.Variable.#ctor(Dart.Snmp.MibNode,System.String)">
            <summary>
            Creates a scalar Variable with a value.</summary>
            <param name="definition">MibNode providing a definition for the Variable.</param>
            <param name="value">A string representation of the value.</param>
            <remarks>
            <para>
            Used to populate the variables collection of <see cref="T:Dart.Snmp.SetMessage"/>, <see cref="T:Dart.Snmp.InformMessage"/>, <see cref="T:Dart.Snmp.Trap1Message"/> or <see cref="T:Dart.Snmp.Trap2Message"/>, 
            and for populating <see cref="F:Dart.Snmp.Agent.Variables"/>. Use <see cref="M:Dart.Snmp.Variable.#ctor(Dart.Snmp.MibNode,System.String,System.String)"/> to build non-scalar table values.
            </para>
            <para>
            <i>value</i> will be automatically converted into the relevant <see cref="N:Dart.Snmp.SimpleType">SimpleType</see> as defined by <i>definition</i>.ValueType, populating <see cref="P:Dart.Snmp.Variable.Value"/>. 
            <see cref="F:Dart.Snmp.Variable.Definition"/> will be populated with <i>definition</i>. <i>definition</i>.Oid + ".0" is used to initialize <see cref="P:Dart.Snmp.Variable.Id"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if <i>definition</i> is not a scalar object. MibNode.Usage must be <see cref="F:Dart.Snmp.Usage.Object"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <i>definition</i> does not have a valid ValueType property value.</exception>
        </member>
        <member name="M:Dart.Snmp.Variable.#ctor(Dart.Snmp.MibNode,System.String,System.String)">
            <summary>
            Creates a Variable with an optional value. Used for table entries.</summary>
            <param name="definition">When used for table entries, a table column MibNode providing a definition for the Variable.</param>
            <param name="value">A string representation of the value. Use null or an empty string when creating messages requesting the value.</param>
            <param name="indexer">Appended to <see cref="F:Dart.Snmp.MibNode.Oid">definition.Oid</see> to initialize <see cref="P:Dart.Snmp.Variable.Id"/>, typically a 1-based table row indexer.</param>
            <remarks>
            <para>
            This constructor is intended for use with tables, but can be used for scalar MibNodes as well. Use a "0" indexer to identify a scalar value 
            (<i>definition</i>.Usage is Usage.Object) or use a table row indexer to identify a table entry (<i>definition</i>.Usage is Usage.TableColumn).
            </para>
            <para>
            <i>value</i> will be automatically converted into the relevant <see cref="N:Dart.Snmp.SimpleType">SimpleType</see> as defined by <i>definition</i>.ValueType, populating <see cref="P:Dart.Snmp.Variable.Value"/>. 
            <see cref="F:Dart.Snmp.Variable.Definition"/> will be populated with <i>definition</i>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if <i>definition</i> does not have a valid ValueType property value.</exception>
        </member>
        <member name="M:Dart.Snmp.Variable.FormatValue">
            <summary>
            Returns the value of the variable in a human-readable format according to the display-hint in the variable's MibNode definition.
            </summary>
            <remarks>
            <para>
            This method formats <see cref="P:Dart.Snmp.Variable.Value"/> according to <see cref="F:Dart.Snmp.MibNode.DisplayHint">Variable.Definition.DisplayHint</see>. 
            If the display-hint is unavailable or the underlying <see cref="P:Dart.Snmp.Variable.Value"/> type does not support display-hint this method will 
            return Variable.Value.ToString().
            </para>
            <para>
            When a message is received, <see cref="F:Dart.Snmp.Variable.Definition"/> will be automatically populated if <see cref="F:Dart.Snmp.SnmpBase.Mib">Agent.Mib</see> or 
            <see cref="F:Dart.Snmp.SnmpBase.Mib">Manager.Mib</see> contains a definition for the OID.
            </para>
            </remarks>
        </member>
        <member name="F:Dart.Snmp.Variable.Definition">
            <summary>
            The MIB definition of the OID (object ID) corresponding to this IID (instance ID).
            </summary>
            <remarks>
            When a message is received, this property will be automatically populated if <see cref="F:Dart.Snmp.SnmpBase.Mib">Agent.Mib</see> or 
            <see cref="F:Dart.Snmp.SnmpBase.Mib">Manager.Mib</see> contains a definition for the OID.
            </remarks>
        </member>
        <member name="M:Dart.Snmp.Variable.GetName">
            <summary>
            Returns the Id, and adds Definition.Name in parenthesis (if present).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dart.Snmp.Variable.Clone">
            <summary>
            Creates a deep copy of the Variable.
            </summary>
            <remarks>
            <para>
            A deep copy is a copy of the elements and everything directly or indirectly referenced by the elements.
            </para>
            </remarks>
            <returns>A new copy of the Variable.</returns>
        </member>
        <member name="M:Dart.Snmp.Variable.ToString">
            <summary>
            Gets a string version of the Variable.
            </summary>
            <remarks>The string is built using GetName() + ": " + Value.ToString().</remarks>
            <returns></returns>
        </member>
        <member name="P:Dart.Snmp.Variable.Value">
            <summary>
            Gets or sets the value of the Variable.
            </summary>
            <value>A SimpleTaggedType that contains the value of the Variable.</value>
            <remarks>
            <para>
            It is the responsibility of either the user or derived classes to ensure the 
            correct <see cref="N:Dart.Snmp.SimpleType"/> is used for the Id specified.
            </para>
            </remarks>
        </member>
        <member name="P:Dart.Snmp.Variable.Id">
            <summary>
            Gets or sets the id of the variable.
            </summary>
            <remarks>
            <para>
            This property is read-only, and can only be set in the constructor.
            </para>
            </remarks>
            <value>Returns a string containing the Id value assigned to the Variable.</value>
        </member>
        <member name="P:Dart.Snmp.Variable.ValueName">
            <summary>
            Gets or sets the human readable identifier that represents the enumeration value of the variable.
            </summary>
            <remarks>
            <para>
            ValueName returns an empty string if the Variable does not represent an enumerated value
            or if the loaded MIB files do not contain a definition for the Variable OID value.  
            If Value is not a valid enumeration value as defined in the MIB, an empty string
            will be returned.
            </para>
            <para>
            An exception is raised if ValueName is set to a value not found in the mib definition.
            </para>
            </remarks>
            <value>A string that contains the enumeration name of the <see cref="P:Dart.Snmp.Variable.Value"/></value>
        </member>
        <member name="T:Dart.Snmp.VariableCollection">
            <summary>
            A Sequence that contains a collection of Variable objects.
            </summary>
        </member>
        <member name="M:Dart.Snmp.VariableCollection.#ctor">
            <summary>
            Initializes a new instance of the VariableCollection class.
            </summary>
            <remarks>The VariableCollection class contains a collection of Variable objects.</remarks>
        </member>
        <member name="M:Dart.Snmp.VariableCollection.Add(Dart.Snmp.Variable)">
            <summary>
            Adds a Variable to the end of the collection.
            </summary>
            <param name="variable">A Variable to add.</param>
        </member>
        <member name="M:Dart.Snmp.VariableCollection.Clear">
            <summary>
            Removes all Variable objects from the collection.
            </summary>
        </member>
        <member name="M:Dart.Snmp.VariableCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the objects in the collection.
            </summary>
            <returns>An IEnumerator for the collection.</returns>
        </member>
        <member name="M:Dart.Snmp.VariableCollection.Insert(System.Int32,Dart.Snmp.Variable)">
            <summary>
            Adds a Variable to the collection at the specified index.
            </summary>
            <param name="index">The 0 based index where the Variable is to be inserted.</param>
            <param name="variable">A Variable to be inserted.</param>
            <remarks>
            <para>
            If index equals <see cref="P:Dart.Snmp.VariableCollection.Count"/>, the variable is appended to the list.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.VariableCollection.Remove(Dart.Snmp.Variable)">
            <summary>
            Removes the first occurrence of the provided variable from the collection.
            </summary>
            <param name="variable">An instance of the Variable to remove.</param>
        </member>
        <member name="M:Dart.Snmp.VariableCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to a specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index within the array to start copying.</param>
        </member>
        <member name="M:Dart.Snmp.VariableCollection.GetByNodeName(System.Enum)">
            <summary>
            Returns the Variable(s) that match the specified NodeName.
            </summary>
            <param name="nodeName">NodeName of the desired Variable(s).</param>
            <returns>An array of Variables that match the specified NodeName.</returns>
            <remarks>
            <para>
            Intrinsic node names are provided by the <see cref="T:Dart.Snmp.NodeName"/> enumeration. Node names from imported MIB code files 
            are provided by the code file's Mib.NodeName enumeration. Use <see cref="M:Dart.Snmp.VariableCollection.GetByName(System.String)"/> when using MIB files loaded at runtime.
            </para>
            <para>Returns an empty array if the receiving Agent or Manager's <see cref="F:Dart.Snmp.SnmpBase.Mib">Mib</see> does not contain a MibNode definition for the specified NodeName.</para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.VariableCollection.GetByName(System.String)">
            <summary>
            Returns the Variable(s) that match the specified MibNode name.
            </summary>
            <param name="name">MibNode name of the desired Variable(s).</param>
            <returns>An array of Variables that match the specified MibNode name.</returns>
            <remarks>
            <para>Compatible with MibNode names from dynamically loaded MIBs.</para>
            <para>Returns an empty array if the receiving Agent or Manager's <see cref="F:Dart.Snmp.SnmpBase.Mib">Mib</see> does not contain a MibNode definition for the specified MibNode name.</para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.VariableCollection.GetByOid(System.String)">
            <summary>
            Returns the Variable(s) that match the specified OID.
            </summary>
            <param name="oid">OID of the desired Variable(s).</param>
            <returns>An array of Variables that match the specified OID.</returns>
        </member>
        <member name="M:Dart.Snmp.VariableCollection.GetByIid(System.String)">
            <summary>
            Returns the Variable(s) that match the specified IID.
            </summary>
            <param name="iid">IID of the desired Variable(s).</param>
            <returns>An array of Variables that match the specified IID.</returns>
        </member>
        <member name="M:Dart.Snmp.VariableCollection.GetByMibNode(Dart.Snmp.MibNode)">
            <summary>
            Returns the Variable(s) that match the specified MibNode.
            </summary>
            <param name="node">MibNode defining the desired Variable(s).</param>
            <returns>An array of Variables that match the specified MibNode.</returns>
            <remarks>Returns an empty array if the receiving Agent or Manager's <see cref="F:Dart.Snmp.SnmpBase.Mib">Mib</see> does not contain the MibNode definition for the specified MibNode.</remarks>
        </member>
        <member name="P:Dart.Snmp.VariableCollection.Count">
            <summary>
            Gets the number of variables in the collection.
            </summary>
            <value>Returns the number of variables in the collection.</value>
        </member>
        <member name="P:Dart.Snmp.VariableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Variable at the specified index.
            </summary>
            <param name="index">The location within the collection.</param>
            <remarks>
            <para>
            This function performs a linear search of all elements in the collection.  
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than 0 or greater than <see cref="P:Dart.Snmp.VariableCollection.Count"/>.</exception>
            <returns>The Variable at the specified location.</returns>
        </member>
        <member name="P:Dart.Snmp.VariableCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="P:Dart.Snmp.VariableCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe). 
            </summary>
        </member>
        <member name="T:Dart.Snmp.DeliveryStatus">
            <summary>
            Enumerates a value that indicates the last action performed on the encoded message.
            </summary>
        </member>
        <member name="F:Dart.Snmp.DeliveryStatus.None">
            <summary>
            The message has been neither sent nor received. <see cref="P:Dart.Snmp.MessageBase.Origin"/> and <see cref="P:Dart.Snmp.MessageBase.Destination"/> are null.
            </summary>
        </member>
        <member name="F:Dart.Snmp.DeliveryStatus.Received">
            <summary>
            The message was received from <see cref="P:Dart.Snmp.MessageBase.Origin"/>.
            </summary>
        </member>
        <member name="F:Dart.Snmp.DeliveryStatus.Sent">
            <summary>
            The message was sent to <see cref="P:Dart.Snmp.MessageBase.Destination"/>.
            </summary>
        </member>
        <member name="T:Dart.Snmp.ErrorCode">
            <summary>
            Defines the possible ErrorCode values returned in DecodingException.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorCode.DecryptionFailed">
            <summary>
            An general error occurred while decrypting a message.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorCode.IncompleteMessage">
            <summary>
            The buffer does not contain a complete message.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorCode.InvalidLength">
            <summary>
            The encoded length is not the expected size for the tagged type being decoded.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorCode.InvalidIdEncoding">
            <summary>
            An error occurred while decoding an IID or OID.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorCode.InvalidSecurityFlag">
            <summary>
            An invalid security flag was received within the context of an SNMP message.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorCode.TagNotSupported">
            <summary>
            An undefined tag value was decoded.
            </summary>
        </member>
        <member name="T:Dart.Snmp.Usage">
            <summary>
            Indicates the Usage of each class derived from <see cref="T:Dart.Snmp.MibNode"/>.
            </summary>
            <remarks>
            <para>
            Identifier:
            <list type="bullet">
            <item>The Oid property returns the Object Identifier (OID) of the MibNode, but no Instance Identifier (IID) is valid for this node.</item>
            <item>MibNode objects of this Usage will normally have values for <see cref="F:Dart.Snmp.MibNode.Oid"/>, <see cref="F:Dart.Snmp.MibDefinition.Module"/> and <see cref="F:Dart.Snmp.MibDefinition.Name"/>.</item>
            </list>
            </para>
            <para>
            Object:
            <list type="bullet">
            <item>
            The Instance Identifier (IID) of the scalar object is generated by adding a ".0" suffix to the OID.
            </item>
            <item>
            MibNode objects of this usage will normally have values for <see cref="F:Dart.Snmp.MibNode.Oid"/>, 
            <see cref="F:Dart.Snmp.MibNode.Usage"/>, <see cref="F:Dart.Snmp.MibNode.Access"/>, <see cref="F:Dart.Snmp.MibNode.Status"/>, 
            <see cref="F:Dart.Snmp.MibDefinition.Description"/>, <see cref="F:Dart.Snmp.MibDefinition.Name"/>, <see cref="F:Dart.Snmp.MibDefinition.Module"/> and 
            <see cref="F:Dart.Snmp.MibNode.ValueType"/>.
            </item>
            </list>
            </para>
            <para>
            Table:
            <list type="bullet">
            <item>
            When Usage evaluates to Usage.Table, Access is Access.NotAccessible, indicating the instance is not accessible.
            </item>
            <item>
            MibNode objects of this type will normally have values for <see cref="F:Dart.Snmp.MibNode.Oid"/>, 
            <see cref="F:Dart.Snmp.MibNode.Usage"/>, <see cref="F:Dart.Snmp.MibNode.Access"/>, <see cref="F:Dart.Snmp.MibNode.Status"/>, 
            <see cref="F:Dart.Snmp.MibDefinition.Description"/>, <see cref="F:Dart.Snmp.MibDefinition.Name"/>, <see cref="F:Dart.Snmp.MibDefinition.Module"/> 
            and <see cref="F:Dart.Snmp.MibNode.ValueType"/>.
            </item>
            </list>
            </para>
            <para>
            TableEntry:
            <list type="bullet">
            <item>
            When Usage evaluates to Usage.TableEntry, Access is Access.NotAccessible, indicating the instance is not accessible.
            </item>
            <item>
            MibNode objects of this type will normally have values for <see cref="F:Dart.Snmp.MibNode.Oid"/>, 
            <see cref="F:Dart.Snmp.MibNode.Usage"/>, <see cref="F:Dart.Snmp.MibNode.Access"/>, <see cref="F:Dart.Snmp.MibNode.Status"/>, 
            <see cref="F:Dart.Snmp.MibDefinition.Description"/>, <see cref="F:Dart.Snmp.MibDefinition.Name"/>, <see cref="F:Dart.Snmp.MibNode.Index"/>, 
            <see cref="F:Dart.Snmp.MibDefinition.Module"/> and <see cref="F:Dart.Snmp.MibNode.ValueType"/>.
            </item>
            </list>
            </para>
            <para>
            TableColumn:
            <list type="bullet">
            <item>
            The Instance Identifier (IID) of a table cell is generated by appending an indexer (that is specific to the definition of the corresponding table entry) to the OID.
            </item>
            <item>
            MibNode objects of this type will normally have values for <see cref="F:Dart.Snmp.MibNode.Oid"/>, 
            <see cref="F:Dart.Snmp.MibNode.Usage"/>, <see cref="F:Dart.Snmp.MibNode.Access"/>, <see cref="F:Dart.Snmp.MibNode.Status"/>, 
            <see cref="F:Dart.Snmp.MibDefinition.Description"/>, <see cref="F:Dart.Snmp.MibDefinition.Name"/>, <see cref="F:Dart.Snmp.MibDefinition.Module"/> and 
            <see cref="F:Dart.Snmp.MibNode.ValueType"/>.
            </item>
            </list>
            </para>
            <para>
            Group:
            <list type="bullet">
            <item>
            The Instance Identifier (IID) is generated by appending a ".0" to the OID.
            </item>
            <item>
            MibNode objects of this type will normally have values for <see cref="F:Dart.Snmp.MibNode.Oid"/>, 
            <see cref="F:Dart.Snmp.MibNode.Usage"/>, <see cref="F:Dart.Snmp.MibDefinition.Name"/>, <see cref="F:Dart.Snmp.MibDefinition.Description"/>,
            <see cref="F:Dart.Snmp.MibDefinition.Module"/>, <see cref="F:Dart.Snmp.MibNode.Objects"/> (if an OBJECT-GROUP) and 
            <see cref="F:Dart.Snmp.MibNode.Notifications"/> (if a NOTIFICATION-GROUP).
            </item>
            </list>
            </para>
            <para>
            Notification:
            <list type="bullet">
            <item>
            The Instance Identifier (IID) is generated by appending a ".0" to the OID.
            </item>
            <item>
            MibNode objects of this type will normally have values for <see cref="F:Dart.Snmp.MibNode.Oid"/>, 
            <see cref="F:Dart.Snmp.MibNode.Usage"/>, <see cref="F:Dart.Snmp.MibNode.Status"/>, <see cref="F:Dart.Snmp.MibDefinition.Description"/>, 
            <see cref="F:Dart.Snmp.MibDefinition.Name"/>, <see cref="F:Dart.Snmp.MibDefinition.Module"/> and <see cref="F:Dart.Snmp.MibNode.Objects"/>.
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:Dart.Snmp.Usage.Identifier">
            <summary>
            The MibNode does not identify an object, but is a node that identifies a branch of the MIB tree.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Usage.Object">
            <summary>
            The MibNode is an OBJECT-TYPE, but is not a Usage.Table, Usage.TableEntry, or Usage.TableColumn.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Usage.Table">
            <summary>
            The MibNode is an OBJECT-TYPE that parsing has determined to be a table.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Usage.TableEntry">
            <summary>
            The MibNode is an OBJECT-TYPE that parsing has determined to be a table entry that describes a row.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Usage.TableColumn">
            <summary>
            The MibNode is an OBJECT-TYPE that parsing has determined to be a table column.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Usage.Group">
            <summary>
            The MibNode is a OBJECT-GROUP or NOTIFICATION-GROUP.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Usage.Notification">
            <summary>
            The MibNode is a NOTIFICATION-TYPE.
            </summary>
        </member>
        <member name="T:Dart.Snmp.ReportType">
            <summary>
            Defines the possible values of <see cref="P:Dart.Snmp.ReportMessage.Type"/> and <see cref="P:Dart.Snmp.Security.ReportFlag"/>.
            </summary>
            <remarks>
            <para>
            When decoding a request into a <see cref="T:Dart.Snmp.RequestMessage"/>, an agent may need to send a ReportMessage to the requestor. The logic proceeds as follows to set <see cref="P:Dart.Snmp.Security.ReportFlag"/>:
            <list type="bullet">
            <item>if no engine id is in the packet (or it doesn't match the authoritative engine's id), UnknownEngineId is used, otherwise</item>
            <item>if the username in the packet doesn't match a username in the authoritative engine's, UnknownUsername is used, otherwise</item>
            <item>if authentication is specified and the included engine time or boots doesn't match the authoritative engine's, NotInTimwWindow is used, otherwise</item>
            <item>if the packet security level doesn't match the username's security level in the authoritative engine, UnsupportedSecurityLevel is used, otherwise</item>
            <item>if authentication is specified and the computed digest does not match the packet's digest, AuthenticationFailed is used, otherwise</item>
            <item>if privacy is specified and decryption fails, DecryptionFailed is used, otherwise</item>
            <item>if privacy is specified and decryption succeeds without producing a valid PDU, BadPrivacyPassword is used, otherwise</item>
            <item>None is used, which indicates a ResponseMessage should be generated for the request.</item>
            </list>
            </para>
            <para>
            When creating a ResponseMessage, <see cref="M:Dart.Snmp.SnmpBase.CreateResponse(Dart.Snmp.RequestMessage)"/> will key on the request's <see cref="P:Dart.Snmp.Security.ReportFlag"/> to create a ReportMessage that should be sent to the requestor. 
            When the ReportFlag is not ReportType.None, the ReportMessage will be generated as follows:
            <list type="table">
            <item><term>AuthenticationFailed</term><description>A usmStatsWrongDigests Variable will be included.</description></item>
            <item><term>UnknownUsername</term><description>A usmStatsUnknownUserNames Variable will be included.</description></item>
            <item><term>NotInTimeWindow</term><description>A usmStatsNotInTimeWindows Variable will be included. Typically used to "discover" the engine time and boot values.</description></item>
            <item><term>DecryptionFailed</term><description>A usmStatsDecryptionErrors Variable will be included.</description></item>
            <item><term>UnknownEngineId</term><description>A usmStatsUnknownEngineIds Variable will be included. Typically used to "discover" the engine ID.</description></item>
            <item><term>UnsupportedSecurityLevel</term><description>A usmStatsUnsupportedSecLevels Variable will be included.</description></item>
            <item><term>BadPrivacyPassword</term><description><see cref="M:Dart.Snmp.SnmpBase.CreateResponse(Dart.Snmp.RequestMessage)"/> will return null. No response should be generated when the configured password cannot decrypt the PDU.</description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:Dart.Snmp.ReportType.None">
            <summary>
            When used in <see cref="P:Dart.Snmp.ReportMessage.Type"/>, indicates the first variable is an unknown IID.
            When used in <see cref="P:Dart.Snmp.Security.ReportFlag"/>, indicates no <see cref="T:Dart.Snmp.ReportMessage"/> should be generated (<see cref="M:Dart.Snmp.SnmpBase.CreateResponse(Dart.Snmp.RequestMessage)"/> should create a ResponseMessage).
            </summary>
        </member>
        <member name="F:Dart.Snmp.ReportType.AuthenticationFailed">
            <summary>
            Digest included in packet did not match the computed digest.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ReportType.UnknownUsername">
            <summary>
            The Username in the request was not found in <see cref="F:Dart.Snmp.AuthoritativeEngine.Users"/>.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ReportType.NotInTimeWindow">
            <summary>
            Packet time or boots is outside the 150 sec. time window defined by the authoritative engine.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ReportType.DecryptionFailed">
            <summary>
            Message Privacy failed, likely due to a mismatch in PrivacyProtocol used.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ReportType.UnknownEngineId">
            <summary>
            Packet contains an unknown EngineId. The authoritative engine's <see cref="F:Dart.Snmp.Engine.Id"/> does not match the one found in the packet.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ReportType.UnsupportedSecurityLevel">
            <summary>
            Packet contains a security level that does not match the security level of the username in the authoritative engine.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ReportType.BadPrivacyPassword">
            <summary>
            Privacy password failed to decrypt packet.
            </summary>
        </member>
        <member name="T:Dart.Snmp.SnmpVersion">
            <summary>
            Defines the possible Version values in <see cref="T:Dart.Snmp.MessageBase"/>.
            </summary>
        </member>
        <member name="F:Dart.Snmp.SnmpVersion.One">
            <summary>
            Snmp Version 1.
            </summary>
        </member>
        <member name="F:Dart.Snmp.SnmpVersion.Two">
            <summary>
            Snmp Version 2c.
            </summary>
        </member>
        <member name="F:Dart.Snmp.SnmpVersion.Three">
            <summary>
            Snmp Version 3.
            </summary>
        </member>
        <member name="T:Dart.Snmp.ErrorStatus">
            <summary>
            Defines the possible values returned in <see cref="P:Dart.Snmp.ResponseMessage.ErrorStatus"/>
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorStatus.Success">
            <summary>
            No error. ErrorIndex will be -1.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorStatus.TooBig">
            <summary>
            The size of the response is too big to send.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorStatus.NoSuchName">
            <summary>
            The requested variable was not found.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorStatus.BadValue">
            <summary>
            The value of a variable had a bad value.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorStatus.ReadOnly">
            <summary>
            A set request was attempted for a read-only variable.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorStatus.GeneralError">
            <summary>
            An error with no specific ErrorStatus value occurred.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorStatus.NoAccess">
            <summary>
            Access was denied to the variable for security reasons.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorStatus.WrongType">
            <summary>
            A variable type was incorrect.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorStatus.WrongLength">
            <summary>
            The length specified for a variable binding was incorrect.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorStatus.WrongEncoding">
            <summary>
            The encoding for a variable binding was incorrect.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorStatus.WrongValue">
            <summary>
            The value of the variable was incorrect.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorStatus.NoCreation">
            <summary>
            A variable does not exist and cannot be created.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorStatus.InconsistentValue">
            <summary>
            The value specified for a variable is valid but cannot be assigned at this time.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorStatus.ResourceUnavailable">
            <summary>
            An unavailable resource caused a variable set to fail.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorStatus.CommitFailed">
            <summary>
            An attempt to set a variable failed.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorStatus.UndoFailed">
            <summary>
            An attempt to set one variable in a group failed, and the attempt to undo other successful sets failed.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorStatus.AuthorizationError">
            <summary>
            An authorization problem occurred. ErrorIndex of -1 indicates a PDU authorization error.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorStatus.NotWritable">
            <summary>
            The variable is not accessible or cannot be written to.
            </summary>
        </member>
        <member name="F:Dart.Snmp.ErrorStatus.InconsistentName">
            <summary>
            A specified variable does not exist.
            </summary>
        </member>
        <member name="T:Dart.Snmp.Access">
            <summary>
            Defines the operation allowed to a MibNode object.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Access.Uninitialized">
            <summary>
            The value has not been set.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Access.NotAccessible">
            <summary>
            Variable is not accessible for get/set operations.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Access.ReadOnly">
            <summary>
            Variable is only accessible for get operations.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Access.WriteOnly">
            <summary>
            Variable is only accessible for set operations.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Access.ReadWrite">
            <summary>
            Variable is accessible for get/set operations.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Access.AccessibleForNotify">
            <summary>
            Value may be sent via trap notification only.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Access.ReadCreate">
            <summary>
            Variable is accessible for get/set/create operations.
            </summary>
        </member>
        <member name="T:Dart.Snmp.Status">
            <summary>
            Defines the current implementation status of the MibNode object.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Status.Uninitialized">
            <summary>
            The value has not been set.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Status.Current">
            <summary>
            The variable is currently in use.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Status.Mandatory">
            <summary>
            The Agent is required to implement the variable.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Status.Optional">
            <summary>
            The Agent is not required to implement the variable.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Status.Obsolete">
            <summary>
            The variable is no longer used.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Status.Deprecated">
            <summary>
            The variable has been replaced by another definition.
            </summary>
        </member>
        <member name="T:Dart.Snmp.Language">
            <summary>
            Defines the programming language used to output generated classes that derive from MibNode.
            </summary>
            <remarks>
            <para>Pass the appropriate value into MiNodes.GenerateCode() to select the desired output code language. </para>
            </remarks>
        </member>
        <member name="F:Dart.Snmp.Language.CSharp">
            <summary>
            Selects C# as the output code language.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Language.VisualBasic">
            <summary>
            Selects Visual Basic as the output code language.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Language.Cpp">
            <summary>
            Selects C++ as the output code language.
            </summary>
        </member>
        <member name="T:Dart.Snmp.AuthenticationProtocol">
            <summary>
            Defines the algorithm to be used for Version 3 message authentication.
            </summary>
        </member>
        <member name="F:Dart.Snmp.AuthenticationProtocol.None">
            <summary>
            No authentication is desired.
            </summary>
        </member>
        <member name="F:Dart.Snmp.AuthenticationProtocol.Md5">
            <summary>
            Selects the MD5 algorithm to perform message authentication.
            </summary>
        </member>
        <member name="F:Dart.Snmp.AuthenticationProtocol.Sha">
            <summary>
            Selects the SHA-1 algorithm to perform message authentication. This is FIPS-140 compliant.
            </summary>
        </member>
        <member name="T:Dart.Snmp.PrivacyProtocol">
            <summary>
            Defines the algorithm to be used for Version 3 message encryption.
            </summary>
            <remarks>
            Cisco-specific extensions are used for 3-DES, AES 192-bit and AES 256-bit encryption.
            </remarks>
        </member>
        <member name="F:Dart.Snmp.PrivacyProtocol.None">
            <summary>
            No encryption/decryption is desired.
            </summary>
        </member>
        <member name="F:Dart.Snmp.PrivacyProtocol.Des">
            <summary>
            Selects the DES algorithm to perform message encryption.
            </summary>
        </member>
        <member name="F:Dart.Snmp.PrivacyProtocol.TripleDes">
            <summary>
            Selects the Triple DES algorithm to perform message encryption. This is FIPS-140 compliant.
            </summary>
        </member>
        <member name="F:Dart.Snmp.PrivacyProtocol.Aes128">
            <summary>
            Selects the AES128 algorithm to perform message encryption.
            </summary>
        </member>
        <member name="F:Dart.Snmp.PrivacyProtocol.Aes192">
            <summary>
            Selects the AES192 algorithm to perform message encryption.
            </summary>
        </member>
        <member name="F:Dart.Snmp.PrivacyProtocol.Aes256">
            <summary>
            Selects the AES256 algorithm to perform message encryption.
            </summary>
        </member>
        <member name="T:Dart.Snmp.SecurityLevel">
            <summary>
            Represents the security level specified in an SNMPv3 message.
            </summary>
        </member>
        <member name="F:Dart.Snmp.SecurityLevel.None">
            <summary>
            No authentication or privacy.
            </summary>
        </member>
        <member name="F:Dart.Snmp.SecurityLevel.AuthOnly">
            <summary>
            Authentication only.
            </summary>
        </member>
        <member name="F:Dart.Snmp.SecurityLevel.AuthPriv">
            <summary>
            Authentication and privacy (encryption).
            </summary>
        </member>
        <member name="T:Dart.Snmp.DecodingException">
            <summary>
            A DecodingException is thrown when there is an error decoding the encoded message.
            </summary>
            <remarks>
            <para>
            <see cref="F:Dart.Snmp.DecodingException.ErrorCode"/> contains a value that represents a reason for the failure and 
            <see cref="P:System.Exception.Message"/> contains a human readable error message.  
            The bytes of the message that causes the exception can be examined using <see cref="F:Dart.Snmp.DecodingException.EncodedMessage"/>, 
            while the offset into the message indicating where the problem occurred is <see cref="F:Dart.Snmp.DecodingException.Offset"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Dart.Snmp.DecodingException.ErrorCode">
            <summary>
            Gets the ErrorCode encountered while decoding an encoded message.
            </summary>
            <remarks>
            <para>
            This field is read-only.
            </para>
            </remarks>
            <value>The ErrorCode encountered while decoding an encoded message.</value>
        </member>
        <member name="F:Dart.Snmp.DecodingException.Offset">
            <summary>
            Gets the offset into the buffer where the error occurred.
            </summary>
            <remarks>
            <para>
            This field is read-only.
            </para>
            </remarks>
        </member>
        <member name="F:Dart.Snmp.DecodingException.Origin">
            <summary>
            Gets the address of the sender of the message.
            </summary>
            <remarks>
            <para>
            May be null if the message was created from a byte stream, otherwise Origin contains the IP address 
            and port of the agent or manager that sent the message.
            </para>
            <para>
            This field is read-only.
            </para>
            </remarks>
            <value>The address of the sender of the message.</value>
        </member>
        <member name="F:Dart.Snmp.DecodingException.Id">
            <summary>
            Gets the message Id from the security header.
            </summary>
            <remarks>
            <para>
            This field is read-only.
            </para>
            </remarks>
        </member>
        <member name="F:Dart.Snmp.DecodingException.Username">
            <summary>
            Gets the user name from the security header.
            </summary>
            <remarks>
            <para>
            This field is read-only.
            </para>
            </remarks>
        </member>
        <member name="F:Dart.Snmp.DecodingException.EncodedMessage">
            <summary>
            Gets the encoded bytes of the message.
            </summary>
            <remarks>
            <para>
            Use DecodingException.Offset to determine what part of the encoded message caused the exception to be thrown.
            </para>
            <para>
            This field is read-only.
            </para>
            </remarks>
            <value>A byte array that contains the encoded bytes of the message.</value>
        </member>
        <member name="T:Dart.Snmp.Manager">
            <summary>
            Specializes packet communications for the transport of SNMP messages between managers and agents.
            </summary>
            <example>
        The following example demonstrates sending an SNMPv1 Get request to an agent and receiving the response.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Create and send request on a worker thread
            manager1.Start(manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact));
        }

        private void button2_Click(object sender, EventArgs e)
        {
            //If you don't have the MIB, retrieve the value by IID:
            manager1.Start(manager1_SendGetRequest, new Variable("1.3.6.1.2.1.1.4.0"));
        }

        private void manager1_SendGetRequest(SnmpSocket managerSocket, object state)
        {
            //Create Get Request
            GetMessage request = new GetMessage();
            request.Variables.Add(state as Variable);

            //Send request and get response
            ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

            //Marshal response to the UI thread using the Message event
            manager1.Marshal(new ResponseMessage[] { response }, "", null);
        }

        private void manager1_Message(object sender, MessageEventArgs e)
        {
            //Display info about the first variable in the response, and its value
            Variable vari = e.Messages[0].Variables[0];
            label1.Text += vari.Definition.ToString() + vari.Value.ToString() + "\r\n";
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create and send request on a worker thread
            manager1.Start(AddressOf manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact))
        End Sub

        Private Sub button2_Click(ByVal sender As Object, ByVal e As EventArgs)
            'If you don't have the MIB, retrieve the value by IID:
            manager1.Start(AddressOf manager1_SendGetRequest, New Variable("1.3.6.1.2.1.1.4.0"))
        End Sub

        Private Sub manager1_SendGetRequest(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Create Get Request
            Dim request As New GetMessage()
            request.Variables.Add(TryCast(state, Variable))

            'Send request and get response
            Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

            'Marshal response to the UI thread using the Message event
            manager1.Marshal(New ResponseMessage() { response }, "", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
            'Display info about the first variable in the response, and its value
            Dim vari As Variable = e.Messages(0).Variables(0)
            label1.Text &amp;= vari.Definition.ToString() &amp; vari.Value.ToString() &amp; vbCrLf
        End Sub
        </code>
      </example>
        </member>
        <member name="F:Dart.Snmp.Manager.DefaultPort">
            <summary>
            The "well-known" default port for accepting trap and inform message notifications.
            </summary>
            <value>162</value>
        </member>
        <member name="M:Dart.Snmp.Manager.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates a new instance of the Manager class.
            </summary>
            <param name="container">An object that implements IContainer. 
            The Manager component adds itself to this container so it can be disposed of.</param>
        </member>
        <member name="M:Dart.Snmp.Manager.#ctor">
            <summary>
            Creates a new instance of the Manager class.
            </summary>
        </member>
        <member name="M:Dart.Snmp.Manager.Start(Dart.Snmp.NotificationReceived,System.Object)">
            <summary>
            Creates a socket and starts reading asynchronously. The specified user method executes on an IO Completion thread as each 
            <see cref="T:Dart.Snmp.Trap1Message"/>, <see cref="T:Dart.Snmp.Trap2Message"/> or <see cref="T:Dart.Snmp.InformMessage"/> is received.
            </summary>
            <param name="callback">
            A <see cref="T:Dart.Snmp.NotificationReceived">NotificationReceived</see> delegate specifying the method to execute when a message is received.
            </param>
            <param name="state">Object to pass to the callback method; can be null.</param>
            <remarks>
            <para>
            This method presents all SNMP messages that may be received by a Manager.
            The socket is bound to the default IPv4 interface and port 162. 
            </para>
            <para>
            This method always creates a new <see cref="P:Dart.Snmp.SocketBase.Socket"/>. Use multiple <see cref="T:Dart.Snmp.Manager"/> instances to accept traps on multiple sockets.
            </para>
            <para>
            If an InformMessage is received (from another manager or an agent), use <see cref="M:Dart.Snmp.SnmpBase.Send(Dart.Snmp.MessageBase,System.Net.IPEndPoint)"/> to send the expected ResponseMessage.
            No response is expected when a trap is received.
            </para>
            <para>
            Unhandled exceptions occurring on the worker thread will be caught and reported by the 
            <see cref="E:Dart.Snmp.ComponentBase.Error">Error</see> event.
            </para>
            <para>
            Scripting applications should use <see cref="M:Dart.Snmp.SnmpBase.Receive"/> instead.
            </para>
            </remarks>
            <example>
        The following example demonstrates receiving notifications (Trap1, Trap2 and Inform messages), and responding to Inform messages.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Start listening for notifications
            manager1.Start(manager1_NotificationReceived, null);
        }

        private void manager1_NotificationReceived(Manager manager, MessageBase message, object state)
        {
            //Marshal message to the UI thread using the Message event
            if (message is Trap1Message)
                manager.Marshal(new MessageBase[] { message }, "trap1", null);
            else if (message is Trap2Message)
                manager.Marshal(new MessageBase[] { message }, "trap2", null);
            else if (message is InformMessage)
            {
                manager.Marshal(new MessageBase[] { message }, "inform", null);

                //Send response to inform message origin
                manager.Send(new ResponseMessage(message as InformMessage, null), message.Origin);
            }
        }

        private void manager1_Message(object sender, MessageEventArgs e)
        {
            //Update interface according to message type received
            switch (e.Message)
            {
                case "trap1":
                    Trap1Message trap = e.Messages[0] as Trap1Message;
                    label1.Text = "Trap1 received with Enterprise(" + trap.Enterprise + "), Generic Type (" +
                    trap.GenericTrap.ToString() + "), Specific Type(" + trap.SpecificTrap.ToString() + ")";
                    break;
                case "trap2":
                    Trap2Message notification = e.Messages[0] as Trap2Message;
                    label2.Text = "Trap2 received with OID (" + notification.Oid + ")";
                    break;
                case "inform":
                    InformMessage inform = e.Messages[0] as InformMessage;
                    label3.Text = "Inform received with " + inform.Variables.Count.ToString() + " variable(s).";
                    break;
            }
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Start listening for notifications
            manager1.Start(AddressOf manager1_NotificationReceived, Nothing)
        End Sub

        Private Sub manager1_NotificationReceived(ByVal manager As Manager, ByVal message As MessageBase, ByVal state As Object)
            'Marshal message to the UI thread using the Message event
            If TypeOf message Is Trap1Message Then
                manager.Marshal(New MessageBase() { message }, "trap1", Nothing)
            ElseIf TypeOf message Is Trap2Message Then
                manager.Marshal(New MessageBase() { message }, "trap2", Nothing)
            ElseIf TypeOf message Is InformMessage Then
                manager.Marshal(New MessageBase() { message }, "inform", Nothing)

                'Send response to inform message origin
                manager.Send(New ResponseMessage(TryCast(message, InformMessage), Nothing), message.Origin)
            End If
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
            'Update interface according to message type received
            Select Case e.Message
                Case "trap1"
                    Dim trap As Trap1Message = TryCast(e.Messages(0), Trap1Message)
                    label1.Text = "Trap1 received with Enterprise(" &amp; trap.Enterprise &amp; "), Generic Type (" &amp; trap.GenericTrap.ToString() &amp; "), Specific Type(" &amp; trap.SpecificTrap.ToString() &amp; ")"
                Case "trap2"
                    Dim notification As Trap2Message = TryCast(e.Messages(0), Trap2Message)
                    label2.Text = "Trap2 received with OID (" &amp; notification.Oid &amp; ")"
                Case "inform"
                    Dim inform As InformMessage = TryCast(e.Messages(0), InformMessage)
                    label3.Text = "Inform received with " &amp; inform.Variables.Count.ToString() &amp; " variable(s)."
            End Select
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.Manager.Start(Dart.Snmp.NotificationReceived,System.Net.IPEndPoint,System.Boolean,System.Object)">
            <summary>
            Creates a socket and starts reading asynchronously. The specified user method executes on an IO Completion thread as each 
            <see cref="T:Dart.Snmp.Trap1Message"/>, <see cref="T:Dart.Snmp.Trap2Message"/> or <see cref="T:Dart.Snmp.InformMessage"/> is received.
            </summary>
            <param name="callback">
            A <see cref="T:Dart.Snmp.NotificationReceived">NotificationReceived</see> delegate specifying the method to execute when a message is received.
            </param>
            <param name="localEP">The local <see cref="T:System.Net.IPEndPoint">IPEndPoint</see> the socket will bind to. Use port 162 for most applications.
            An IPv6 IPEndPoint is necessary to receive IPv6 traps.</param>
            <param name="acceptBroadcast">Indicates whether the Manager should accept requests that are broadcast to the network. Must be false when using a dual mode socket.</param>
            <param name="state">Object to pass to the callback method; can be null.</param>
            <remarks>
            <para>
            This method presents all asynchronous messages that may be received by a Manager. 
            The localEP.AddressFamily must match the AddressFamily of the intended source of each message, unless using a dual mode socket.
            </para>
            <para>
            If dual mode (simultaneous IPv4 and IPv6) socket operation is desired localEP address must be IPAddress.IPv6Any or an IPv6-mapped IPv4 address 
            and the dualMode parameter must be true. An IPv4-mapped IPv6 address is the IPv4 address of the machine preceded by "::ffff:". Ex: ::ffff:192.168.1.1.
            </para>
            <para>
            If an IPv4-mapped IPv6 socket is used then acceptBroadcast must be false. If accepting broadcast packets is required in dual mode, IPAddress.IPv6Any must be used.
            </para>
            <para>
            This method always creates a new <see cref="P:Dart.Snmp.SocketBase.Socket"/>. Use multiple <see cref="T:Dart.Snmp.Manager"/> instances to accept traps on multiple sockets, or to
            accept both IPv4 and IPv6 traps.
            </para>
            <para>
            If an InformMessage is received (from another manager or an agent), use <see cref="M:Dart.Snmp.SnmpBase.Send(Dart.Snmp.MessageBase,System.Net.IPEndPoint)"/> to send the expected ResponseMessage.
            No response is expected when a trap is received.
            </para>
            <para>
            Unhandled exceptions occurring on the worker thread will be caught and reported by the 
            <see cref="E:Dart.Snmp.ComponentBase.Error">Error</see> event.
            </para>
            <para>
            Scripting applications should use <see cref="M:Dart.Snmp.SnmpBase.Receive"/> instead.
            </para>
            </remarks>
            <example>
        The following example demonstrates receiving notifications (Trap1, Trap2 and Inform messages), and responding to Inform messages.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Start listening for notifications
            manager1.Start(manager1_NotificationReceived, null);
        }

        private void manager1_NotificationReceived(Manager manager, MessageBase message, object state)
        {
            //Marshal message to the UI thread using the Message event
            if (message is Trap1Message)
                manager.Marshal(new MessageBase[] { message }, "trap1", null);
            else if (message is Trap2Message)
                manager.Marshal(new MessageBase[] { message }, "trap2", null);
            else if (message is InformMessage)
            {
                manager.Marshal(new MessageBase[] { message }, "inform", null);

                //Send response to inform message origin
                manager.Send(new ResponseMessage(message as InformMessage, null), message.Origin);
            }
        }

        private void manager1_Message(object sender, MessageEventArgs e)
        {
            //Update interface according to message type received
            switch (e.Message)
            {
                case "trap1":
                    Trap1Message trap = e.Messages[0] as Trap1Message;
                    label1.Text = "Trap1 received with Enterprise(" + trap.Enterprise + "), Generic Type (" +
                    trap.GenericTrap.ToString() + "), Specific Type(" + trap.SpecificTrap.ToString() + ")";
                    break;
                case "trap2":
                    Trap2Message notification = e.Messages[0] as Trap2Message;
                    label2.Text = "Trap2 received with OID (" + notification.Oid + ")";
                    break;
                case "inform":
                    InformMessage inform = e.Messages[0] as InformMessage;
                    label3.Text = "Inform received with " + inform.Variables.Count.ToString() + " variable(s).";
                    break;
            }
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Start listening for notifications
            manager1.Start(AddressOf manager1_NotificationReceived, Nothing)
        End Sub

        Private Sub manager1_NotificationReceived(ByVal manager As Manager, ByVal message As MessageBase, ByVal state As Object)
            'Marshal message to the UI thread using the Message event
            If TypeOf message Is Trap1Message Then
                manager.Marshal(New MessageBase() { message }, "trap1", Nothing)
            ElseIf TypeOf message Is Trap2Message Then
                manager.Marshal(New MessageBase() { message }, "trap2", Nothing)
            ElseIf TypeOf message Is InformMessage Then
                manager.Marshal(New MessageBase() { message }, "inform", Nothing)

                'Send response to inform message origin
                manager.Send(New ResponseMessage(TryCast(message, InformMessage), Nothing), message.Origin)
            End If
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
            'Update interface according to message type received
            Select Case e.Message
                Case "trap1"
                    Dim trap As Trap1Message = TryCast(e.Messages(0), Trap1Message)
                    label1.Text = "Trap1 received with Enterprise(" &amp; trap.Enterprise &amp; "), Generic Type (" &amp; trap.GenericTrap.ToString() &amp; "), Specific Type(" &amp; trap.SpecificTrap.ToString() &amp; ")"
                Case "trap2"
                    Dim notification As Trap2Message = TryCast(e.Messages(0), Trap2Message)
                    label2.Text = "Trap2 received with OID (" &amp; notification.Oid &amp; ")"
                Case "inform"
                    Dim inform As InformMessage = TryCast(e.Messages(0), InformMessage)
                    label3.Text = "Inform received with " &amp; inform.Variables.Count.ToString() &amp; " variable(s)."
            End Select
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.Manager.Start(Dart.Snmp.NotificationReceived,System.Net.IPEndPoint,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Creates a socket and starts reading asynchronously. The specified user method executes on an IO Completion thread as each 
            <see cref="T:Dart.Snmp.Trap1Message"/>, <see cref="T:Dart.Snmp.Trap2Message"/> or <see cref="T:Dart.Snmp.InformMessage"/> is received.
            </summary>
            <param name="callback">
            A <see cref="T:Dart.Snmp.NotificationReceived">NotificationReceived</see> delegate specifying the method to execute when a message is received.
            </param>
            <param name="localEP">The local <see cref="T:System.Net.IPEndPoint">IPEndPoint</see> the socket will bind to. Use port 162 for most applications.</param>
            <param name="acceptBroadcast">Specifies whether the Manager should accept requests that are broadcast to the network. Must be false when using an IPv4-mapped IPv6 dual mode socket.</param>
            <param name="dualMode">Specifies whether the socket should be a dual mode IPv6 socket. Only supported on Vista and newer operating systems.</param>
            <param name="state">Object to pass to the callback method; can be null.</param>
            <remarks>
            <para>
            This method presents all asynchronous messages that may be received by a Manager.
            </para>
            <para>
            This method always creates a new <see cref="P:Dart.Snmp.SocketBase.Socket"/>. Use multiple <see cref="T:Dart.Snmp.Manager"/> instances to accept traps on multiple specific interfaces, or to
            accept both IPv4 and IPv6 traps on specific interfaces.
            </para>
            <para>
            The localEP.AddressFamily must match the AddressFamily of the expected source of each message, unless dualMode is true and localEP.Address is IPAddress.IPv6Any 
            or an IPv4-mapped IPv6 address. If dual mode (simultaneous IPv4 and IPv6) socket operation is desired, use IPAddress.IPv6Any (for all IPv4 and IPv6 interfaces) or an IPv4-mapped IPv6 
            address for the localEP address, and true for the dualMode argument. An IPv4-mapped IPv6 address is the IPv4 address of a network interface preceded by 
            "::ffff:". Ex: ::ffff:192.168.1.1. If an IPv4-mapped IPv6 address is used then <i>acceptBroadcast</i> must be false. To accept broadcast packets in dual mode, 
            IPAddress.IPv6Any must be used.
            </para>
            <para>
            If an InformMessage is received (from another manager or an agent), use <see cref="M:Dart.Snmp.SnmpBase.Send(Dart.Snmp.MessageBase,System.Net.IPEndPoint)"/> to send the expected ResponseMessage.
            No response is expected when a trap is received.
            </para>
            <para>
            Unhandled exceptions occurring on the worker thread will be caught and reported by the 
            <see cref="E:Dart.Snmp.ComponentBase.Error">Error</see> event.
            </para>
            <para>
            Scripting applications should use <see cref="M:Dart.Snmp.SnmpBase.Receive"/> instead.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.Manager.Marshal(System.String,Dart.Snmp.VariableList,System.String,System.Object)">
            <summary>
            Marshals a list of variables to the UI thread.
            </summary>
            <param name="oid">The root oid used in SnmpSocket.Walk.</param>
            <param name="variables">List of variables to marshal to the UI thread.</param>
            <param name="message">Message to pass into the Walk event.</param>
            <param name="state">Object to pass to the Walk event; can be null.</param>
            <remarks>
            <para>
            This method can be used to marshal a subtree of variables from a worker thread to the UI thread 
            for typical display purposes.
            Calls the <see cref="M:Dart.Snmp.Manager.OnWalk(Dart.Snmp.WalkEventArgs)"/> method, which raises the <see cref="E:Dart.Snmp.Manager.Walk"/> event.
            </para>
                <para>
                See the <see cref="P:Dart.Snmp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
                updating UI controls in your event handler.
                </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.Manager.OnWalk(Dart.Snmp.WalkEventArgs)">
            <summary>
            Raises the <see cref="E:Dart.Snmp.Manager.Walk"/> event.
            </summary>
            <param name="e">A <see cref="T:Dart.Snmp.WalkEventArgs"/> object containing event data.</param>
            <remarks>
            If the Synchronizing property is set, this method asynchronously invokes the event on the UI thread.
            If the Synchronizing property is null, this method invokes the event on the executing thread.
            <para>
            The OnWalk method allows derived classes to handle the event without attaching a delegate, 
            but marshaling is not provided.
            This is the preferred technique for handling the event in a derived class.
            </para>
            <para>
            <b>Note to Inheritors:</b> When overriding this method in a derived class, 
            be sure to call the base class OnTable method, so that registered delegates receive the event. 
            </para>
            <para>
            See the <see cref="P:Dart.Snmp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
            updating UI controls in your event handler.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.Manager.Marshal(System.String,Dart.Snmp.Variable[0:,0:],System.String,System.Object)">
            <summary>
            Marshals an array of table variables to the UI thread.
            </summary>
            <param name="oid">The oid of the table used in SnmpSocket.GetTable.</param>
            <param name="table">Array of table variables to marshal to the UI thread.</param>
            <param name="message">Message to pass into the Table event.</param>
            <param name="state">Object to pass to the Table event; can be null.</param>
            <remarks>
            <para>
            This method can be used to marshal table information from a worker thread to the UI thread 
            for typical display purposes.
            It calls the <see cref="M:Dart.Snmp.Manager.OnTable(Dart.Snmp.TableEventArgs)"/> method, which raises the <see cref="E:Dart.Snmp.Manager.Table"/> event.
            </para>
                <para>
                See the <see cref="P:Dart.Snmp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
                updating UI controls in your event handler.
                </para>
            </remarks>
            <example>
        The following example demonstrates how to retrieve a table using the GetTable method that utilizes GetBulk requests.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Start a worker thread to retrieve and display an SNMP Table
            manager1.Start(getTable, null);
        }

        private void getTable(SnmpSocket managerSocket, object state)
        {
            //Retrieve table using GetTable with 20 max-repetitions (retrieves up to 20 rows)
            Variable[,] table = managerSocket.GetTable(manager1.Mib.GetByNodeName(NodeName.ifTable).Oid, SnmpVersion.Two, "public", null, myAgentAddress, 0, 20);

            //Marshal table to UI thread
            manager1.Marshal(manager1.Mib.GetByNodeName(NodeName.ifTable).Oid, table, "", null);
        }

        private void manager1_Table(object sender, Dart.Snmp.TableEventArgs e)
        {
            //Raised on the UI thread.
            //Populate a ListView control with the table data
            buildTable(e.Table);
        }

        private void buildTable(Variable[,] table)
        {
            //Add columns to the ListView for each column in the table
            for (int i = 0; i &lt; table.GetLength(1); i++)
                lvwTable.Columns.Add(table[0, i].Definition.Name, 150, HorizontalAlignment.Left);

            ListViewItem tableRow;
            int r, c = 0;
            for (r = 0; r &lt; table.GetLength(0); r++)
            {
                //Create a new row and add the first cell
                tableRow = new ListViewItem(table[r, 0].Value.ToString());

                //Add each additional cell in the row
                for (c = 1; c &lt; table.GetLength(1); c++)
                    tableRow.SubItems.Add((table[r, c] == null) ? "NULL" : table[r, c].Value.ToString());

                //Add the row to the listview
                lvwTable.Items.Add(tableRow);
            }
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Start a worker thread to retrieve and display an SNMP Table
            manager1.Start(AddressOf getTable, Nothing)
        End Sub

        Private Sub getTable(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Retrieve table using GetTable with 20 max-repetitions (retrieves up to 20 rows)
            Dim table(,) As Variable = managerSocket.GetTable(manager1.Mib.GetByNodeName(NodeName.ifTable).Oid, SnmpVersion.Two, "public", Nothing, myAgentAddress, 0, 20)

            'Marshal table to UI thread
            manager1.Marshal(manager1.Mib.GetByNodeName(NodeName.ifTable).Oid, table, "", Nothing)
        End Sub

        Private Sub manager1_Table(ByVal sender As Object, ByVal e As Dart.Snmp.TableEventArgs)
            'Raised on the UI thread.
            'Populate a ListView control with the table data
            buildTable(e.Table)
        End Sub

        Private Sub buildTable(ByVal table(,) As Variable)
            'Add columns to the ListView for each column in the table
            For i As Integer = 0 To table.GetLength(1) - 1
                lvwTable.Columns.Add(table(0, i).Definition.Name, 150, HorizontalAlignment.Left)
            Next i

            Dim tableRow As ListViewItem
            Dim r As Integer, c As Integer = 0
            For r = 0 To table.GetLength(0) - 1
                'Create a new row and add the first cell
                tableRow = New ListViewItem(table(r, 0).Value.ToString())

                'Add each additional cell in the row
                For c = 1 To table.GetLength(1) - 1
                    tableRow.SubItems.Add(If(table(r, c) Is Nothing, "NULL", table(r, c).Value.ToString()))
                Next c

                'Add the row to the listview
                lvwTable.Items.Add(tableRow)
            Next r
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.Manager.OnTable(Dart.Snmp.TableEventArgs)">
            <summary>
            Raises the <see cref="E:Dart.Snmp.Manager.Table"/> event.
            </summary>
            <param name="e">A <see cref="T:Dart.Snmp.TableEventArgs"/> object containing event data.</param>
            <remarks>
            If the Synchronizing property is set, this method asynchronously invokes the event on the UI thread.
            If the Synchronizing property is null, this method invokes the event on the executing thread.
            <para>
            The OnTable method allows derived classes to handle the event without attaching a delegate, but marshaling is not provided.
            This is the preferred technique for handling the event in a derived class.
            </para>
            <para>
            <b>Note to Inheritors:</b> When overriding this method in a derived class, 
            be sure to call the base class OnTable method, so that registered delegates receive the event. 
            </para>
            <para>
            See the <see cref="P:Dart.Snmp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
            updating UI controls in your event handler.
            </para>
            </remarks>
        </member>
        <member name="E:Dart.Snmp.Manager.Walk">
            <summary>
            Raised when <see cref="M:Dart.Snmp.Manager.Marshal(System.String,Dart.Snmp.VariableList,System.String,System.Object)"/> is used.
            </summary>
            <remarks>
                See the <see cref="P:Dart.Snmp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
                updating UI controls in your event handler.
            </remarks>
            <example>
        The following example demonstrates how to walk a MIB and display the response variables.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Perform MIB walk on a worker thread
            manager1.Start(walkMib, manager1.Mib.GetByNodeName(NodeName.system).Oid);
        }

        private void walkMib(SnmpSocket managerSocket, object state)
        {
            //The state contains the OID to walk (in this case, the system group)
            string oid = state as string;

            //Walk the MIB from the specified root OID
            VariableList variables = managerSocket.Walk(oid, myAgentAddress);

            //Marshal variables returned to the UI thread using the Walk event
            manager1.Marshal(oid, variables, "", null);
        }

        private void manager1_Walk(object sender, WalkEventArgs e)
        {
            //Populate a treeview control with the returned variables
            e.Variables.Populate(tvwVariables, e.Oid, manager1.Mib);
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Perform MIB walk on a worker thread
            manager1.Start(AddressOf walkMib, manager1.Mib.GetByNodeName(NodeName.system).Oid)
        End Sub

        Private Sub walkMib(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'The state contains the OID to walk (in this case, the system group)
            Dim oid As String = TryCast(state, String)

            'Walk the MIB from the specified root OID
            Dim variables As VariableList = managerSocket.Walk(oid, myAgentAddress)

            'Marshal variables returned to the UI thread using the Walk event
            manager1.Marshal(oid, variables, "", Nothing)
        End Sub

        Private Sub manager1_Walk(ByVal sender As Object, ByVal e As WalkEventArgs)
            'Populate a treeview control with the returned variables
            e.Variables.Populate(tvwVariables, e.Oid, manager1.Mib)
        End Sub
        </code>
      </example>
        </member>
        <member name="E:Dart.Snmp.Manager.Table">
            <summary>
            Raised when a Table (Variable[,]) is marshaled.
            </summary>
            <remarks>
                See the <see cref="P:Dart.Snmp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
                updating UI controls in your event handler.
            </remarks>
        </member>
        <member name="T:Dart.Snmp.NotificationReceived">
            <summary>
            References the method to invoke on an IO completion thread as each message is received.
            </summary>
            <param name="manager">A reference to the <see cref="T:Dart.Snmp.Manager"/> component.</param>
            <param name="receivedMessage">The received <see cref="T:Dart.Snmp.Trap1Message"/>, <see cref="T:Dart.Snmp.Trap2Message"/>, or <see cref="T:Dart.Snmp.InformMessage"/>.</param>
            <param name="state">The state argument from <see cref="M:Dart.Snmp.Manager.Start(Dart.Snmp.NotificationReceived,System.Object)"/>.</param>
            <remarks>
            <para>
            The encapsulated method is called as each message is received by the Manager. 
            The user will normally construct a default message to be sent after receiving 
            an InformMessage. No response is required for traps and notifications.
            </para>
            </remarks>
            <example>
        The following example demonstrates receiving notifications (Trap1, Trap2 and Inform messages), and responding to Inform messages.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Start listening for notifications
            manager1.Start(manager1_NotificationReceived, null);
        }

        private void manager1_NotificationReceived(Manager manager, MessageBase message, object state)
        {
            //Marshal message to the UI thread using the Message event
            if (message is Trap1Message)
                manager.Marshal(new MessageBase[] { message }, "trap1", null);
            else if (message is Trap2Message)
                manager.Marshal(new MessageBase[] { message }, "trap2", null);
            else if (message is InformMessage)
            {
                manager.Marshal(new MessageBase[] { message }, "inform", null);

                //Send response to inform message origin
                manager.Send(new ResponseMessage(message as InformMessage, null), message.Origin);
            }
        }

        private void manager1_Message(object sender, MessageEventArgs e)
        {
            //Update interface according to message type received
            switch (e.Message)
            {
                case "trap1":
                    Trap1Message trap = e.Messages[0] as Trap1Message;
                    label1.Text = "Trap1 received with Enterprise(" + trap.Enterprise + "), Generic Type (" +
                    trap.GenericTrap.ToString() + "), Specific Type(" + trap.SpecificTrap.ToString() + ")";
                    break;
                case "trap2":
                    Trap2Message notification = e.Messages[0] as Trap2Message;
                    label2.Text = "Trap2 received with OID (" + notification.Oid + ")";
                    break;
                case "inform":
                    InformMessage inform = e.Messages[0] as InformMessage;
                    label3.Text = "Inform received with " + inform.Variables.Count.ToString() + " variable(s).";
                    break;
            }
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Start listening for notifications
            manager1.Start(AddressOf manager1_NotificationReceived, Nothing)
        End Sub

        Private Sub manager1_NotificationReceived(ByVal manager As Manager, ByVal message As MessageBase, ByVal state As Object)
            'Marshal message to the UI thread using the Message event
            If TypeOf message Is Trap1Message Then
                manager.Marshal(New MessageBase() { message }, "trap1", Nothing)
            ElseIf TypeOf message Is Trap2Message Then
                manager.Marshal(New MessageBase() { message }, "trap2", Nothing)
            ElseIf TypeOf message Is InformMessage Then
                manager.Marshal(New MessageBase() { message }, "inform", Nothing)

                'Send response to inform message origin
                manager.Send(New ResponseMessage(TryCast(message, InformMessage), Nothing), message.Origin)
            End If
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
            'Update interface according to message type received
            Select Case e.Message
                Case "trap1"
                    Dim trap As Trap1Message = TryCast(e.Messages(0), Trap1Message)
                    label1.Text = "Trap1 received with Enterprise(" &amp; trap.Enterprise &amp; "), Generic Type (" &amp; trap.GenericTrap.ToString() &amp; "), Specific Type(" &amp; trap.SpecificTrap.ToString() &amp; ")"
                Case "trap2"
                    Dim notification As Trap2Message = TryCast(e.Messages(0), Trap2Message)
                    label2.Text = "Trap2 received with OID (" &amp; notification.Oid &amp; ")"
                Case "inform"
                    Dim inform As InformMessage = TryCast(e.Messages(0), InformMessage)
                    label3.Text = "Inform received with " &amp; inform.Variables.Count.ToString() &amp; " variable(s)."
            End Select
        End Sub
        </code>
      </example>
        </member>
        <member name="T:Dart.Snmp.WalkEventArgs">
            <summary>
            Provides data for the <see cref="E:Dart.Snmp.Manager.Walk"/> event.
            </summary>
        </member>
        <member name="F:Dart.Snmp.WalkEventArgs.Variables">
            <summary>
            Gets the variables marshaled to the UI thread using 
            <see cref="M:Dart.Snmp.Manager.Marshal(System.String,Dart.Snmp.VariableList,System.String,System.Object)"/>.
            </summary>
            <value>A List of Variable objects representing the returned subtree.</value>
        </member>
        <member name="F:Dart.Snmp.WalkEventArgs.Oid">
            <summary>
            Gets the OID used to request the subtree of variables.
            </summary>
        </member>
        <member name="T:Dart.Snmp.TableEventArgs">
            <summary>
            Provides data for the <see cref="F:Dart.Snmp.TableEventArgs.Table"/> event.
            </summary>
        </member>
        <member name="F:Dart.Snmp.TableEventArgs.Table">
            <summary>
            Gets the table (two-dimensional Variable array) marshaled to the UI thread.
            </summary>
            <value>A two dimensional array of Variable objects representing the returned table.</value>
            <remarks>
            <para>
            The returned Variable array is a two dimensional array.  
            Use the <see cref="M:System.Array.GetLength(System.Int32)"/> method with a value of 0 to determine the number of rows in the returned table, 
            or a value of 1 to determine the number of columns in the returned table.
            </para>
            </remarks>
        </member>
        <member name="F:Dart.Snmp.TableEventArgs.Oid">
            <summary>
            Gets the OID used to request the table of variables.
            </summary>
        </member>
        <member name="T:Dart.Snmp.SnmpSocket">
            <summary>
            Provides communications that can be invoked in parallel on multiple worker threads.
            </summary>
            <remarks>
            <para>
            Users will typically drag the Manager Component onto a form and use 
            <see cref="M:Dart.Snmp.SnmpBase.Start(Dart.Snmp.ThreadStart,System.Object)">Start</see> 
            to instantiate communications using a single SnmpSocket instance. Socket resources are released when the thread exits.
            </para>
            <para>
            Alternatively, the user can instantiate a Manager and SnmpSocket on any thread. In this case <see cref="M:System.Net.Sockets.Socket.Close"/> should be used to release resources.
            </para>
            </remarks>
            <example>
        The following example demonstrates sending an SNMPv1 Get request to an agent and receiving the response.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Create and send request on a worker thread
            manager1.Start(manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact));
        }

        private void button2_Click(object sender, EventArgs e)
        {
            //If you don't have the MIB, retrieve the value by IID:
            manager1.Start(manager1_SendGetRequest, new Variable("1.3.6.1.2.1.1.4.0"));
        }

        private void manager1_SendGetRequest(SnmpSocket managerSocket, object state)
        {
            //Create Get Request
            GetMessage request = new GetMessage();
            request.Variables.Add(state as Variable);

            //Send request and get response
            ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

            //Marshal response to the UI thread using the Message event
            manager1.Marshal(new ResponseMessage[] { response }, "", null);
        }

        private void manager1_Message(object sender, MessageEventArgs e)
        {
            //Display info about the first variable in the response, and its value
            Variable vari = e.Messages[0].Variables[0];
            label1.Text += vari.Definition.ToString() + vari.Value.ToString() + "\r\n";
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create and send request on a worker thread
            manager1.Start(AddressOf manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact))
        End Sub

        Private Sub button2_Click(ByVal sender As Object, ByVal e As EventArgs)
            'If you don't have the MIB, retrieve the value by IID:
            manager1.Start(AddressOf manager1_SendGetRequest, New Variable("1.3.6.1.2.1.1.4.0"))
        End Sub

        Private Sub manager1_SendGetRequest(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Create Get Request
            Dim request As New GetMessage()
            request.Variables.Add(TryCast(state, Variable))

            'Send request and get response
            Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

            'Marshal response to the UI thread using the Message event
            manager1.Marshal(New ResponseMessage() { response }, "", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
            'Display info about the first variable in the response, and its value
            Dim vari As Variable = e.Messages(0).Variables(0)
            label1.Text &amp;= vari.Definition.ToString() &amp; vari.Value.ToString() &amp; vbCrLf
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.#ctor(Dart.Snmp.SnmpBase,System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Creates an instance of SnmpSocket bound to a specific local IPEndPoint.
            </summary>
            <param name="entity">The controlling Agent or Manager.</param>
            <param name="localEP">The local <see cref="T:System.Net.IPEndPoint">IPEndPoint</see> the socket should bind to.</param>
            <param name="dualMode">Specifies whether the socket should be a dual mode IPv6 socket. Only supported on Vista and newer operating systems.</param>
            <remarks>
            <para>
            localEP.AddressFamily must match the AddressFamily of the target SNMP entity unless dualMode is true and localEP.Address 
            is IPAddress.IPv6Any or an IPv4-mapped IPv6 address. If dual mode (simultaneous IPv4 and IPv6) socket operation is desired, 
            use IPAddress.IPv6Any (for all IPv4 and IPv6 interfaces) or an IPv4-mapped IPv6 address for the localEP address, and true 
            for the dualMode argument. An IPv4-mapped IPv6 address is the IPv4 address of a network interface preceded by 
            "::ffff:". Ex: ::ffff:192.168.1.1.
            </para>
            <para>
            When created by the user, <see cref="M:System.Net.Sockets.Socket.Close"/> should be used to release resources.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.#ctor(Dart.Snmp.SnmpBase,System.Net.IPEndPoint)">
            <summary>
            Creates an instance of SnmpSocket bound to a specific local IPEndPoint.
            </summary>
            <param name="entity">The controlling Agent or Manager.</param>
            <param name="localEP">The local <see cref="T:System.Net.IPEndPoint">IPEndPoint</see> the socket should bind to.</param>
            <remarks>
            <para>
            When created by the user, <see cref="M:System.Net.Sockets.Socket.Close"/> should be used to release resources.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.#ctor(Dart.Snmp.SnmpBase)">
            <summary>
            Creates an instance of SnmpSocket bound to IPAddress.Any, port 0 (the ephemeral port).
            </summary>
            <param name="entity">The controlling Agent or Manager.</param>
            <remarks>When created by the user, <see cref="M:System.Net.Sockets.Socket.Close"/> should be used to release resources.</remarks>
            <example>
        The following example demonstrates sending an SNMPv1 Get request to an agent and receiving the response in a single-threaded application.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Bind to a socket to send the GetMessage on
            SnmpSocket managerSocket = new SnmpSocket(manager1);

            //Create Get request
            GetMessage request = new GetMessage();
            request.Variables.Add(manager1.Mib.CreateVariable(NodeName.sysContact));

            //Send request and get response
            ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

            //Display info about the first variable in the response, and its value
            Variable vari = response.Variables[0];
            label1.Text = vari.Definition.ToString() + vari.Value.ToString();

            //Close the socket when done
            managerSocket.Close();
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Bind to a socket to send the GetMessage on
            Dim managerSocket As New SnmpSocket(manager1)

            'Create Get request
            Dim request As New GetMessage()
            request.Variables.Add(manager1.Mib.CreateVariable(NodeName.sysContact))

            'Send request and get response
            Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

            'Display info about the first variable in the response, and its value
            Dim vari As Variable = response.Variables(0)
            label1.Text = vari.Definition.ToString() &amp; vari.Value.ToString()

            'Close the socket when done
            managerSocket.Close()
        End Sub
        </code>
      </example>
        </member>
        <member name="F:Dart.Snmp.SnmpSocket.Entity">
            <summary>
            Provides read-only access to the parent SNMP entity.
            </summary>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.GetResponse(Dart.Snmp.RequestMessage,System.String)">
            <summary>
            Sends a request to the specified agent on port 161 and returns the response.
            </summary>
            <param name="request">A <see cref="T:Dart.Snmp.GetMessage"/>, <see cref="T:Dart.Snmp.GetNextMessage"/>, <see cref="T:Dart.Snmp.GetBulkMessage"/> or <see cref="T:Dart.Snmp.SetMessage"/>. Use <see cref="M:Dart.Snmp.SnmpSocket.GetResponse(Dart.Snmp.RequestMessage,System.String,System.Int32)"/> for sending an <see cref="T:Dart.Snmp.InformMessage"/> to port 162.</param>
            <param name="hostNameOrAddress">The IP Address in dot notation or hostname of the agent.</param>
            <returns><see cref="T:Dart.Snmp.ResponseMessage"/> returned from the remote host.</returns>
            <remarks>
            <para>
            A valid ResponseMessage is returned unless an exception is thrown.
            </para>
            <para>
            SNMPv3 discovery of the recipient's engine id and time is automatic and cached in <see cref="F:Dart.Snmp.SessionSecurity.EngineCache"/>. Encrypted passwords are also cached to improve performance.
            A <see cref="T:Dart.Snmp.ReportMessage"/> may be returned to indicate a failure.
            </para>
            </remarks>
            <exception cref="T:System.Net.Sockets.SocketException">A problem was experienced using the Socket or 
            the Socket.ReceiveTimeout period expired.</exception>
            <exception cref="T:Dart.Snmp.DecodingException">A problem was encountered decoding the Response.</exception>
            <example>
        The following example demonstrates sending an SNMPv1 Get request to an agent and receiving the response.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Create and send request on a worker thread
            manager1.Start(manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact));
        }

        private void button2_Click(object sender, EventArgs e)
        {
            //If you don't have the MIB, retrieve the value by IID:
            manager1.Start(manager1_SendGetRequest, new Variable("1.3.6.1.2.1.1.4.0"));
        }

        private void manager1_SendGetRequest(SnmpSocket managerSocket, object state)
        {
            //Create Get Request
            GetMessage request = new GetMessage();
            request.Variables.Add(state as Variable);

            //Send request and get response
            ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

            //Marshal response to the UI thread using the Message event
            manager1.Marshal(new ResponseMessage[] { response }, "", null);
        }

        private void manager1_Message(object sender, MessageEventArgs e)
        {
            //Display info about the first variable in the response, and its value
            Variable vari = e.Messages[0].Variables[0];
            label1.Text += vari.Definition.ToString() + vari.Value.ToString() + "\r\n";
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create and send request on a worker thread
            manager1.Start(AddressOf manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact))
        End Sub

        Private Sub button2_Click(ByVal sender As Object, ByVal e As EventArgs)
            'If you don't have the MIB, retrieve the value by IID:
            manager1.Start(AddressOf manager1_SendGetRequest, New Variable("1.3.6.1.2.1.1.4.0"))
        End Sub

        Private Sub manager1_SendGetRequest(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Create Get Request
            Dim request As New GetMessage()
            request.Variables.Add(TryCast(state, Variable))

            'Send request and get response
            Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

            'Marshal response to the UI thread using the Message event
            manager1.Marshal(New ResponseMessage() { response }, "", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
            'Display info about the first variable in the response, and its value
            Dim vari As Variable = e.Messages(0).Variables(0)
            label1.Text &amp;= vari.Definition.ToString() &amp; vari.Value.ToString() &amp; vbCrLf
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.GetResponse(Dart.Snmp.RequestMessage,System.String,System.Int32)">
            <summary>
            Sends a request to the specified address/port and returns the response.
            </summary>
            <param name="request">A <see cref="T:Dart.Snmp.GetMessage"/>, <see cref="T:Dart.Snmp.GetNextMessage"/>, <see cref="T:Dart.Snmp.GetBulkMessage"/>, <see cref="T:Dart.Snmp.InformMessage"/> or <see cref="T:Dart.Snmp.SetMessage"/>.</param>
            <param name="hostNameOrAddress">The IP Address in dot notation or hostname of the agent or manager.</param>
            <param name="port">The port to use.</param>
            <returns><see cref="T:Dart.Snmp.ResponseMessage"/> returned from the remote host.</returns>
            <remarks>
            <para>
            A valid ResponseMessage is returned unless an exception is thrown.
            </para>
            <para>
            Agents typically listen on port 161 but can be configured to listen on any port. 
            If sending an InformMessage to another Manager, port 162 is usually used.
            </para>
            <para>
            SNMPv3 discovery of the recipient's engine id and time is automatic and cached in <see cref="F:Dart.Snmp.SessionSecurity.EngineCache"/>. Encrypted passwords are cached to improve performance.
            A <see cref="T:Dart.Snmp.ReportMessage"/> may be returned to indicate a failure.
            </para>
            </remarks>
            <exception cref="T:System.Net.Sockets.SocketException">A problem was experienced using the Socket or 
            the Socket.ReceiveTimeout period has expired.</exception>
            <exception cref="T:Dart.Snmp.DecodingException">A problem was encountered decoding the Response.</exception>
            <example>
        The following example demonstrates sending an SNMPv1 Get request to an agent and receiving the response.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Create and send request on a worker thread
            manager1.Start(manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact));
        }

        private void button2_Click(object sender, EventArgs e)
        {
            //If you don't have the MIB, retrieve the value by IID:
            manager1.Start(manager1_SendGetRequest, new Variable("1.3.6.1.2.1.1.4.0"));
        }

        private void manager1_SendGetRequest(SnmpSocket managerSocket, object state)
        {
            //Create Get Request
            GetMessage request = new GetMessage();
            request.Variables.Add(state as Variable);

            //Send request and get response
            ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

            //Marshal response to the UI thread using the Message event
            manager1.Marshal(new ResponseMessage[] { response }, "", null);
        }

        private void manager1_Message(object sender, MessageEventArgs e)
        {
            //Display info about the first variable in the response, and its value
            Variable vari = e.Messages[0].Variables[0];
            label1.Text += vari.Definition.ToString() + vari.Value.ToString() + "\r\n";
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create and send request on a worker thread
            manager1.Start(AddressOf manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact))
        End Sub

        Private Sub button2_Click(ByVal sender As Object, ByVal e As EventArgs)
            'If you don't have the MIB, retrieve the value by IID:
            manager1.Start(AddressOf manager1_SendGetRequest, New Variable("1.3.6.1.2.1.1.4.0"))
        End Sub

        Private Sub manager1_SendGetRequest(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Create Get Request
            Dim request As New GetMessage()
            request.Variables.Add(TryCast(state, Variable))

            'Send request and get response
            Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

            'Marshal response to the UI thread using the Message event
            manager1.Marshal(New ResponseMessage() { response }, "", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
            'Display info about the first variable in the response, and its value
            Dim vari As Variable = e.Messages(0).Variables(0)
            label1.Text &amp;= vari.Definition.ToString() &amp; vari.Value.ToString() &amp; vbCrLf
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.GetResponse(Dart.Snmp.RequestMessage,System.Net.IPEndPoint)">
            <summary>
            Sends a request to the specified IPEndPoint and returns the response.
            </summary>
            <param name="request">A <see cref="T:Dart.Snmp.GetMessage"/>, <see cref="T:Dart.Snmp.GetNextMessage"/>, <see cref="T:Dart.Snmp.GetBulkMessage"/>, <see cref="T:Dart.Snmp.InformMessage"/> or <see cref="T:Dart.Snmp.SetMessage"/>.</param>
            <param name="target">The <see cref="T:System.Net.IPEndPoint">IPEndPoint</see> of the target agent or manager.</param>
            <returns>The <see cref="T:Dart.Snmp.ResponseMessage"/> from the remote host.</returns>
            <remarks>
            <para>
            This method always returns a valid ResponseMessage (or throws an exception).
            </para>
            <para>
            Agents typically listen on port 161 but can be configured to listen on any port. 
            If sending an InformMessage to another Manager, port 162 is usually used.
            </para>
            <para>
            SNMPv3 discovery of the recipient's engine id and time is automatic and cached in <see cref="F:Dart.Snmp.SessionSecurity.EngineCache"/>. Encrypted passwords are also cached to improve performance.
            A <see cref="T:Dart.Snmp.ReportMessage"/> may be returned to indicate a failure.
            </para>
            </remarks>
            <exception cref="T:System.Net.Sockets.SocketException">A problem was experienced using the Socket or the Socket.ReceiveTimeout period has expired.</exception>
            <exception cref="T:Dart.Snmp.DecodingException">A problem was encountered decoding the Response.</exception>
            <example>
        The following example demonstrates sending an SNMPv1 Get request to an agent and receiving the response.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Create and send request on a worker thread
            manager1.Start(manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact));
        }

        private void button2_Click(object sender, EventArgs e)
        {
            //If you don't have the MIB, retrieve the value by IID:
            manager1.Start(manager1_SendGetRequest, new Variable("1.3.6.1.2.1.1.4.0"));
        }

        private void manager1_SendGetRequest(SnmpSocket managerSocket, object state)
        {
            //Create Get Request
            GetMessage request = new GetMessage();
            request.Variables.Add(state as Variable);

            //Send request and get response
            ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

            //Marshal response to the UI thread using the Message event
            manager1.Marshal(new ResponseMessage[] { response }, "", null);
        }

        private void manager1_Message(object sender, MessageEventArgs e)
        {
            //Display info about the first variable in the response, and its value
            Variable vari = e.Messages[0].Variables[0];
            label1.Text += vari.Definition.ToString() + vari.Value.ToString() + "\r\n";
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create and send request on a worker thread
            manager1.Start(AddressOf manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact))
        End Sub

        Private Sub button2_Click(ByVal sender As Object, ByVal e As EventArgs)
            'If you don't have the MIB, retrieve the value by IID:
            manager1.Start(AddressOf manager1_SendGetRequest, New Variable("1.3.6.1.2.1.1.4.0"))
        End Sub

        Private Sub manager1_SendGetRequest(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Create Get Request
            Dim request As New GetMessage()
            request.Variables.Add(TryCast(state, Variable))

            'Send request and get response
            Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

            'Marshal response to the UI thread using the Message event
            manager1.Marshal(New ResponseMessage() { response }, "", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
            'Display info about the first variable in the response, and its value
            Dim vari As Variable = e.Messages(0).Variables(0)
            label1.Text &amp;= vari.Definition.ToString() &amp; vari.Value.ToString() &amp; vbCrLf
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.GetResponse(Dart.Snmp.RequestMessage,System.Net.IPEndPoint,System.Int32)">
            <summary>
            Sends a request to the specified IPEndPoint and returns the response.
            </summary>
            <param name="request">A <see cref="T:Dart.Snmp.GetMessage"/>, <see cref="T:Dart.Snmp.GetNextMessage"/>, <see cref="T:Dart.Snmp.GetBulkMessage"/>, <see cref="T:Dart.Snmp.InformMessage"/> or <see cref="T:Dart.Snmp.SetMessage"/>.</param>
            <param name="target">The <see cref="T:System.Net.IPEndPoint">IPEndPoint</see> of the target agent or manager.</param>
            <param name="retries">Requests will be resent this many times if a response is not received within the Socket.ReceiveTimeout period.</param>
            <returns>The <see cref="T:Dart.Snmp.ResponseMessage"/> from the remote host.</returns>
            <remarks>
            <para>
            This method always returns a valid ResponseMessage (or throws an exception).
            </para>
            <para>
            Agents typically listen on port 161 but can be configured to listen on any port. 
            If sending an InformMessage to another Manager, port 162 is usually used.
            </para>
            <para>
            SNMPv3 discovery of the recipient's engine id and time is automatic and cached in <see cref="F:Dart.Snmp.SessionSecurity.EngineCache"/>. Encrypted passwords are also cached to improve performance.
            A <see cref="T:Dart.Snmp.ReportMessage"/> may be returned to indicate a failure.
            </para>
            </remarks>
            <exception cref="T:System.Net.Sockets.SocketException">A problem was experienced using the Socket or the Socket.ReceiveTimeout period has expired.</exception>
            <exception cref="T:Dart.Snmp.DecodingException">A problem was encountered decoding the Response.</exception>
            <example>
        The following example demonstrates sending an SNMPv1 Get request to an agent and receiving the response.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Create and send request on a worker thread
            manager1.Start(manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact));
        }

        private void button2_Click(object sender, EventArgs e)
        {
            //If you don't have the MIB, retrieve the value by IID:
            manager1.Start(manager1_SendGetRequest, new Variable("1.3.6.1.2.1.1.4.0"));
        }

        private void manager1_SendGetRequest(SnmpSocket managerSocket, object state)
        {
            //Create Get Request
            GetMessage request = new GetMessage();
            request.Variables.Add(state as Variable);

            //Send request and get response
            ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

            //Marshal response to the UI thread using the Message event
            manager1.Marshal(new ResponseMessage[] { response }, "", null);
        }

        private void manager1_Message(object sender, MessageEventArgs e)
        {
            //Display info about the first variable in the response, and its value
            Variable vari = e.Messages[0].Variables[0];
            label1.Text += vari.Definition.ToString() + vari.Value.ToString() + "\r\n";
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create and send request on a worker thread
            manager1.Start(AddressOf manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact))
        End Sub

        Private Sub button2_Click(ByVal sender As Object, ByVal e As EventArgs)
            'If you don't have the MIB, retrieve the value by IID:
            manager1.Start(AddressOf manager1_SendGetRequest, New Variable("1.3.6.1.2.1.1.4.0"))
        End Sub

        Private Sub manager1_SendGetRequest(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Create Get Request
            Dim request As New GetMessage()
            request.Variables.Add(TryCast(state, Variable))

            'Send request and get response
            Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

            'Marshal response to the UI thread using the Message event
            manager1.Marshal(New ResponseMessage() { response }, "", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
            'Display info about the first variable in the response, and its value
            Dim vari As Variable = e.Messages(0).Variables(0)
            label1.Text &amp;= vari.Definition.ToString() &amp; vari.Value.ToString() &amp; vbCrLf
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.GetResponses(Dart.Snmp.RequestMessage)">
            <summary>
            Sends a request and returns the responses. Can be used to discover multiple agents on a network.
            </summary>
            <param name="request">A <see cref="T:Dart.Snmp.GetMessage"/>, <see cref="T:Dart.Snmp.GetNextMessage"/>, <see cref="T:Dart.Snmp.GetBulkMessage"/>, <see cref="T:Dart.Snmp.InformMessage"/> or <see cref="T:Dart.Snmp.SetMessage"/>.
            </param>
            <returns>
            A <see cref="T:Dart.Snmp.ResponseMessage"/>[] from SNMP agents (or managers for InformMessages) that respond. 
            Since multiple responses are typically received, this method reads packets from the socket until a timeout occurs.
            </returns>
            <remarks>
            <para>
            Use this method to request a Variable value and "discover" Agents available on the network. Note that some Agents and most SNMPv3 Agents will not respond to broadcast requests.
            </para>
            <para>
            If Socket.AddressFamily is <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork">AddressFamily.InterNetwork</see>, this method sends a Request to multiple agents (or managers) using the 
            broadcast address of 255.255.255.255.  For <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6">AddressFamily.InterNetworkV6</see>, the request is sent to the "ff02::1" multicast group, which is 
            commonly used to provide broadcast capabilities for IPv6.
            </para>
            <para>
            If the request is an <see cref="T:Dart.Snmp.InformMessage"/> then <see cref="F:Dart.Snmp.Manager.DefaultPort">Manager.DefaultPort</see> is used as the destination port (162); otherwise <see cref="F:Dart.Snmp.Agent.DefaultPort">Agent.DefaultPort</see> is used (161).
            </para>
            <para>
            If using SNMPv3 one or more <see cref="T:Dart.Snmp.ReportMessage">ReportMessages</see> may be returned to indicate a communications failure.
            </para>
            <para>
            The returned Response array may contain as few as 0 responses up to as many agents as are available on the network. 
            Use <see cref="P:Dart.Snmp.MessageBase.Origin"/> to determine the source of each ResponseMessage.
            </para>
            </remarks>
            <example>
        The following example demonstrates how to discover agents on your network with a broadcast GetRequest.
        <code lang="C#">
        private void buttonDiscoverAgents_Click(object sender, EventArgs e)
        {
            //Create and send request on a worker thread
            manager1.Start(sendBroadcastGet, null);
        }

        /// &lt;summary&gt;
        /// This method will send a GetMessage to the broadcast address, 
        /// and any agents that respond will be added to a listview control.
        /// &lt;/summary&gt;
        private void sendBroadcastGet(SnmpSocket managerSocket, object state)
        {
            //Create Get message requesting a common OID
            GetMessage msg = new GetMessage();
            msg.Variables.Add(manager1.Mib.CreateVariable(NodeName.sysUpTime));
            //Configure SnmpSocket.ReceiveTimeout to specify how long GetResponses() waits for responses here if needed.
            ResponseMessage[] responses = managerSocket.GetResponses(msg);

            //Marshal responses back to UI thread for display
            manager1.Marshal(responses, "discovery", null);
        }

        private void manager1_Message(object sender, Dart.Snmp.MessageEventArgs e)
        {
            //Fires on the UI thread
            //Display each agent's IP in a listview
            foreach (ResponseMessage message in e.Messages)
                listView1.Items.Add(message.Origin.Address.ToString());
        }
        </code>
        <code lang="VB">
        Private Sub buttonDiscoverAgents_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create and send request on a worker thread
            manager1.Start(AddressOf sendBroadcastGet, Nothing)
        End Sub

        ''' &lt;summary&gt;
        ''' This method will send a GetMessage to the broadcast address, 
        ''' and any agents that respond will be added to a listview control.
        ''' &lt;/summary&gt;
        Private Sub sendBroadcastGet(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Create Get message requesting a common OID
            Dim msg As New GetMessage()
            msg.Variables.Add(manager1.Mib.CreateVariable(NodeName.sysUpTime))
            'Configure SnmpSocket.ReceiveTimeout to specify how long GetResponses() waits for responses here if needed.
            Dim responses() As ResponseMessage = managerSocket.GetResponses(msg)

            'Marshal responses back to UI thread for display
            manager1.Marshal(responses, "discovery", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As Dart.Snmp.MessageEventArgs)
            'Fires on the UI thread
            'Display each agent's IP in a listview
            For Each message As ResponseMessage In e.Messages
                listView1.Items.Add(message.Origin.Address.ToString())
            Next message
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.GetResponses(Dart.Snmp.RequestMessage,System.Net.IPEndPoint)">
            <summary>
            Sends a request to any IPEndPoint and returns the responses. Can be used to discover multiple agents on the network.
            </summary>
            <param name="request">A <see cref="T:Dart.Snmp.GetMessage"/>, <see cref="T:Dart.Snmp.GetNextMessage"/>, <see cref="T:Dart.Snmp.GetBulkMessage"/>, <see cref="T:Dart.Snmp.InformMessage"/> or <see cref="T:Dart.Snmp.SetMessage"/>.</param>
            <param name="broadcastEP">The broadcast <see cref="T:System.Net.IPEndPoint">IPEndPoint</see> to use. The AddressFamily must match <see cref="T:System.Net.Sockets.Socket"/>.AddressFamily.</param>
            <returns>
            A <see cref="T:Dart.Snmp.ResponseMessage"/>[] from SNMP agents (or managers for InformMessages) that respond. 
            Since multiple responses are typically received, this method reads packets from the socket until a timeout occurs.
            </returns>
            <remarks>
            <para>
            Use this method to request a Variable value and find Agents available on the network. Note that some Agents will not respond to broadcast requests.
            </para>
            <para>
            If a response throws a <see cref="T:Dart.Snmp.DecodingException"/>, the <see cref="E:Dart.Snmp.ComponentBase.Error">Error</see> event is raised, 
            providing access to the response, including the encoded bytes received. The returned array will not include this packet.
            </para>
            <para>
            If using SNMPv3 one or more <see cref="T:Dart.Snmp.ReportMessage">ReportMessages</see> may be returned to indicate a communications failure.
            </para>
            <para>
            The returned Response array may contain as few as 0 responses up to as many agents as are available on the network. 
            <see cref="P:Dart.Snmp.MessageBase.Origin"/> provides the source of each ResponseMessage.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.GetResponseAsync(Dart.Snmp.RequestMessage,System.Net.IPEndPoint,System.Int32,System.Int32,Dart.Snmp.ResponseReceived,System.Object)">
            <summary>
            Sends a request to the specified target and returns the response by invoking the callback method on an IO completion thread.
            </summary>
            <param name="request">A <see cref="T:Dart.Snmp.GetMessage"/>, <see cref="T:Dart.Snmp.GetNextMessage"/>, <see cref="T:Dart.Snmp.GetBulkMessage"/>, <see cref="T:Dart.Snmp.InformMessage"/> or <see cref="T:Dart.Snmp.SetMessage"/>.</param>
            <param name="target">The <see cref="T:System.Net.IPEndPoint">IPEndPoint</see> of the target agent or manager.</param>
            <param name="timeout">Timeout, in milliseconds, to wait for the response. 3000 is a typical value. 0 should not be used.</param>
            <param name="retries">Requests will be resent this many times if a response is not received within the Socket.ReceiveTimeout period.</param>
            <param name="callback">A <see cref="T:Dart.Snmp.ResponseReceived"/> delegate referencing the method to invoke on an IO completion thread when the operation completes.</param>
            <param name="state">Object to pass to the callback method when the operation completes; can be null.</param>
            <remarks>
            <para>
            If your application uses SnmpSocket.GetResponse() on parallel threads, consider using this method instead to launch those requests asynchronously. 
            This technique avoids the overhead of multiple worker threads.
            </para>
            <para>
            This method causes a byte array to be pinned while waiting for a response. If a response is not received, this byte array will be pinned until the timeout period expires.
            If an infinite timeout is specified this byte array will remain pinned. This method can be cancelled by closing the underlying Socket.
            </para>
            </remarks>
            <example>
        The following example demonstrates sending an SNMPv1 Get request to an agent and receiving the response asynchronously.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Create Get Request
            GetMessage request = new GetMessage();
            request.Variables.Add(manager1.Mib.CreateVariable(NodeName.sysContact));

            //Create socket for sending request from. Binds to IPAddress.Any, port 0.
            SnmpSocket managerSocket = new SnmpSocket(manager1);

            //Send request and receive response. managerSocket_ResponseReceived is invoked when the response is received.
            managerSocket.GetResponseAsync(request, myAgentAddress, 3000, 3, managerSocket_ResponseReceived, null);
        }

        /// &lt;summary&gt;
        /// Invoked on an IO completion thread when the response is received.
        /// &lt;/summary&gt;
        /// &lt;param name="request"&gt;The corresponding RequestMessage.&lt;/param&gt;
        /// &lt;param name="response"&gt;Response from the target agent or manager. Null if a response was not received.&lt;/param&gt;
        /// &lt;param name="ex"&gt;Populated if the operation threw an exception.&lt;/param&gt;
        /// &lt;param name="state"&gt;Object passed into the state parameter of GetResponseAsync. Not used in this snippet.&lt;/param&gt;
        private void managerSocket_ResponseReceived(RequestMessage request, ResponseMessage response, Exception ex, object state)
        {
            //Marshal response to the UI thread using the Message event
            manager1.Marshal(new ResponseMessage[] { response }, "", null);
        }

        private void manager1_Message(object sender, MessageEventArgs e)
        {
            //Display info about the first variable in the response, and its value
            Variable vari = e.Messages[0].Variables[0];
            label1.Text += vari.Definition.ToString() + vari.Value.ToString() + Environment.NewLine;
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create Get Request
            Dim request As New GetMessage()
            request.Variables.Add(manager1.Mib.CreateVariable(NodeName.sysContact))

            'Create socket for sending request from. Binds to IPAddress.Any, port 0.
            Dim managerSocket As New SnmpSocket(manager1)

            'Send request and receive response. managerSocket_ResponseReceived is invoked when the response is received.
            managerSocket.GetResponseAsync(request, myAgentAddress, 3000, 3, AddressOf managerSocket_ResponseReceived, Nothing)
        End Sub

        ''' &lt;summary&gt;
        ''' Invoked on an IO completion thread when the response is received.
        ''' &lt;/summary&gt;
        ''' &lt;param name="request"&gt;The corresponding RequestMessage.&lt;/param&gt;
        ''' &lt;param name="response"&gt;Response from the target agent or manager. Null if a response was not received.&lt;/param&gt;
        ''' &lt;param name="ex"&gt;Populated if the operation threw an exception.&lt;/param&gt;
        ''' &lt;param name="state"&gt;Object passed into the state parameter of GetResponseAsync. Not used in this snippet.&lt;/param&gt;
        Private Sub managerSocket_ResponseReceived(ByVal request As RequestMessage, ByVal response As ResponseMessage, ByVal ex As Exception, ByVal state As Object)
            'Marshal response to the UI thread using the Message event
            manager1.Marshal(New ResponseMessage() { response }, "", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
            'Display info about the first variable in the response, and its value
            Dim vari As Variable = e.Messages(0).Variables(0)
            label1.Text &amp;= vari.Definition.ToString() &amp; vari.Value.ToString() &amp; Environment.NewLine
        End Sub
        </code>
      </example>
        </member>
        <member name="F:Dart.Snmp.SnmpSocket.AsyncTimer">
            <summary>
            AsyncTimer used to provide protection too.
            </summary>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.GetResponseReadCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Response from remote SNMP entity received.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.GetResponseAsyncDone(Dart.Snmp.RequestMessage,Dart.Snmp.ResponseMessage,System.Exception,System.Object)">
            <summary>
            Internal notification that GetResponseAsync() is finished.
            </summary>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.GetResponseTaskAsync(Dart.Snmp.RequestMessage,System.Net.IPEndPoint,System.Int32,System.Int32)">
            <summary>
            Sends a request to the specified target and returns the response in an awaitable Task.
            </summary>
            <param name="request">A <see cref="T:Dart.Snmp.GetMessage"/>, <see cref="T:Dart.Snmp.GetNextMessage"/>, <see cref="T:Dart.Snmp.GetBulkMessage"/>, <see cref="T:Dart.Snmp.InformMessage"/> or <see cref="T:Dart.Snmp.SetMessage"/>.</param>
            <param name="target">The <see cref="T:System.Net.IPEndPoint">IPEndPoint</see> of the target agent or manager.</param>
            <param name="timeout">Timeout, in milliseconds, to wait for the response. 3000 is a typical value. 0 should not be used.</param>
            <param name="retries">Requests will be resent this many times if a response is not received within the Socket.ReceiveTimeout period.</param>
            <returns>
            A Task that represents the operation. The value of the TResult parameter contains the <see cref="T:Dart.Snmp.ResponseMessage">ResponseMessage</see> 
            object encapsulating the response.
            </returns>
            <remarks>
            <para>
            If your application uses SnmpSocket.GetResponse() on parallel threads, consider using this method instead to execute those requests asynchronously. 
            This technique avoids the overhead of multiple worker threads. A SocketException is thrown if a timeout condition causes the socket to be closed.
            </para>
            <para>
            This method causes a byte array to be pinned while waiting for a response. If a response is not received, this byte array will be pinned until the timeout period expires.
            If an infinite timeout is specified, its receiving byte array will remain pinned. This method can be cancelled by closing the underlying Socket.
            </para>
            </remarks>
            <example>
        The following example demonstrates sending an SNMPv1 Get request to an agent and receiving the response using await.
        <code lang="C#">
        private async void button1_Click(object sender, EventArgs e)
        {
            //Create Get Request
            GetMessage request = new GetMessage();
            request.Variables.Add(manager1.Mib.CreateVariable(NodeName.sysContact));

            //Create socket for sending request from. Binds to IPAddress.Any, port 0.
            SnmpSocket managerSocket = new SnmpSocket(manager1);

            //Send request and receive response
            ResponseMessage response = await managerSocket.GetResponseTaskAsync(request, myAgentAddress, 3000, 3);

            //Display info about the first variable in the response, and its value
            Variable vari = response.Variables[0];
            label1.Text += vari.Definition.ToString() + vari.Value.ToString() + Environment.NewLine;
        }
        </code>
        <code lang="VB">
        Private Async Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create Get Request
            Dim request As New GetMessage()
            request.Variables.Add(manager1.Mib.CreateVariable(NodeName.sysContact))

            'Create socket for sending request from. Binds to IPAddress.Any, port 0.
            Dim managerSocket As New SnmpSocket(manager1)

            'Send request and receive response
            Dim response As ResponseMessage = Await managerSocket.GetResponseTaskAsync(request, myAgentAddress, 3000, 3)

            'Display info about the first variable in the response, and its value
            Dim vari As Variable = response.Variables(0)
            label1.Text &amp;= vari.Definition.ToString() &amp; vari.Value.ToString() &amp; Environment.NewLine
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.Receive(Dart.Snmp.RequestMessage,System.Net.IPEndPoint)">
            <summary>
            Reads and decodes the next SNMP message with matching <see cref="P:Dart.Snmp.StandardMessage.Id"/> or <see cref="F:Dart.Snmp.Security.Id"/>. The
            IPEndPoint of the response must match the destination.
            </summary>
            <param name="request">A <see cref="T:Dart.Snmp.GetMessage"/>, <see cref="T:Dart.Snmp.GetNextMessage"/>, <see cref="T:Dart.Snmp.GetBulkMessage"/>, <see cref="T:Dart.Snmp.InformMessage"/> or <see cref="T:Dart.Snmp.SetMessage"/>.</param>
            <param name="remoteEP">The <see cref="T:System.Net.IPEndPoint">IPEndPoint</see> of the target agent or manager. Use null when a broadcast IPEndPoint was used or the origin of the packet is immaterial.</param>
            <returns>A ResponseMessage received from the remote host.</returns>
            <remarks>
            <para>
            Returns when a matching response is received and decoded. Normally used
            on a worker thread. A matching <see cref="P:Dart.Snmp.StandardMessage.Id"/> or <see cref="F:Dart.Snmp.Security.Id"/> is required in the response, and the source IPEndPoint must match that
            of the request. All received messages are reported to <see cref="E:Dart.Snmp.SnmpBase.Log"/> (matching and non-matching).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The request parameter is null.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">A problem was experienced using the Socket or the Socket.ReceiveTimeout period has expired.</exception>
            <exception cref="T:Dart.Snmp.DecodingException">A problem was encountered decoding the Response.</exception>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.Send(Dart.Snmp.RequestMessage,System.Net.IPEndPoint)">
            <summary>
            Encodes and sends a RequestMessage to the specified agent.
            </summary>
            <param name="request">A <see cref="T:Dart.Snmp.GetMessage"/>, <see cref="T:Dart.Snmp.GetNextMessage"/>, <see cref="T:Dart.Snmp.GetBulkMessage"/>, <see cref="T:Dart.Snmp.InformMessage"/> or <see cref="T:Dart.Snmp.SetMessage"/>.</param>
            <param name="remoteEP">The IPEndPoint specifying the target agent or manager.</param>
            <remarks>
            <para>
            <see cref="M:Dart.Snmp.SnmpSocket.Receive(Dart.Snmp.RequestMessage,System.Net.IPEndPoint)"/> should be used to receive and decode the expected <see cref="T:Dart.Snmp.ResponseMessage"/>.
            </para>
            <para>
            It is necessary for the address family of the source and destination ports to match. For supporting both, use
            <see cref="M:Dart.Snmp.SnmpBase.Start(Dart.Snmp.ThreadStart,System.Net.IPEndPoint,System.Object)"/> to start 2 worker threads (one using AddressFamily.InterNetwork and one using AddressFamily.InternetNetworkV6).
            </para>
            <para>
            If using SNMPv3 the discovery of the recipient's engine id is automatic and cached in <see cref="F:Dart.Snmp.SessionSecurity.EngineCache"/>. Encrypted passwords are also cached to improve performance.
            </para>
            </remarks>
            <exception cref="T:System.Net.Sockets.SocketException">A problem was experienced using the Socket.</exception>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.Walk(System.String,System.String)">
            <summary>
            Performs a series of blocking requests to walk a MIB using SNMP version 1.
            </summary>
            <param name="rootOid">The root OID.</param>
            <param name="agentNameOrAddress">The IP Address in dot notation or hostname of the agent managing the table.</param>
            <returns>A VariableList under <i>rootOid</i>.</returns>
            <remarks>
            <para>
            This method walks the MIB by sending a <see cref="T:Dart.Snmp.GetNextMessage"/> for each element under the root oid. 
            The method blocks and will not return until the complete subtree has been retrieved or any single request 
            exceeds the value of the Socket.ReceiveTimeout property. 
            The time required to complete this request is a function of the number of available instance Id's (IID's) under the root oid.  
            </para>
            <para>
            The "well-known" agent port 161 is used. The "public" community is used. No retries are attempted if a timeout occurs.
            </para>
            </remarks>
            <example>
        The following example demonstrates how to walk a MIB and display the response variables.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Perform MIB walk on a worker thread
            manager1.Start(walkMib, manager1.Mib.GetByNodeName(NodeName.system).Oid);
        }

        private void walkMib(SnmpSocket managerSocket, object state)
        {
            //The state contains the OID to walk (in this case, the system group)
            string oid = state as string;

            //Walk the MIB from the specified root OID
            VariableList variables = managerSocket.Walk(oid, myAgentAddress);

            //Marshal variables returned to the UI thread using the Walk event
            manager1.Marshal(oid, variables, "", null);
        }

        private void manager1_Walk(object sender, WalkEventArgs e)
        {
            //Populate a treeview control with the returned variables
            e.Variables.Populate(tvwVariables, e.Oid, manager1.Mib);
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Perform MIB walk on a worker thread
            manager1.Start(AddressOf walkMib, manager1.Mib.GetByNodeName(NodeName.system).Oid)
        End Sub

        Private Sub walkMib(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'The state contains the OID to walk (in this case, the system group)
            Dim oid As String = TryCast(state, String)

            'Walk the MIB from the specified root OID
            Dim variables As VariableList = managerSocket.Walk(oid, myAgentAddress)

            'Marshal variables returned to the UI thread using the Walk event
            manager1.Marshal(oid, variables, "", Nothing)
        End Sub

        Private Sub manager1_Walk(ByVal sender As Object, ByVal e As WalkEventArgs)
            'Populate a treeview control with the returned variables
            e.Variables.Populate(tvwVariables, e.Oid, manager1.Mib)
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.Walk(System.String,Dart.Snmp.SnmpVersion,System.String,Dart.Snmp.Security,System.Net.IPEndPoint,System.Int32)">
            <summary>
            Performs a series of blocking requests to walk a mib.
            </summary>
            <param name="rootOid">The root OID.</param>
            <param name="version"><see cref="T:Dart.Snmp.SnmpVersion"/> to use.</param>
            <param name="community">Community string to use. "public" is a typical value.</param>
            <param name="security"><see cref="T:Dart.Snmp.Security"/> parameters for SnmpVersion.Three. Can be null.</param>
            <param name="agentEP">The <see cref="T:System.Net.IPEndPoint">IPEndPoint</see> of the agent.</param>
            <param name="retries">The number of times to retry a request if it times out waiting for a response.</param>
            <returns>A List of variables under <i>rootOid</i>.</returns>
            <remarks>
            <para>
            This method walks the MIB by sending a <see cref="T:Dart.Snmp.GetNextMessage"/> for each element under the root oid. 
            Returns after the complete subtree has been retrieved or any single request 
            exceeds the value of the Socket.ReceiveTimeout property.
            If retries is greater than 0, each retry must timeout before a timeout exception occurs.
            The time required to complete this request is a function of the number of available instance Id's (IID's) under the root oid.  
            </para>
            </remarks>
            <example>
        The following example demonstrates how to walk a MIB and display the response variables.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Perform MIB walk on a worker thread
            manager1.Start(walkMib, manager1.Mib.GetByNodeName(NodeName.system).Oid);
        }

        private void walkMib(SnmpSocket managerSocket, object state)
        {
            //The state contains the OID to walk (in this case, the system group)
            string oid = state as string;

            //Walk the MIB from the specified root OID
            VariableList variables = managerSocket.Walk(oid, myAgentAddress);

            //Marshal variables returned to the UI thread using the Walk event
            manager1.Marshal(oid, variables, "", null);
        }

        private void manager1_Walk(object sender, WalkEventArgs e)
        {
            //Populate a treeview control with the returned variables
            e.Variables.Populate(tvwVariables, e.Oid, manager1.Mib);
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Perform MIB walk on a worker thread
            manager1.Start(AddressOf walkMib, manager1.Mib.GetByNodeName(NodeName.system).Oid)
        End Sub

        Private Sub walkMib(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'The state contains the OID to walk (in this case, the system group)
            Dim oid As String = TryCast(state, String)

            'Walk the MIB from the specified root OID
            Dim variables As VariableList = managerSocket.Walk(oid, myAgentAddress)

            'Marshal variables returned to the UI thread using the Walk event
            manager1.Marshal(oid, variables, "", Nothing)
        End Sub

        Private Sub manager1_Walk(ByVal sender As Object, ByVal e As WalkEventArgs)
            'Populate a treeview control with the returned variables
            e.Variables.Populate(tvwVariables, e.Oid, manager1.Mib)
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.Walk(System.String,Dart.Snmp.SnmpVersion,System.String,Dart.Snmp.Security,System.Net.IPEndPoint,System.Int32,System.Int32)">
            <summary>
            Performs one or more blocking GetBulk requests to walk a mib.
            </summary>
            <param name="rootOid">The root OID.</param>
            <param name="version"><see cref="T:Dart.Snmp.SnmpVersion"/> to use (must be SnmpVersion.Two or SnmpVersion.Three).</param>
            <param name="community">Community string to use. "public" is a typical value.</param>
            <param name="security"><see cref="T:Dart.Snmp.Security"/> parameters for SnmpVersion.Three. Can be null.</param>
            <param name="agentEP">The <see cref="T:System.Net.IPEndPoint">IPEndPoint</see> of the agent.</param>
            <param name="retries">The number of times to retry a request if it times out waiting for the response.</param>
            <param name="maxRepetitions">The max-repetitions value for each GetBulk request sent.</param>
            <returns>A List of variables under <i>rootOid</i>.</returns>
            <remarks>
            <para>
            This method walks the MIB by sending one or more <see cref="T:Dart.Snmp.GetBulkMessage"/> requests until the table is complete. 
            Returns after the complete subtree has been retrieved or any single request 
            exceeds the value of the Socket.ReceiveTimeout property.
            If retries is greater than 0, each retry must timeout before a timeout exception occurs.
            The time required to complete this request is a function of the number of available instance Id's (IID's) under the root oid.  
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.GetTable(System.String,System.String)">
            <summary>
            Performs a series of blocking GetNext requests to retrieve a table using SNMP version 1.
            </summary>
            <param name="tableOid">The OID that indicates the table to retrieve.</param>
            <param name="agentNameOrAddress">The IP Address in dot notation or hostname of the agent managing the table.</param>
            <returns>A two-dimensional Variable array representing the table.</returns>
            <remarks>
            <para>
            This method walks the MIB by sending a <see cref="T:Dart.Snmp.GetNextMessage"/> for each element in the table. 
            The method blocks and will not return until the complete table has been retrieved or any single request 
            exceeds the value of the Socket.ReceiveTimeout property. 
            The time required to complete this request is a function of the number of elements in a table.  
            Very large tables can take some time to retrieve.
            </para>
            <para>
            The returned Variable array is a two dimensional array.  
            Use Array.GetLength(0) and Array.GetLength(1), respectively, 
            to determine the number of rows and columns in the returned table.
            </para>
            <para>
            The remotePort defaults to the "well-known" agent port 161. The community defaults to "public".
            </para>
            <para>
            The format of the requested table array depends upon the specification of a valid tableOid.
            </para>
            <para>
            For improved performance, use <see cref="M:Dart.Snmp.SnmpSocket.GetResponse(Dart.Snmp.RequestMessage,System.String)"/> or 
            <see cref="M:Dart.Snmp.SnmpSocket.GetResponse(Dart.Snmp.RequestMessage,System.Net.IPEndPoint)"/> with a <see cref="T:Dart.Snmp.GetBulkMessage"/> 
            and specify the OIDs of the table columns.
            </para>
            </remarks>
            <example>
        The following example demonstrates how to retrieve a table using the GetTable method that utilizes GetNext requests.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Start a worker thread to retrieve and display an SNMP Table
            manager1.Start(getTable, null);
        }

        private void getTable(SnmpSocket managerSocket, object state)
        {
            //Retrieve the table data from the agent
            Variable[,] table = managerSocket.GetTable(manager1.Mib.GetByNodeName(NodeName.ifTable).Oid, SnmpVersion.Two, "public", null, myAgentAddress, 0);

            //Marshal table to UI thread
            manager1.Marshal(manager1.Mib.GetByNodeName(NodeName.ifTable).Oid, table, "", null);
        }

        private void manager1_Table(object sender, Dart.Snmp.TableEventArgs e)
        {
            //Raised on the UI thread.
            //Populate a ListView control with the table data
            buildTable(e.Table);
        }

        private void buildTable(Variable[,] table)
        {
            //Add columns to the listview for each column in the table
            for (int i = 0; i &lt; table.GetLength(1); i++)
                lvwTable.Columns.Add(table[0, i].Definition.Name, 150, HorizontalAlignment.Left);

            ListViewItem tableRow;
            int r, c = 0;
            for (r = 0; r &lt; table.GetLength(0); r++)
            {
                //Create a new row and add the first cell
                tableRow = new ListViewItem(table[r, 0].Value.ToString());

                //Add each additional cell in the row
                for (c = 1; c &lt; table.GetLength(1); c++)
                    tableRow.SubItems.Add((table[r, c] == null) ? "NULL" : table[r, c].Value.ToString());

                //Add the row to the listview
                lvwTable.Items.Add(tableRow);
            }
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Start a worker thread to retrieve and display an SNMP Table
            manager1.Start(AddressOf getTable, Nothing)
        End Sub

        Private Sub getTable(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Retrieve the table data from the agent
            Dim table(,) As Variable = managerSocket.GetTable(manager1.Mib.GetByNodeName(NodeName.ifTable).Oid, SnmpVersion.Two, "public", Nothing, myAgentAddress, 0)

            'Marshal table to UI thread
            manager1.Marshal(manager1.Mib.GetByNodeName(NodeName.ifTable).Oid, table, "", Nothing)
        End Sub

        Private Sub manager1_Table(ByVal sender As Object, ByVal e As Dart.Snmp.TableEventArgs)
            'Raised on the UI thread.
            'Populate a ListView control with the table data
            buildTable(e.Table)
        End Sub

        Private Sub buildTable(ByVal table(,) As Variable)
            'Add columns to the listview for each column in the table
            For i As Integer = 0 To table.GetLength(1) - 1
                lvwTable.Columns.Add(table(0, i).Definition.Name, 150, HorizontalAlignment.Left)
            Next i

            Dim tableRow As ListViewItem
            Dim r As Integer, c As Integer = 0
            For r = 0 To table.GetLength(0) - 1
                'Create a new row and add the first cell
                tableRow = New ListViewItem(table(r, 0).Value.ToString())

                'Add each additional cell in the row
                For c = 1 To table.GetLength(1) - 1
                    tableRow.SubItems.Add(If(table(r, c) Is Nothing, "NULL", table(r, c).Value.ToString()))
                Next c

                'Add the row to the listview
                lvwTable.Items.Add(tableRow)
            Next r
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.GetTable(System.String,Dart.Snmp.SnmpVersion,System.String,Dart.Snmp.Security,System.Net.IPEndPoint,System.Int32)">
            <summary>
            Performs a series of blocking GetNext requests to retrieve a table.
            </summary>
            <param name="tableOid">The OID that indicates the table to retrieve.</param>
            <param name="version"><see cref="T:Dart.Snmp.SnmpVersion"/> to use.</param>
            <param name="community">Community string to use. "public" is a typical value.</param>
            <param name="security"><see cref="T:Dart.Snmp.Security"/> parameters for SnmpVersion.Three. Can be null.</param>
            <param name="agentEP">The target <see cref="T:System.Net.IPEndPoint">IPEndPoint</see> used by the agent.</param>
            <param name="retries">The number of times to retry a request if it times out waiting for the response.</param>
            <returns>A two-dimensional Variable array representing the table.</returns>
            <remarks>
            <para>
            This method walks the MIB by sending a <see cref="T:Dart.Snmp.GetNextMessage"/> for each element in the table. 
            The method blocks and will not return until the complete table has been retrieved or any single request 
            exceeds the value of the Socket.ReceiveTimeout property. 
            If retries is greater than 0, each retry must timeout before a timeout exception occurs.
            The time required to complete this request is a function of the number of elements in a table.  
            Very large tables can take some time to retrieve.
            </para>
            <para>
            The returned Variable array is a two dimensional array.  
            Use Array.GetLength(0) and Array.GetLength(1), respectively, 
            to determine the number of rows and columns in the returned table.
            </para>
            <para>
            The remotePort defaults to the "well-known" agent port 161. The community defaults to "public".
            </para>
            <para>
            The format of the requested table array depends upon the specification of a valid tableOid.
            </para>
            <para>
            For improved performance, use <see cref="M:Dart.Snmp.SnmpSocket.GetResponse(Dart.Snmp.RequestMessage,System.String)"/> or 
            <see cref="M:Dart.Snmp.SnmpSocket.GetResponse(Dart.Snmp.RequestMessage,System.Net.IPEndPoint)"/> with <see cref="T:Dart.Snmp.GetBulkMessage"/> 
            and specify the OIDs of the table columns.
            </para>
            </remarks>
            <example>
        The following example demonstrates how to retrieve a table using the GetTable method that utilizes GetNext requests.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Start a worker thread to retrieve and display an SNMP Table
            manager1.Start(getTable, null);
        }

        private void getTable(SnmpSocket managerSocket, object state)
        {
            //Retrieve the table data from the agent
            Variable[,] table = managerSocket.GetTable(manager1.Mib.GetByNodeName(NodeName.ifTable).Oid, SnmpVersion.Two, "public", null, myAgentAddress, 0);

            //Marshal table to UI thread
            manager1.Marshal(manager1.Mib.GetByNodeName(NodeName.ifTable).Oid, table, "", null);
        }

        private void manager1_Table(object sender, Dart.Snmp.TableEventArgs e)
        {
            //Raised on the UI thread.
            //Populate a ListView control with the table data
            buildTable(e.Table);
        }

        private void buildTable(Variable[,] table)
        {
            //Add columns to the listview for each column in the table
            for (int i = 0; i &lt; table.GetLength(1); i++)
                lvwTable.Columns.Add(table[0, i].Definition.Name, 150, HorizontalAlignment.Left);

            ListViewItem tableRow;
            int r, c = 0;
            for (r = 0; r &lt; table.GetLength(0); r++)
            {
                //Create a new row and add the first cell
                tableRow = new ListViewItem(table[r, 0].Value.ToString());

                //Add each additional cell in the row
                for (c = 1; c &lt; table.GetLength(1); c++)
                    tableRow.SubItems.Add((table[r, c] == null) ? "NULL" : table[r, c].Value.ToString());

                //Add the row to the listview
                lvwTable.Items.Add(tableRow);
            }
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Start a worker thread to retrieve and display an SNMP Table
            manager1.Start(AddressOf getTable, Nothing)
        End Sub

        Private Sub getTable(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Retrieve the table data from the agent
            Dim table(,) As Variable = managerSocket.GetTable(manager1.Mib.GetByNodeName(NodeName.ifTable).Oid, SnmpVersion.Two, "public", Nothing, myAgentAddress, 0)

            'Marshal table to UI thread
            manager1.Marshal(manager1.Mib.GetByNodeName(NodeName.ifTable).Oid, table, "", Nothing)
        End Sub

        Private Sub manager1_Table(ByVal sender As Object, ByVal e As Dart.Snmp.TableEventArgs)
            'Raised on the UI thread.
            'Populate a ListView control with the table data
            buildTable(e.Table)
        End Sub

        Private Sub buildTable(ByVal table(,) As Variable)
            'Add columns to the listview for each column in the table
            For i As Integer = 0 To table.GetLength(1) - 1
                lvwTable.Columns.Add(table(0, i).Definition.Name, 150, HorizontalAlignment.Left)
            Next i

            Dim tableRow As ListViewItem
            Dim r As Integer, c As Integer = 0
            For r = 0 To table.GetLength(0) - 1
                'Create a new row and add the first cell
                tableRow = New ListViewItem(table(r, 0).Value.ToString())

                'Add each additional cell in the row
                For c = 1 To table.GetLength(1) - 1
                    tableRow.SubItems.Add(If(table(r, c) Is Nothing, "NULL", table(r, c).Value.ToString()))
                Next c

                'Add the row to the listview
                lvwTable.Items.Add(tableRow)
            Next r
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.GetTable(System.String,Dart.Snmp.SnmpVersion,System.String,Dart.Snmp.Security,System.Net.IPEndPoint,System.Int32,System.Int32)">
            <summary>
            Performs one or more blocking GetBulk requests to retrieve a table.
            </summary>
            <param name="tableOid">The OID that indicates the table to retrieve.</param>
            <param name="version"><see cref="T:Dart.Snmp.SnmpVersion"/> to use (cannot be SnmpVersion.One).</param>
            <param name="community">Community string to use. "public" is a typical value.</param>
            <param name="security"><see cref="T:Dart.Snmp.Security"/> parameters for SnmpVersion.Three. Can be null.</param>
            <param name="agentEP">The target <see cref="T:System.Net.IPEndPoint">IPEndPoint</see> used by the agent.</param>
            <param name="retries">The number of times to retry a request if it times out waiting for the response.</param>
            <param name="maxRepetitions">The max-repetitions value for each GetBulk request sent.</param>
            <returns>A two-dimensional Variable array representing the table.</returns>
            <remarks>
            <para>
            This method walks the MIB by sending one or more <see cref="T:Dart.Snmp.GetBulkMessage"/> requests until the table is complete. 
            The method blocks and will not return until the complete table has been retrieved or any single request 
            exceeds the value of the Socket.ReceiveTimeout property. 
            If retries is greater than 0, each retry must timeout before a timeout exception occurs.
            The time required to complete this request is a function of the number of elements in a table. 
            Very large tables can take some time to retrieve.
            </para>
            <para>
            The returned Variable array is a two dimensional array.  
            Use Array.GetLength(0) and Array.GetLength(1), respectively, 
            to determine the number of rows and columns in the returned table.
            </para>
            <para>
            The <i>version</i> must be SnmpVersion.Two or SnmpVersion.Three.
            </para>
            <para>
            The format of the requested table array depends upon the specification of a valid tableOid.
            </para>
            </remarks>
            <example>
        The following example demonstrates how to retrieve a table using the GetTable method that utilizes GetBulk requests.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Start a worker thread to retrieve and display an SNMP Table
            manager1.Start(getTable, null);
        }

        private void getTable(SnmpSocket managerSocket, object state)
        {
            //Retrieve table using GetTable with 20 max-repetitions (retrieves up to 20 rows)
            Variable[,] table = managerSocket.GetTable(manager1.Mib.GetByNodeName(NodeName.ifTable).Oid, SnmpVersion.Two, "public", null, myAgentAddress, 0, 20);

            //Marshal table to UI thread
            manager1.Marshal(manager1.Mib.GetByNodeName(NodeName.ifTable).Oid, table, "", null);
        }

        private void manager1_Table(object sender, Dart.Snmp.TableEventArgs e)
        {
            //Raised on the UI thread.
            //Populate a ListView control with the table data
            buildTable(e.Table);
        }

        private void buildTable(Variable[,] table)
        {
            //Add columns to the ListView for each column in the table
            for (int i = 0; i &lt; table.GetLength(1); i++)
                lvwTable.Columns.Add(table[0, i].Definition.Name, 150, HorizontalAlignment.Left);

            ListViewItem tableRow;
            int r, c = 0;
            for (r = 0; r &lt; table.GetLength(0); r++)
            {
                //Create a new row and add the first cell
                tableRow = new ListViewItem(table[r, 0].Value.ToString());

                //Add each additional cell in the row
                for (c = 1; c &lt; table.GetLength(1); c++)
                    tableRow.SubItems.Add((table[r, c] == null) ? "NULL" : table[r, c].Value.ToString());

                //Add the row to the listview
                lvwTable.Items.Add(tableRow);
            }
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Start a worker thread to retrieve and display an SNMP Table
            manager1.Start(AddressOf getTable, Nothing)
        End Sub

        Private Sub getTable(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Retrieve table using GetTable with 20 max-repetitions (retrieves up to 20 rows)
            Dim table(,) As Variable = managerSocket.GetTable(manager1.Mib.GetByNodeName(NodeName.ifTable).Oid, SnmpVersion.Two, "public", Nothing, myAgentAddress, 0, 20)

            'Marshal table to UI thread
            manager1.Marshal(manager1.Mib.GetByNodeName(NodeName.ifTable).Oid, table, "", Nothing)
        End Sub

        Private Sub manager1_Table(ByVal sender As Object, ByVal e As Dart.Snmp.TableEventArgs)
            'Raised on the UI thread.
            'Populate a ListView control with the table data
            buildTable(e.Table)
        End Sub

        Private Sub buildTable(ByVal table(,) As Variable)
            'Add columns to the ListView for each column in the table
            For i As Integer = 0 To table.GetLength(1) - 1
                lvwTable.Columns.Add(table(0, i).Definition.Name, 150, HorizontalAlignment.Left)
            Next i

            Dim tableRow As ListViewItem
            Dim r As Integer, c As Integer = 0
            For r = 0 To table.GetLength(0) - 1
                'Create a new row and add the first cell
                tableRow = New ListViewItem(table(r, 0).Value.ToString())

                'Add each additional cell in the row
                For c = 1 To table.GetLength(1) - 1
                    tableRow.SubItems.Add(If(table(r, c) Is Nothing, "NULL", table(r, c).Value.ToString()))
                Next c

                'Add the row to the listview
                lvwTable.Items.Add(tableRow)
            Next r
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.SnmpSocket.getResponseTable(Dart.Snmp.VariableList,System.String)">
            <summary>
            Fills 2 dimensional array with variables. Locations can remain null for sparsely populated tables.
            </summary>
            <param name="tableVariables"></param>
            <param name="tableOid"></param>
            <returns></returns>
        </member>
        <member name="T:Dart.Snmp.RequestMessage">
            <summary>
            RequestMessage is the base class for all request messages: 
            <see cref="T:Dart.Snmp.SetMessage"/>, <see cref="T:Dart.Snmp.GetMessage"/>, <see cref="T:Dart.Snmp.GetNextMessage"/>, <see cref="T:Dart.Snmp.GetBulkMessage"/> and <see cref="T:Dart.Snmp.InformMessage"/>. Serializable.
            </summary>
            <remarks>
            <para>RequestMessage specializes <see cref="T:Dart.Snmp.StandardMessage"/>.</para>
            <para>Derived classes process requests that are typically sent from managers to agents.</para>
            </remarks>
        </member>
        <member name="T:Dart.Snmp.GetMessage">
            <summary>
            Used to request IID values from SNMP agents.
            </summary>
            <remarks>
            <para>
            Specializes <see cref="T:Dart.Snmp.RequestMessage"/>. Used by an SNMP manager to request information from an SNMP agent. 
            The agent responds by constructing and sending the manager a <see cref="T:Dart.Snmp.ResponseMessage"/> that contains 
            the requested IIDs and values.
            </para>
            <para>Serializable using BinaryFormatter and XmlSerializer.</para>
            </remarks>
            <example>
        The following example demonstrates sending an SNMPv1 Get request to an agent and receiving the response.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Create and send request on a worker thread
            manager1.Start(manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact));
        }

        private void button2_Click(object sender, EventArgs e)
        {
            //If you don't have the MIB, retrieve the value by IID:
            manager1.Start(manager1_SendGetRequest, new Variable("1.3.6.1.2.1.1.4.0"));
        }

        private void manager1_SendGetRequest(SnmpSocket managerSocket, object state)
        {
            //Create Get Request
            GetMessage request = new GetMessage();
            request.Variables.Add(state as Variable);

            //Send request and get response
            ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

            //Marshal response to the UI thread using the Message event
            manager1.Marshal(new ResponseMessage[] { response }, "", null);
        }

        private void manager1_Message(object sender, MessageEventArgs e)
        {
            //Display info about the first variable in the response, and its value
            Variable vari = e.Messages[0].Variables[0];
            label1.Text += vari.Definition.ToString() + vari.Value.ToString() + "\r\n";
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create and send request on a worker thread
            manager1.Start(AddressOf manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact))
        End Sub

        Private Sub button2_Click(ByVal sender As Object, ByVal e As EventArgs)
            'If you don't have the MIB, retrieve the value by IID:
            manager1.Start(AddressOf manager1_SendGetRequest, New Variable("1.3.6.1.2.1.1.4.0"))
        End Sub

        Private Sub manager1_SendGetRequest(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Create Get Request
            Dim request As New GetMessage()
            request.Variables.Add(TryCast(state, Variable))

            'Send request and get response
            Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

            'Marshal response to the UI thread using the Message event
            manager1.Marshal(New ResponseMessage() { response }, "", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
            'Display info about the first variable in the response, and its value
            Dim vari As Variable = e.Messages(0).Variables(0)
            label1.Text &amp;= vari.Definition.ToString() &amp; vari.Value.ToString() &amp; vbCrLf
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.GetMessage.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
            <remarks>
            <para>An SNMP manager will use this constructor before adding variables with requested IIDs to <see cref="P:Dart.Snmp.MessageBase.Variables"/>. 
            It is expected that the agent will respond with the values of those IIDs. 
            The Manager component uses <see cref="M:Dart.Snmp.StandardMessage.Encode"/>to encode the message before sending.</para>
            </remarks>
        </member>
        <member name="T:Dart.Snmp.GetNextMessage">
            <summary>
            Used to request information about IIDs from SNMP agents while discovering 
            what IIDs that agent manages.
            </summary>
            <remarks>
            <para>
            Specializes <see cref="T:Dart.Snmp.RequestMessage"/>.
            Used by an SNMP manager to request information from an SNMP agent while discovering what IIDs are being managed. 
            The agent will typically respond by constructing and sending the manager a <see cref="T:Dart.Snmp.ResponseMessage"/> that contains the next IID 
            it manages (in lexicographical order) and its value. Multiple ID "fragments" may be requested, with 
            the manager expecting a ResponseMessage containing the next IID for each ID fragment specified.
            </para>
            <para>
            For example, using an ID fragment of "1" in GetNextMessage might return an IID of "1.3.6.1.2.1.1.1.0" in the ResponseMessage,
            indicating that this is the first IID managed by the agent.
            </para>
            <para>Serializable using BinaryFormatter and XmlSerializer.</para>
            </remarks>
            <example>
        The following example demonstrates how to send GetNext requests, and how to manually walk an agent using GetNext requests.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Create and send request on a worker thread
            manager1.Start(sendRequests, manager1.Mib.CreateVariable(NodeName.sysContact));
        }

        private void sendRequests(SnmpSocket managerSocket, object state)
        {
            //Create GetNext Request
            GetNextMessage request1 = new GetNextMessage();
            request1.Variables.Add(state as Variable);

            //Send request and get response
            //Response will include the next supported OID, which should be sysName.
            ResponseMessage response1 = managerSocket.GetResponse(request1, myAgentAddress);

            //Get the next supported OID after the one just received, which should be sysLocation.
            //Use the previous response to set the request variable for this GetNextMessage.
            GetNextMessage request2 = new GetNextMessage();
            request2.Variables.Add(response1.Variables[0]);
            ResponseMessage response2 = managerSocket.GetResponse(request2, myAgentAddress);

            //This process could be continued here to walk all values on the agent

            //Marshal messages to the UI thread using the Message event
            manager1.Marshal(new ResponseMessage[] { response1, response2 }, "", null);
        }

        private void manager1_Message(object sender, Dart.Snmp.MessageEventArgs e)
        {
            //Fires on the UI thread
            //Display info about the first variable of each response, and its value
            Variable varSysContact = e.Messages[0].Variables[0];
            Variable varSysName = e.Messages[1].Variables[0];
            label1.Text = varSysContact.Definition.ToString() + "\r\nValue: " + varSysContact.Value.ToString();
            label2.Text = varSysName.Definition.ToString() + "\r\nValue: " + varSysName.Value.ToString();
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create and send request on a worker thread
            manager1.Start(AddressOf sendRequests, manager1.Mib.CreateVariable(NodeName.sysContact))
        End Sub

        Private Sub sendRequests(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Create GetNext Request
            Dim request1 As New GetNextMessage()
            request1.Variables.Add(TryCast(state, Variable))

            'Send request and get response
            'Response will include the next supported OID, which should be sysName.
            Dim response1 As ResponseMessage = managerSocket.GetResponse(request1, myAgentAddress)

            'Get the next supported OID after the one just received, which should be sysLocation.
            'Use the previous response to set the request variable for this GetNextMessage.
            Dim request2 As New GetNextMessage()
            request2.Variables.Add(response1.Variables(0))
            Dim response2 As ResponseMessage = managerSocket.GetResponse(request2, myAgentAddress)

            'This process could be continued here to walk all values on the agent

            'Marshal messages to the UI thread using the Message event
            manager1.Marshal(New ResponseMessage() { response1, response2 }, "", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As Dart.Snmp.MessageEventArgs)
            'Fires on the UI thread
            'Display info about the first variable of each response, and its value
            Dim varSysContact As Variable = e.Messages(0).Variables(0)
            Dim varSysName As Variable = e.Messages(1).Variables(0)
            label1.Text = varSysContact.Definition.ToString() &amp; vbCrLf &amp; "Value: " &amp; varSysContact.Value.ToString()
            label2.Text = varSysName.Definition.ToString() &amp; vbCrLf &amp; "Value: " &amp; varSysName.Value.ToString()
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.GetNextMessage.#ctor">
            <summary>
            Initializes a new instance of the GetNextMessage class.
            </summary> 
            <remarks>
            <para>An SNMP manager will use this constructor before adding Variable instances to <see cref="P:Dart.Snmp.MessageBase.Variables"/>.
            The Manager component will use the Encode method to encode the message before sending, 
            but the application can also use the Encode method to inspect the contents of the encoded message.</para>
            </remarks>
        </member>
        <member name="T:Dart.Snmp.ResponseMessage">
            <summary>
            Used to send information about IIDs from an SNMP agent to a manager.
            </summary>
            <remarks>
            <para>Serializable using BinaryFormatter and XmlSerializer.</para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.ResponseMessage.#ctor">
            <summary>
            Initializes a new ResponseMessage.
            </summary>
            <remarks>
            An SNMP manager will use this constructor before adding Variable instances to <see cref="P:Dart.Snmp.MessageBase.Variables"/>. 
            </remarks>
        </member>
        <member name="M:Dart.Snmp.ResponseMessage.#ctor(Dart.Snmp.RequestMessage,Dart.Snmp.SnmpBase)">
            <summary>
            Initializes a new instance of the ResponseMessage class based upon the request, authoritative engine and variables provided.
            </summary>
            <param name="request">The RequestMessage representing the request received from the SNMP manager.</param>
            <param name="entity">Source of <see cref="F:Dart.Snmp.Agent.Variables"/>, <see cref="P:Dart.Snmp.Agent.SysUpTime"/> and <see cref="T:Dart.Snmp.AuthoritativeEngine"/> used to create the ResponseMessage.</param>
            <remarks>
            <para>
            This constructor will create a ResponseMessage with a matching <see cref="P:Dart.Snmp.MessageBase.Version"/>, <see cref="P:Dart.Snmp.StandardMessage.Id"/>, 
            and <see cref="F:Dart.Snmp.StandardMessage.Security"/>. <see cref="F:Dart.Snmp.Agent.Variables"/> is used to populate MessageBase.Variables with IID/Value pairs.
            </para>
            <para>
            A <see cref="T:Dart.Snmp.SetMessage"/> request will update <see cref="F:Dart.Snmp.Agent.Variables"/> as applicable.
            </para>
            <para>The second parameter was changed from "Agent" to "SnmpBase" in version 4.8.2.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The request or entity parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The entity parameter must be of type Agent when request is a SetMessage, GetMessage, GetNextMessage or GetBulkMessage.</exception>
        </member>
        <member name="M:Dart.Snmp.ResponseMessage.#ctor(Dart.Snmp.RequestMessage)">
            <summary>
            Initializes a new instance of the ResponseMessage class based upon the request. Variables are not initialized.
            </summary>
            <param name="request">The RequestMessage representing the request received from the SNMP manager.</param>
            <remarks>
            This constructor will create a ResponseMessage with a matching <see cref="P:Dart.Snmp.MessageBase.Version"/>, 
            <see cref="P:Dart.Snmp.StandardMessage.Id"/>, and <see cref="F:Dart.Snmp.StandardMessage.Security"/>. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The request is null.</exception>
        </member>
        <member name="M:Dart.Snmp.ResponseMessage.ToString">
            <summary>
            Provides a description of the message.
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:Dart.Snmp.ResponseMessage.CreateGetResponseMessage(Dart.Snmp.GetMessage,Dart.Snmp.Agent)">
            <summary>
            Refactored 11-11-14, issue 555, to properly check for OID in Mib as well.
            </summary>
            <param name="request"></param>
            <param name="agent"></param>
        </member>
        <member name="P:Dart.Snmp.ResponseMessage.ErrorStatus">
            <summary>
            Gets or sets the error status field that indicates the completeness of the response.
            </summary>
            <value>An enumerated type that indicates the error associated with Variables[ResponseMessage.ErrorIndex].</value>
            <remarks>
            <para>SNMP only provides error reporting for the first variable found with an error. 
            Variable objects found before Variables[ResponseMessage.ErrorIndex] usually contain valid data.</para>
            </remarks>
        </member>
        <member name="P:Dart.Snmp.ResponseMessage.ErrorIndex">
            <summary>
            Gets or sets the error index field that indicates which variable caused an error.
            </summary>
            <value>A 0-based index that indicates which variable in <see cref="P:Dart.Snmp.MessageBase.Variables"/> 
            caused the error indicated by ErrorStatus. -1 indicates no error, or that the error is not specific to a variable.</value>
            <remarks>
            <para>SNMP only provides error reporting for the first variable found with an error. 
            Variable objects found before Variables[ResponseMessage.ErrorIndex] should contain valid data.</para>
            </remarks>
        </member>
        <member name="T:Dart.Snmp.ReportMessage">
            <summary>
            Used to send user-defined information.
            </summary>
            <remarks>
            <para>
            This message is used to send application-specific information. 
            It is used internally as part of the SNMP version 3 security mechanism.
            </para>
            <para>Serializable using BinaryFormatter and XmlSerializer.</para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.ReportMessage.#ctor">
            <summary>
            Initializes a new instance of the ReportMessage class.
            </summary>
            <remarks>
            <para>
            Creates an empty version 2 message. 
            The application will typically use <see cref="M:Dart.Snmp.VariableCollection.Add(Dart.Snmp.Variable)"/> to initialize 
            the application-specific variables to be sent.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.ReportMessage.#ctor(Dart.Snmp.RequestMessage)">
            <summary>
            Initializes a new instance of the ReportMessage class based upon the request provided.
            </summary>
            <remarks>
            <para>This constructor will create a ReportMessage with a matching <see cref="P:Dart.Snmp.MessageBase.Version"/>, 
            <see cref="P:Dart.Snmp.StandardMessage.Id"/>, and <see cref="F:Dart.Snmp.StandardMessage.Security"/>.  
            All RequestMessage types are supported.</para>
            </remarks>
            <param name="request">The RequestMessage representing the request received from the SNMP manager.</param>
        </member>
        <member name="P:Dart.Snmp.ReportMessage.Type">
            <summary>
            Returns a <see cref="T:Dart.Snmp.ReportType"/> based upon Variable[0].Id.
            </summary>
        </member>
        <member name="T:Dart.Snmp.SetMessage">
            <summary>
            The SetMessage class is used to send update information from an SNMP version 1/2/3 manager to an agent.
            </summary>
            <remarks>
            <para>SetMessage derives from StandardMessage.</para>
            <para>Typically, only IIDs with Access.WriteOnly or Access.ReadWrite access may be updated using SetMessage.</para>
            <para>Serializable using BinaryFormatter and XmlSerializer.</para>
            </remarks>
            <example>
        The following example demonstrates how to send a SNMPv3 Set request and receive the response.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Create and send request on a worker thread
            manager1.Start(sendRequest, manager1.Mib.CreateVariable(NodeName.sysContact, "Systems Admin"));
        }

        private void sendRequest(SnmpSocket managerSocket, object state)
        {
            //Create Set Request
            SetMessage request = new SetMessage();
            request.Variables.Add(state as Variable);

            //Use version 3. Setup security username and passwords.
            request.Version = SnmpVersion.Three;
            request.Security.User.Name = "testAuthPriv";
            request.Security.User.AuthenticationProtocol = AuthenticationProtocol.Md5;
            request.Security.User.AuthenticationPassword = "dartauth";
            request.Security.User.PrivacyProtocol = PrivacyProtocol.Des;
            request.Security.User.PrivacyPassword = "dartpriv";

            //Send request and get response
            ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

            //Marshal message to the UI thread using the Message event
            manager1.Marshal(new ResponseMessage[] { response }, "", null);
        }

        private void manager1_Message(object sender, Dart.Snmp.MessageEventArgs e)
        {
            //Fires on the UI thread
            //Display info about the first variable in the response, and its value
            Variable vari = e.Messages[0].Variables[0];
            label1.Text = vari.Definition.ToString() + "\r\nValue: " + vari.Value.ToString();
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create and send request on a worker thread
            manager1.Start(AddressOf sendRequest, manager1.Mib.CreateVariable(NodeName.sysContact, "Systems Admin"))
        End Sub

        Private Sub sendRequest(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Create Set Request
            Dim request As New SetMessage()
            request.Variables.Add(TryCast(state, Variable))

            'Use version 3. Setup security username and passwords.
            request.Version = SnmpVersion.Three
            request.Security.User.Name = "testAuthPriv"
            request.Security.User.AuthenticationProtocol = AuthenticationProtocol.Md5
            request.Security.User.AuthenticationPassword = "dartauth"
            request.Security.User.PrivacyProtocol = PrivacyProtocol.Des
            request.Security.User.PrivacyPassword = "dartpriv"

            'Send request and get response
            Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

            'Marshal message to the UI thread using the Message event
            manager1.Marshal(New ResponseMessage() { response }, "", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As Dart.Snmp.MessageEventArgs)
            'Fires on the UI thread
            'Display info about the first variable in the response, and its value
            Dim vari As Variable = e.Messages(0).Variables(0)
            label1.Text = vari.Definition.ToString() &amp; vbCrLf &amp; "Value: " &amp; vari.Value.ToString()
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.SetMessage.#ctor">
            <summary>
            Initializes a new instance of the SetMessage class.
            </summary>
            <remarks>
            <para>
            This constructor will create an empty version 1 message. 
            The application will typically use <see cref="M:Dart.Snmp.VariableCollection.Add(Dart.Snmp.Variable)"/>
            to initialize the message with variables to be sent.
            </para>
            </remarks>
        </member>
        <member name="T:Dart.Snmp.Trap1Message">
            <summary>
            Used to send SNMP version 1 traps from an agent to a manager.
            </summary>
            <remarks>
            <para>Trap1Message derives from MessageBase.</para>
            <para>Six classes are included that specialize the Trap1Message class to defined generic traps:</para>
            <para>1. Dart.Snmp.Trap1.coldStart</para>
            <para>2. Dart.Snmp.Trap1.warmStart</para>
            <para>3. Dart.Snmp.Trap1.linkDown</para>
            <para>4. Dart.Snmp.Trap1.linkUp</para>
            <para>5. Dart.Snmp.Trap1.authenticationFailure</para>
            <para>6. Dart.Snmp.Trap1.egpNeighborLoss</para>
            <para>Serializable using BinaryFormatter and XmlSerializer.</para>
            </remarks>
            <example>
        The following example demonstrates receiving notifications (Trap1, Trap2 and Inform messages), and responding to Inform messages.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Start listening for notifications
            manager1.Start(manager1_NotificationReceived, null);
        }

        private void manager1_NotificationReceived(Manager manager, MessageBase message, object state)
        {
            //Marshal message to the UI thread using the Message event
            if (message is Trap1Message)
                manager.Marshal(new MessageBase[] { message }, "trap1", null);
            else if (message is Trap2Message)
                manager.Marshal(new MessageBase[] { message }, "trap2", null);
            else if (message is InformMessage)
            {
                manager.Marshal(new MessageBase[] { message }, "inform", null);

                //Send response to inform message origin
                manager.Send(new ResponseMessage(message as InformMessage, null), message.Origin);
            }
        }

        private void manager1_Message(object sender, MessageEventArgs e)
        {
            //Update interface according to message type received
            switch (e.Message)
            {
                case "trap1":
                    Trap1Message trap = e.Messages[0] as Trap1Message;
                    label1.Text = "Trap1 received with Enterprise(" + trap.Enterprise + "), Generic Type (" +
                    trap.GenericTrap.ToString() + "), Specific Type(" + trap.SpecificTrap.ToString() + ")";
                    break;
                case "trap2":
                    Trap2Message notification = e.Messages[0] as Trap2Message;
                    label2.Text = "Trap2 received with OID (" + notification.Oid + ")";
                    break;
                case "inform":
                    InformMessage inform = e.Messages[0] as InformMessage;
                    label3.Text = "Inform received with " + inform.Variables.Count.ToString() + " variable(s).";
                    break;
            }
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Start listening for notifications
            manager1.Start(AddressOf manager1_NotificationReceived, Nothing)
        End Sub

        Private Sub manager1_NotificationReceived(ByVal manager As Manager, ByVal message As MessageBase, ByVal state As Object)
            'Marshal message to the UI thread using the Message event
            If TypeOf message Is Trap1Message Then
                manager.Marshal(New MessageBase() { message }, "trap1", Nothing)
            ElseIf TypeOf message Is Trap2Message Then
                manager.Marshal(New MessageBase() { message }, "trap2", Nothing)
            ElseIf TypeOf message Is InformMessage Then
                manager.Marshal(New MessageBase() { message }, "inform", Nothing)

                'Send response to inform message origin
                manager.Send(New ResponseMessage(TryCast(message, InformMessage), Nothing), message.Origin)
            End If
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
            'Update interface according to message type received
            Select Case e.Message
                Case "trap1"
                    Dim trap As Trap1Message = TryCast(e.Messages(0), Trap1Message)
                    label1.Text = "Trap1 received with Enterprise(" &amp; trap.Enterprise &amp; "), Generic Type (" &amp; trap.GenericTrap.ToString() &amp; "), Specific Type(" &amp; trap.SpecificTrap.ToString() &amp; ")"
                Case "trap2"
                    Dim notification As Trap2Message = TryCast(e.Messages(0), Trap2Message)
                    label2.Text = "Trap2 received with OID (" &amp; notification.Oid &amp; ")"
                Case "inform"
                    Dim inform As InformMessage = TryCast(e.Messages(0), InformMessage)
                    label3.Text = "Inform received with " &amp; inform.Variables.Count.ToString() &amp; " variable(s)."
            End Select
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.Trap1Message.#ctor">
            <summary>
            Creates a new instance of the Trap1Message class. Used for licensing only.
            </summary>
        </member>
        <member name="M:Dart.Snmp.Trap1Message.#ctor(System.Int32,System.Int32,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the Trap1Message class.
            </summary>
            <param name="genericTrap">Indicates the generic trap number to use when building the message.</param>
            <param name="specificTrap">When genericTrap is 6, specificTrap identifies the enterprise-specific trap.</param>
            <param name="enterprise">The Enterprise OID associated with the trap.</param>
            <param name="sysUpTime">System uptime, usually taken from <see cref="P:Dart.Snmp.Agent.SysUpTime"/>.</param>
            <remarks>
            <para>
            This constructor will create a version 1 message. 
            </para>
            <para>
            The agent initiating the trap should set <see cref="P:Dart.Snmp.Trap1Message.AgentAddress"/>.
            </para>
            <para>
            The application can add additional information by adding variables to <see cref="P:Dart.Snmp.MessageBase.Variables"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.Trap1Message.ToString">
            <summary>
            Provides a description of the message.
            </summary>
            <returns>String</returns>
        </member>
        <member name="P:Dart.Snmp.Trap1Message.AgentAddress">
            <summary>
            Gets or sets the address of the agent initiating the trap.
            </summary>
            <value>The address of the agent that initiated the trap, in dot notation (ww.xx.yy.zz).</value>
        </member>
        <member name="P:Dart.Snmp.Trap1Message.Enterprise">
            <summary>
            Gets the Enterprise OID associated with the Trap1Message.
            </summary>
            <value>Returns the Enterprise associated with the trap provided to the constructor.</value>
        </member>
        <member name="P:Dart.Snmp.Trap1Message.GenericTrap">
            <summary>
            Gets the generic trap as initialized in the constructor or when decoded.
            </summary>
            <remarks>
            The value of this property corresponds as follows:
            	<div class="tablediv">
            		<table cellspacing="0" class="dtTABLE">
            			<tr valign="top">
            				<th width="50%">Value</th>
            				<th width="50%">Name</th>
            			</tr>
            			<tr valign="top">
            				<td width="50%"> 0 </td>
            				<td width="50%"> coldStart </td>
            			</tr>
            			<tr valign="top">
            			    	<td width="50%"> 1 </td>
            				<td width="50%"> warmStart </td>
            			</tr>
            			<tr valign="top">
            				<td width="50%"> 2 </td>
            				<td width="50%"> linkDown </td>
            			</tr>
            			<tr valign="top">
            				<td width="50%"> 3 </td>
            				<td width="50%"> linkUp </td>
            			</tr>
            			<tr valign="top">
            				<td width="50%"> 4 </td>
            				<td width="50%"> authenticationFailure </td>
            			</tr>
            			<tr valign="top">
            				<td width="50%"> 5 </td>
            				<td width="50%"> egpNeighborLoss </td>
            			</tr>
            			<tr valign="top">
            				<td width="50%"> 6 </td>
            				<td width="50%"> enterpriseSpecific </td>
            			</tr>
            		</table>
            	</div>
            </remarks>
        </member>
        <member name="P:Dart.Snmp.Trap1Message.SpecificTrap">
            <summary>
            Gets the enterprise-specific trap value as initialized in the constructor or when decoded.
            </summary>
        </member>
        <member name="P:Dart.Snmp.Trap1Message.SysUpTime">
            <summary>
            Gets the time since the agent was initialized in hundredths of a second.
            </summary>
        </member>
        <member name="P:Dart.Snmp.Trap1Message.Variables">
            <summary>
            Gets or sets the VariableCollection that holds the variables.
            </summary>
            <value>
            The contents of this property depends upon the kind of trap. 
            Derived classes may provided properties that allow the application to get and set specific 
            properties that map to a specific variable in this collection.
            </value>
        </member>
        <member name="T:Dart.Snmp.GetBulkMessage">
            <summary>
            The GetBulkMessage class can be used to request large amounts of information from SNMP version 2/3 agents.
            </summary>
            <remarks>
            <para>
            For a higher-level method designed for retrieving a whole table using GetBulk requests, use <see cref="M:Dart.Snmp.SnmpSocket.GetTable(System.String,Dart.Snmp.SnmpVersion,System.String,Dart.Snmp.Security,System.Net.IPEndPoint,System.Int32,System.Int32)">SnmpSocket.GetTable()</see>.
            </para>
            <para>
            GetBulkMessage derives from the RequestMessage class. 
            It is typically used by an SNMP manager to request repetitive row (table) information from an SNMP agent. 
            The agent will typically respond by constructing and sending the manager a ResponseMessage that can be very large.
            </para>
            <para>Serializable using BinaryFormatter and XmlSerializer.</para>
            </remarks>
            <example>
        The following example demonstrates how to send a GetBulk request and display the response.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Create and send request on a worker thread
            manager1.Start(sendRequest, manager1.Mib.CreateVariable(NodeName.system));
        }

        private void sendRequest(SnmpSocket managerSocket, object state)
        {
            //Create GetBulk request
            GetBulkMessage request = new GetBulkMessage();

            //Retrieve the next 6 objects after 'system'
            //This means creating a GetBulk message with a single variable and Repetitions set to 6.
            request.Repetitions = 6;
            request.Variables.Add(state as Variable);

            //Send request and get response
            //Response will include next 6 supported objects, which should be sysDescr, sysObjectID, 
            //sysUpTime, sysContact, sysName, and sysLocation
            ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

            //Marshal response to the UI thread using the Message event
            manager1.Marshal(new ResponseMessage[] { response }, "", null);
        }

        private void manager1_Message(object sender, Dart.Snmp.MessageEventArgs e)
        {
            //Fires on the UI thread
            //Display info about the variables in the response
            ResponseMessage response = (ResponseMessage)e.Messages[0];
            foreach (Variable v in response.Variables)
                label1.Text += v.Id + ": " + v.Value.ToString() + Environment.NewLine;
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create and send request on a worker thread
            manager1.Start(AddressOf sendRequest, manager1.Mib.CreateVariable(NodeName.system))
        End Sub

        Private Sub sendRequest(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Create GetBulk request
            Dim request As New GetBulkMessage()

            'Retrieve the next 6 objects after 'system'
            'This means creating a GetBulk message with a single variable and Repetitions set to 6.
            request.Repetitions = 6
            request.Variables.Add(TryCast(state, Variable))

            'Send request and get response
            'Response will include next 6 supported objects, which should be sysDescr, sysObjectID, 
            'sysUpTime, sysContact, sysName, and sysLocation
            Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

            'Marshal response to the UI thread using the Message event
            manager1.Marshal(New ResponseMessage() { response }, "", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As Dart.Snmp.MessageEventArgs)
            'Fires on the UI thread
            'Display info about the variables in the response
            Dim response As ResponseMessage = CType(e.Messages(0), ResponseMessage)
            For Each v As Variable In response.Variables
                label1.Text &amp;= v.Id &amp; ": " &amp; v.Value.ToString() &amp; Environment.NewLine
            Next v
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.GetBulkMessage.#ctor">
            <summary>
            Initializes a new instance of the GetBulkMessage class.
            </summary>
            <remarks>
            <para>
            The application must set <see cref="P:Dart.Snmp.GetBulkMessage.NonRepeaters"/> and <see cref="P:Dart.Snmp.GetBulkMessage.Repetitions"/>, 
            and then add the corresponding "non-repeating" Variable instances followed by the "repeating" Variable instances. 
            The "non-repeating" variables behave like a GetNextMessage, so the first GetBulkMessage.NonRepeaters 
            will be returned as that many variables in the ResponseMessage. 
            The "repeating" variables behave like a series of GetNextMessages, so up to GetBulkMessage.Repetitions variable objects 
            will be returned in the ResponseMessage for each "repeating" variable added to the list.
            </para>
            <para>
            When used to retrieve a table, the application will typically set <see cref="P:Dart.Snmp.GetBulkMessage.NonRepeaters"/> to 0 and 
            <see cref="P:Dart.Snmp.GetBulkMessage.Repetitions"/> to the maximum number of rows expected in the table of interest. 
            Then variables are added to <see cref="P:Dart.Snmp.MessageBase.Variables"/> that represent the OID for each table column in the table. 
            When the returned MessageBase.Variables collection is enumerated, each IID should be parsed to determine 
            which value belongs to each row in each table column. 
            The IID for each value is the OID of the table column to which it belongs with the "indexer" into that 
            row added as a suffix. Repeating variables are returned as consecutive rows (For example, if 5 "repeating" 
            columns are requested, then the first row is returned in the first 5 variables of the response, 
            the second row is returned in the second 5 variables, and so on).
            </para>
            </remarks>
        </member>
        <member name="P:Dart.Snmp.GetBulkMessage.NonRepeaters">
            <summary>
            Gets or sets the number of variables in <see cref="P:Dart.Snmp.MessageBase.Variables"/> (starting at the beginning) 
            for which the GetBulkMessage will behave like a GetNextMessage.
            </summary>
            <remarks>
            <para>
            A positive value is used to combine the functionality of a GetNextMessage operation with the "repeating" 
            functionality specified by <see cref="P:Dart.Snmp.GetBulkMessage.Repetitions"/>.
            </para>
            </remarks>
            <value>The number of variable objects that should be treated as non-repeating IIDs.</value>
        </member>
        <member name="P:Dart.Snmp.GetBulkMessage.Repetitions">
            <summary>
            Gets or sets the maximum number of variables that should be returned in the ResponseMessage for each variable 
            in <see cref="P:Dart.Snmp.MessageBase.Variables"/> that follow the first "non-repeating" variables.
            </summary>
            <value>The maximum number of variables requested for each variable specified.</value>
            <remarks>
            <para>
            Used to limit the size of the <see cref="T:Dart.Snmp.ResponseMessage"/> generated by the agent.
            </para>
            <para>
            When used to retrieve a table, the application will typically set <see cref="P:Dart.Snmp.GetBulkMessage.NonRepeaters"/> 
            to 0 and Repetitions to the maximum number of rows expected in the table of interest. 
            Then variables are added to <see cref="P:Dart.Snmp.MessageBase.Variables"/> that represent the OID for each table column in the table. 
            When the returned MessageBase.Variables collection is enumerated, each IID should be parsed to determine 
            which value belongs to each row in each table column. 
            The IID for each value is the OID of the table column with an appended "indexer" into the row. 
            Repeating variables are returned as consecutive rows. 
            For example, if 5 column "repeaters" are provided as OID variables, then the first row is returned 
            in the first 5 variables in the response, the second row is returned in the second 5 variables, and so on.
            </para>
            </remarks>
        </member>
        <member name="T:Dart.Snmp.InformMessage">
            <summary>
            The InformMessage class is used to send information between SNMP version 2/ 3 managers.
            </summary>
            <remarks>
            <para>
            This message is used to send variables from an agent or manager to a manager. 
            A ResponseMessage containing the same variables is used to acknowledge the receipt of the information.
            </para>
            <para>Serializable using BinaryFormatter and XmlSerializer.</para>
            </remarks>
            <example>
        The following example demonstrates sending an inform message from a manager to a manager and receiving the response.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Send an inform request on a worker thread
            manager1.Start(sendInform, null);
        }

        private void sendInform(SnmpSocket managerSocket, object state)
        {
            //Create an inform message and send it to a manager
            InformMessage inform = new InformMessage();

            //The inform includes this manager's uptime
            inform.Variables.Add(manager1.Mib.CreateVariable(NodeName.sysUpTime, manager1.Security.AuthoritativeEngine.Time.ToString()));
            manager1.Marshal(new ResponseMessage[] { managerSocket.GetResponse(inform, remoteManagerAddress) }, "", null);
        }

        void manager1_Message(object sender, MessageEventArgs e)
        {
            label1.Text = "Manager received response to inform:\r\n" + ((ResponseMessage)e.Messages[0]).Variables[0].Value.ToString();
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Send an inform request on a worker thread
            manager1.Start(AddressOf sendInform, Nothing)
        End Sub

        Private Sub sendInform(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Create an inform message and send it to a manager
            Dim inform As New InformMessage()

            'The inform includes this manager's uptime
            inform.Variables.Add(manager1.Mib.CreateVariable(NodeName.sysUpTime, manager1.Security.AuthoritativeEngine.Time.ToString()))
            manager1.Marshal(New ResponseMessage() { managerSocket.GetResponse(inform, remoteManagerAddress) }, "", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
            label1.Text = "Manager received response to inform:" &amp; vbCrLf &amp; CType(e.Messages(0), ResponseMessage).Variables(0).Value.ToString()
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.InformMessage.#ctor">
            <summary>
            Initializes a new instance of the InformMessage class.
            </summary>
            <remarks>
            <para>
            This constructor will create an empty version 2 message. 
            The application will typically use <see cref="M:Dart.Snmp.VariableCollection.Add(Dart.Snmp.Variable)"/> to initialize the variables to be sent.
            </para>
            </remarks>
        </member>
        <member name="T:Dart.Snmp.MibParser">
            <summary>
            Summary description for MibParser.
            </summary>
        </member>
        <member name="M:Dart.Snmp.MibParser.Parse(System.IO.Stream,Dart.Snmp.MibParser.ObjectEventHandler,Dart.Snmp.MibParser.TrapEventHandler,Dart.Snmp.MibParser.NotificationEventHandler,Dart.Snmp.MibParser.IdentifierEventHandler,Dart.Snmp.MibParser.TextualConventionEventHandler,Dart.Snmp.MibParser.GroupEventHandler,Dart.Snmp.MibParser.ImportsEventHandler,Dart.Snmp.MibParser.ImportsEventHandler)">
            <summary>
            Parse through stream and raise appropriate events.
            Requirements:
            1. Don't raise any exception...always use the ExceptionEvent instead.
            2. No context information is necessary. This is a stateless method.
            3. All in/out types are strings or simple enumerated types. Conversions are the responsibility of the caller.
            </summary>
        </member>
        <member name="T:Dart.Snmp.SafeDictionary`2">
            <summary>
            Adds thread safety to Dictionary methods implemented in this class.
            </summary>
            <typeparam name="TKey">Key class for Dictionary.</typeparam>
            <typeparam name="TValue">Value class for Dictionary.</typeparam>
        </member>
        <member name="M:Dart.Snmp.SafeDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization support.
            </summary>
            <param name="info">SerializationInfo.</param>
            <param name="context">StreamingContext.</param>
        </member>
        <member name="M:Dart.Snmp.SafeDictionary`2.ContainsKey(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <remarks>Locks on <see cref="P:Dart.Snmp.SafeDictionary`2.SyncRoot"/> to provide automatic thread safety.</remarks>
            <param name="key">Key used for lookup.</param>
            <returns>true if the key is found in the Dictionary.</returns>
        </member>
        <member name="M:Dart.Snmp.SafeDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <remarks>Locks on <see cref="P:Dart.Snmp.SafeDictionary`2.SyncRoot"/> to provide automatic thread safety.</remarks>
            <param name="key">Key used for lookup.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Dart.Snmp.SafeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <remarks>Locks on <see cref="P:Dart.Snmp.SafeDictionary`2.SyncRoot"/> to provide automatic thread safety.</remarks>
            <param name="key">Key used for lookup.</param>
            <param name="value">Value to set. Null if the key-value pair does not exist in the Dictionary.</param>
            <returns>Returns true if the key value pair exists in the Dictionary, false otherwise.</returns>
        </member>
        <member name="P:Dart.Snmp.SafeDictionary`2.SyncRoot">
            <summary>
            Use this object to synchronize threadsafe access.
            </summary>
            <remarks>Lock on this property to provide thread safety.</remarks>
        </member>
        <member name="P:Dart.Snmp.SafeDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <remarks>Locks on <see cref="P:Dart.Snmp.SafeDictionary`2.SyncRoot"/> to provide automatic thread safety.</remarks>
            <param name="key">Key used for lookup.</param>
            <returns>TValue.</returns>
        </member>
        <member name="T:Dart.Snmp.Engine">
            <summary>
            Holds authoritative engine information sent between SNMP entities.
            </summary>
        </member>
        <member name="M:Dart.Snmp.Engine.#ctor">
            <summary>
            Constructor initializes Id to a 0-length array.
            </summary>
        </member>
        <member name="M:Dart.Snmp.Engine.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Constructor initializes properties to the provided values.
            </summary>
            <param name="id">Used to initialize <see cref="F:Dart.Snmp.Engine.Id"/>.</param>
            <param name="boots">Used to initialize <see cref="P:Dart.Snmp.Engine.Boots"/>.</param>
            <param name="time">Used to initialize <see cref="P:Dart.Snmp.Engine.Time"/>.</param>
        </member>
        <member name="F:Dart.Snmp.Engine.Id">
            <summary>
            Used to get and set a byte array that identifies the SNMP authoritative engine.
            </summary>
            <remarks>
            <para>
            When representing the local authoritative engine, the value of the EngineId used.
            When representing a remote authoritative engine, the value of the EngineId of the remote engine.
            </para>
            </remarks>
            <value>A byte array that identifies the SNMP authoritative engine in use.</value>
        </member>
        <member name="M:Dart.Snmp.Engine.ToString">
            <summary>
            Formats and returns a hex string representation of <see cref="F:Dart.Snmp.Engine.Id"/> (of format "xx-xx...xx-xx").
            </summary>
            <remarks>
            </remarks>
            <returns>Hex string representation of <see cref="F:Dart.Snmp.Engine.Id"/>.</returns>
        </member>
        <member name="M:Dart.Snmp.Engine.Clone">
            <summary>
            Create a deep copy of the Engine.
            </summary>
            <returns>A deep copy of the Engine.</returns>
        </member>
        <member name="P:Dart.Snmp.Engine.StartTime">
            <summary>
            Gets the starting time of the authoritative engine.
            </summary>
            <remarks>
            It is set when the Engine is created (to the current time), <see cref="P:Dart.Snmp.Engine.Time"/> is set, or when EngineTime is received from a remote authoritative engine.
            </remarks>
            <value>A DateTime object</value>
        </member>
        <member name="P:Dart.Snmp.Engine.Time">
            <summary>
            Gets or sets the number of seconds since the authoritative engine was initialized (seconds since <see cref="P:Dart.Snmp.Engine.StartTime"/>).
            </summary>
            <remarks>
            When set, <see cref="P:Dart.Snmp.Engine.StartTime"/> is updated to a new value. When read, this value increments over time.
            </remarks>
            <value>Int32</value>
        </member>
        <member name="P:Dart.Snmp.Engine.Boots">
            <summary>
            Gets or sets the number of boots the authoritative engine is reporting.
            </summary>
            <value>Int32</value>
            <remarks>
            Initialized to a value of 1. Automatically incremented when the value of <see cref="P:Dart.Snmp.Engine.Time"/> reaches Int32.MaxValue.
            </remarks>
        </member>
        <member name="T:Dart.Snmp.AuthoritativeEngine">
            <summary>
            Holds authoritative engine information that is used by SNMPv3 authentication processing.
            </summary>
            <example>
        The following example demonstrates adding a v3 user to an Agent's authorized users collection.
        <code lang="C#">
        private void addUser(string username, string authPass, AuthenticationProtocol authProt, string privPass, PrivacyProtocol privProt)
        {
            agent1.Security.AuthoritativeEngine.Users.Add(username, new User(username, authPass, authProt, privPass, privProt));
        }
        </code>
        <code lang="VB">
        Private Sub addUser(ByVal username As String, ByVal authPass As String, ByVal authProt As AuthenticationProtocol, ByVal privPass As String, ByVal privProt As PrivacyProtocol)
            agent1.Security.AuthoritativeEngine.Users.Add(username, New User(username, authPass, authProt, privPass, privProt))
        End Sub
        </code>
      </example>
        </member>
        <member name="F:Dart.Snmp.AuthoritativeEngine.UnsupportedSecLevelId">
            <summary>
            IID for usmStatsUnsupportedSecLevels
            </summary>
        </member>
        <member name="F:Dart.Snmp.AuthoritativeEngine.NotInTimeWindowId">
            <summary>
            IID for usmStatsNotInTimeWindows.
            </summary>
        </member>
        <member name="F:Dart.Snmp.AuthoritativeEngine.UnknownUserNameId">
            <summary>
            IID for usmStatsUnknownUserNames.
            </summary>
        </member>
        <member name="F:Dart.Snmp.AuthoritativeEngine.UnknownEngineIdId">
            <summary>
            IID for usmStatsUnknownEngineIds.
            </summary>
        </member>
        <member name="F:Dart.Snmp.AuthoritativeEngine.AuthenticationFailedId">
            <summary>
            IID for usmStatsWrongDigests.
            </summary>
        </member>
        <member name="F:Dart.Snmp.AuthoritativeEngine.DecryptionErrorsId">
            <summary>
            IID for usmStatsDecryptionErrors.
            </summary>
        </member>
        <member name="F:Dart.Snmp.AuthoritativeEngine.Users">
            <summary>
            A Dictionary of authorized SNMP version 3 users with associated passwords, with the username as the key.
            </summary>
            <remarks>
            <para>
            Initialize with usernames and associated <see cref="T:Dart.Snmp.User"/>s to authenticate and decrypt received SNMP version 3 packets.
            </para>
            <para>
            If the username from a message is not contained in this collection, <see cref="M:Dart.Snmp.SnmpBase.CreateResponse(Dart.Snmp.RequestMessage)">CreateResponse()</see> will return a <see cref="T:Dart.Snmp.ReportMessage"/>. 
            If the username from a message is contained in this collection but the message is encrypted with an incorrect privacy password, CreateResponse() will return null.
            </para>
            </remarks>
            <value>A Dictionary using Username as the key and a <see cref="T:Dart.Snmp.User"/> as the value.</value>
        </member>
        <member name="M:Dart.Snmp.AuthoritativeEngine.#ctor(System.Byte[])">
            <summary>
            Constructor initializes <see cref="T:Dart.Snmp.SimpleType.Id"/> and <see cref="F:Dart.Snmp.AuthoritativeEngine.UsmStats"/>.
            </summary>
            <param name="id">A byte[] that uniquely identifies the authoritative engine.</param>
        </member>
        <member name="F:Dart.Snmp.AuthoritativeEngine.UsmStats">
            <summary>
            Holds the usmStats variables used for generating <see cref="T:Dart.Snmp.ReportMessage">ReportMessages</see> in response to SNMPv3 authentication failures.
            </summary>
            <remarks>
            These values are used only to generate ReportMessages, and are not exposed for get requests by <see cref="M:Dart.Snmp.SnmpBase.CreateResponse(Dart.Snmp.RequestMessage)">Agent.CreateResponse()</see> by default; 
            to expose them for requests, add each variable within to Agent.Variables.
            </remarks>
        </member>
        <member name="M:Dart.Snmp.AuthoritativeEngine.CreateReport(Dart.Snmp.RequestMessage)">
            <summary>
            Creates a ReportMessage.
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Dart.Snmp.AuthoritativeEngine.Clone">
            <summary>
            Create a deep copy of the AuthoritativeEngine.
            </summary>
            <returns>A deep copy of the AuthoritativeEngine.</returns>
        </member>
        <member name="T:Dart.Snmp.SessionSecurity">
            <summary>
            Security configuration for SNMPv3 entities.
            </summary>
            <remarks>
            Can be serialized to persist the configuration.
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SessionSecurity.#ctor">
            <summary>
            Constructs a new instance using a default EngineId.
            </summary>
            <remarks>The ASCII value of "Dart.PowerSNMP" is used as the default EngineId.</remarks>
        </member>
        <member name="M:Dart.Snmp.SessionSecurity.#ctor(System.Byte[])">
            <summary>
            Constructs a new instance using the provided EngineId.
            </summary>
            <param name="id">Used to initialize <see cref="F:Dart.Snmp.Engine.Id"/>.</param>
        </member>
        <member name="F:Dart.Snmp.SessionSecurity.AuthoritativeEngine">
            <summary>
            Stores EngineId, EngineTime, EngineBoot and username/password values used for SNMPv3 authentication and privacy.
            </summary>
            <value><see cref="F:Dart.Snmp.SessionSecurity.AuthoritativeEngine"/>.</value>
            <remarks>
            <para>
            Agents are authoritative when responding to Manager requests and sending traps. Managers are authoritative when responding to Inform requests.
            </para>
            <para>
            <see cref="F:Dart.Snmp.Engine.Id"/> defaults to a byte[] holding the encoded ASCII string "Dart.PowerSNMP".
            </para>
            <para>
            Can be serialized to persist the configuration.
            </para>
            </remarks>
        </member>
        <member name="F:Dart.Snmp.SessionSecurity.EngineCache">
            <summary>
            Remote authoritative engine Id, Time and Boots are cached here when SNMPv3 discovery techniques are used. 
            The cache can be cleared to force subsequent SNMPv3 discovery.
            </summary>
            <remarks>
            SNMPv3 communications use a time window technique to authenticate messages. This dictionary caches identification and time information about each 
            remote authoritative engine, so encoded messages will contain a 'rolling' time that is synchronized with the remote engine being addressed.
            </remarks>
        </member>
        <member name="F:Dart.Snmp.SessionSecurity.TrapUsers">
            <summary>
            A list of <see cref="T:Dart.Snmp.TrapUser"/> objects used to authenticate or decrypt received SNMPv3 traps. Not used by <see cref="T:Dart.Snmp.Agent"/>.
            </summary>
            <remarks>
            To decode SNMPv3 traps for the <see cref="T:Dart.Snmp.User"/> received from any Agent, leave <see cref="P:Dart.Snmp.User.EngineId"/> empty. 
            To decode SNMPv3 traps for the User received from a specific Agent (more secure), populate User.EngineId with the sending Agent's
            Engine Id.
            </remarks>
        </member>
        <member name="T:Dart.Snmp.Security">
            <summary>
            This class controls Version 3 authentication and privacy procedures.
            </summary>
            <remarks>
            This class can be serialized and cached to persist SNMP version 3 security parameters.
            </remarks>
            <example>
        The following example demonstrates how to send a SNMPv3 Set request and receive the response.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Create and send request on a worker thread
            manager1.Start(sendRequest, manager1.Mib.CreateVariable(NodeName.sysContact, "Systems Admin"));
        }

        private void sendRequest(SnmpSocket managerSocket, object state)
        {
            //Create Set Request
            SetMessage request = new SetMessage();
            request.Variables.Add(state as Variable);

            //Use version 3. Setup security username and passwords.
            request.Version = SnmpVersion.Three;
            request.Security.User.Name = "testAuthPriv";
            request.Security.User.AuthenticationProtocol = AuthenticationProtocol.Md5;
            request.Security.User.AuthenticationPassword = "dartauth";
            request.Security.User.PrivacyProtocol = PrivacyProtocol.Des;
            request.Security.User.PrivacyPassword = "dartpriv";

            //Send request and get response
            ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

            //Marshal message to the UI thread using the Message event
            manager1.Marshal(new ResponseMessage[] { response }, "", null);
        }

        private void manager1_Message(object sender, Dart.Snmp.MessageEventArgs e)
        {
            //Fires on the UI thread
            //Display info about the first variable in the response, and its value
            Variable vari = e.Messages[0].Variables[0];
            label1.Text = vari.Definition.ToString() + "\r\nValue: " + vari.Value.ToString();
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create and send request on a worker thread
            manager1.Start(AddressOf sendRequest, manager1.Mib.CreateVariable(NodeName.sysContact, "Systems Admin"))
        End Sub

        Private Sub sendRequest(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Create Set Request
            Dim request As New SetMessage()
            request.Variables.Add(TryCast(state, Variable))

            'Use version 3. Setup security username and passwords.
            request.Version = SnmpVersion.Three
            request.Security.User.Name = "testAuthPriv"
            request.Security.User.AuthenticationProtocol = AuthenticationProtocol.Md5
            request.Security.User.AuthenticationPassword = "dartauth"
            request.Security.User.PrivacyProtocol = PrivacyProtocol.Des
            request.Security.User.PrivacyPassword = "dartpriv"

            'Send request and get response
            Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

            'Marshal message to the UI thread using the Message event
            manager1.Marshal(New ResponseMessage() { response }, "", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As Dart.Snmp.MessageEventArgs)
            'Fires on the UI thread
            'Display info about the first variable in the response, and its value
            Dim vari As Variable = e.Messages(0).Variables(0)
            label1.Text = vari.Definition.ToString() &amp; vbCrLf &amp; "Value: " &amp; vari.Value.ToString()
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.Security.#ctor">
            <summary>
            Initializes a new instance of the Security class.
            </summary>
            <remarks>
            <para>
            The Security class is used with Version 3 messages to provide message authentication and privacy.  
            The Security object is not used or added to a message unless <see cref="P:Dart.Snmp.MessageBase.Version"/> is SnmpVersion.Three.  
            If a message to be sent is a Version 3 message, at a minimum you must set Security.User.Name
            to a valid user name for the Agent you are sending requests to.
            </para>
            </remarks>
        </member>
        <member name="F:Dart.Snmp.Security.EngineId">
            <summary>
            Gets or sets the engine Id of the remote authoritative engine.
            </summary>
            <remarks>
            <para>
            If not set, dynamic discovery techniques are used to get the remote authoritative EngineId.
            </para>
            </remarks>
            <value>Byte array</value>
        </member>
        <member name="F:Dart.Snmp.Security.User">
            <summary>
            Specifies username, passwords and authentication/privacy level used. 
            </summary>
            <remarks>
            <para>
            A manager sending an SNMPv3 request must set this property to the values needed for user authentication and encryption. 
            Agents are authoritative when responding to Manager requests and sending traps. Managers are authoritative when responding to Inform requests.
            </para>
            <para>
            An agent sending an SNMPv3 trap will typically set this property to a user found in <see cref="F:Dart.Snmp.AuthoritativeEngine.Users">Agent.Security.AuthoritativeEngine.Users</see>.
            </para>
            <para>
            This class caches intermediate hashing and encryption values, so re-using instances improves performance.
            </para>
            </remarks>
        </member>
        <member name="F:Dart.Snmp.Security.ContextId">
            <summary>
            Gets or sets the contextEngineId used in the SNMPv3 scoped PDU.
            </summary>
            <remarks>
            <para>
            If not set, encoding uses <see cref="F:Dart.Snmp.Engine.Id"/> for this field.
            </para>
            </remarks>
            <value>Byte array</value>
        </member>
        <member name="F:Dart.Snmp.Security.ContextName">
            <summary>
            Gets or sets the contextName used in the SNMPv3 scoped PDU.
            </summary>
            <value>Byte array</value>
        </member>
        <member name="F:Dart.Snmp.Security.Id">
            <summary>
            Gets or sets the message identification field in the security header.
            </summary>
            <value>An integer that can pair a version 3 ResponseMessage to a specific RequestMessage.</value>
            <remarks>
            <para>The default constructor for any class derived from RequestMessage will automatically initialize this value
            to one higher than the previous. The first instance will have an Id of 1, the second an Id of 2, and so on.</para>
            <para>All decoded messages return the value encoded in the message.
            Version 3 messages use this property in lieu of <see cref="P:Dart.Snmp.StandardMessage.Id"/>.</para>
            <para>This property is unrelated to Variable.Id, which is either an OID or IID.</para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.Security.ToHexString(System.Byte[])">
            <summary>
            Encodes the provided byte[] and returns its hex string representation ("xx-xx...xx-xx").
            </summary>
            <returns>Hex string representation of <see cref="F:Dart.Snmp.Security.Id"/>.</returns>
        </member>
        <member name="M:Dart.Snmp.Security.ParseHexString(System.String)">
            <summary>
            Decodes the provided hex string ("xx-xx...xx-xx") into its byte[] representation.
            </summary>
            <param name="hexString">Hex string of format "xx-xx...xx-xx".</param>
        </member>
        <member name="M:Dart.Snmp.Security.Encode(System.Boolean)">
            <summary>
            Encode for Discover #1, #2, or as described by properties.
            </summary>
            <param name="reportable"></param>
            <returns></returns>
        </member>
        <member name="M:Dart.Snmp.Security.Decode(Dart.Snmp.Sequence,System.Byte[],System.Int32,System.Net.IPEndPoint,Dart.Snmp.Security,Dart.Snmp.SnmpBase)">
            <summary>
            Returns true when successful, false when we fail to decode (no PDU created).
            </summary>
            <param name="sequence"></param>
            <param name="buffer"></param>
            <param name="count"></param>
            <param name="origin"></param>
            <param name="requestSecurity"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="P:Dart.Snmp.Security.EngineTime">
            <summary>
            Gets the encoded authoritative engine time used for SNMPv3 communications. Value is not serialized.
            </summary>
            <remarks>
            <para>
            Decoding initializes this property from the data packet. When encoding, this value will be populated by <see cref="P:Dart.Snmp.Engine.Time"/> from the corresponding <see cref="T:Dart.Snmp.Engine"/> in 
            <see cref="F:Dart.Snmp.SessionSecurity.EngineCache">SnmpBase.Security.EngineCache</see> if present. To override the value encoded in subsequent messages, modify the value in EngineCache.
            </para>
            </remarks>
            <value>Integer. The number of seconds since <see cref="P:Dart.Snmp.Security.EngineBoots"/> last changed.</value>
        </member>
        <member name="P:Dart.Snmp.Security.EngineBoots">
            <summary>
            Gets the encoded authoritative engine boots used for SNMPv3 communications. Value is not serialized.
            </summary>
            <remarks>
            <para>
            Decoding initializes this property from the data packet. When encoding, this value will be populated by <see cref="P:Dart.Snmp.Engine.Boots"/> from the corresponding <see cref="T:Dart.Snmp.Engine"/> in 
            <see cref="F:Dart.Snmp.SessionSecurity.EngineCache">SnmpBase.Security.EngineCache</see> if present. To override the value encoded in subsequent messages, modify the value in EngineCache.
            </para>
            </remarks>
            <value>Integer. The number of boots of the SNMP engine.</value>
        </member>
        <member name="P:Dart.Snmp.Security.Level">
            <summary>
            Indicates the <see cref="T:Dart.Snmp.SecurityLevel"/> found in an SNMPv3 packet when decoding.
            </summary>
        </member>
        <member name="P:Dart.Snmp.Security.DecodingException">
            <summary>
            When not null, indicates the problem found when attempting to decode the message.
            </summary>
        </member>
        <member name="P:Dart.Snmp.Security.ReportFlag">
            <summary>
            Indicates whether a <see cref="T:Dart.Snmp.ReportMessage"/> should be generated when <see cref="M:Dart.Snmp.SnmpBase.CreateResponse(Dart.Snmp.RequestMessage)"/> is used.
            </summary>
        </member>
        <member name="P:Dart.Snmp.Security.AuthenticationFailed">
            <summary>
            Returns true if authentication failed.
            </summary>
            <remarks>
            Returns true if auth is specified in the incoming message and the matching user credentials in 
            <see cref="F:Dart.Snmp.SnmpBase.Security"/> failed to produce an authentication hash matching the one in the packet. 
            This can happen when the authentication password is wrong, the authentication protocol is wrong, or the message has been tampered with.
            </remarks>
        </member>
        <member name="T:Dart.Snmp.TrapUser">
            <summary>
            Provides username and passwords used to authenticate and decrypt SNMP version 3 traps.
            </summary>
        </member>
        <member name="T:Dart.Snmp.User">
            <summary>
            Provides username and passwords used to authenticate and encrypt/decrypt SNMP version 3 packets.
            </summary>
            <remarks>
            <para>
            A username string is used as the key to lookup this User object in <see cref="F:Dart.Snmp.AuthoritativeEngine.Users"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.User.#ctor(System.Byte[],System.String,System.String,Dart.Snmp.AuthenticationProtocol,System.String,Dart.Snmp.PrivacyProtocol)">
            <summary>
            Initializes a new instance for decoding received traps.
            </summary>
            <param name="engineId">Provided to associate given username with a specific engine. If of length 0, the username will match on any engine.</param>
            <param name="name">Name of this user.</param>
            <param name="authenticationPassword">Either null or the value used by the manager. Used for packet authentication.</param>
            <param name="authenticationProtocol">Specifies the authentication hash to use.</param>
            <param name="privacyPassword">Either null or the value used by the manager. Used for packet privacy (decryption).</param>
            <param name="privacyProtocol">Specifies the encryption protocol to use.</param>
            <remarks>
            <para>
            If privacyPassword in not null, then authenticationPassword must not be null.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            A required parameter is a string of 0 length or null, or authenticationPassword is null and privacyPassword is not.
            </exception>
        </member>
        <member name="M:Dart.Snmp.User.#ctor(System.String,System.String,Dart.Snmp.AuthenticationProtocol,System.String,Dart.Snmp.PrivacyProtocol)">
            <summary>
            When passwords are provided, initializes a new instance using authentication and privacy.
            </summary>
            <param name="name">Name of this user.</param>
            <param name="authenticationPassword">Either null or the value used by the manager. Used for packet authentication.</param>
            <param name="authenticationProtocol">Specifies the authentication hash to use.</param>
            <param name="privacyPassword">Either null or the value used by the manager. Used for packet privacy (decryption).</param>
            <param name="privacyProtocol">Specifies the encryption protocol to use.</param>
            <remarks>
            <para>
            If privacyPassword in not null, then authenticationPassword must not be null.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            A required parameter is a string of 0 length or null, or authenticationPassword is null and privacyPassword is not.
            </exception>
        </member>
        <member name="M:Dart.Snmp.User.#ctor(System.String,System.String,Dart.Snmp.AuthenticationProtocol)">
            <summary>
            Initializes a new instance using authentication and no privacy.
            </summary>
            <param name="name">Name of this user.</param>
            <param name="authenticationPassword">Either null or the value used by the user. Used for packet authentication.</param>
            <param name="authenticationProtocol">Specifies the authentication hash to use.</param>
        </member>
        <member name="M:Dart.Snmp.User.#ctor(System.String)">
            <summary>
            Initializes a new instance using neither authentication nor privacy.
            </summary>
            <param name="name">Name of this user.</param>
        </member>
        <member name="M:Dart.Snmp.User.#ctor">
            <summary>
            Initializes a new instance using neither authentication nor privacy.
            </summary>
        </member>
        <member name="M:Dart.Snmp.User.Clone">
            <summary>
            Create a deep copy of the User.
            </summary>
            <returns>A deep copy of the User.</returns>
        </member>
        <member name="F:Dart.Snmp.User.Name">
            <summary>
            Gets or sets the username initialized in the constructor.
            </summary>
            <remarks>
            </remarks>
            <value>The string value that identifies the user.</value>
        </member>
        <member name="P:Dart.Snmp.User.EngineId">
            <summary>
            Engine Id.
            </summary>
        </member>
        <member name="P:Dart.Snmp.User.SecurityLevel">
            <summary>
            Returns the <see cref="P:Dart.Snmp.User.SecurityLevel"/> specified for this user.
            </summary>
        </member>
        <member name="P:Dart.Snmp.User.AuthenticationPassword">
            <summary>
            Gets or sets the authentication password initialized in the constructor.
            </summary>
            <remarks>
            <para>This agent side property correlates to <see cref="P:Dart.Snmp.User.AuthenticationPassword"/> on the manager side. 
            It should be the same value used by the sender of the packet when the authentication algorithm was used.
            </para>
            </remarks>
            <value>The string value used to authenticate the packet.</value>
        </member>
        <member name="P:Dart.Snmp.User.AuthenticationProtocol">
            <summary>
            Gets or sets the authentication protocol (hashing technique) to use.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Dart.Snmp.User.PrivacyPassword">
            <summary>
            Gets or sets the privacy password initialized in the constructor.
            </summary>
            <remarks>
            </remarks>
            <value>The string value used to decrypt the packet.</value>
        </member>
        <member name="P:Dart.Snmp.User.PrivacyProtocol">
            <summary>
            Gets or sets the privacy protocol initialized in the constructor.
            </summary>
        </member>
        <member name="M:Dart.Snmp.TrapUser.#ctor(System.Byte[],System.String,System.String,Dart.Snmp.AuthenticationProtocol,System.String,Dart.Snmp.PrivacyProtocol)">
            <summary>
            Provides passwords for authenticating and decrypting SNMPv3 traps.
            </summary>
            <param name="engineId">Id of the engine that generated the trap. A null value will match on any received EngineId.</param>
            <param name="name">Name of the user.</param>
            <param name="authenticationPassword">Either null or the value used by the agent. Used for packet authentication.</param>
            <param name="authenticationProtocol">Specifies the authentication hash to use.</param>
            <param name="privacyPassword">Either null or the value used by the agent. Used for packet privacy (decryption).</param>
            <param name="privacyProtocol">Specifies the encryption protocol to use.</param>
            <remarks>
            <para>
            If privacyPassword in not null, then authenticationPassword must not be null.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            An argument is a string of 0 length, or authenticationPassword is null and privacyPassword is not.
            </exception>
        </member>
        <member name="T:Dart.Snmp.SimpleTaggedType">
            <summary>
            The SimpleTaggedType class is the base class for all encoded value types in an SNMP message.
            </summary>
            <remarks>
            <para>
            The SimpleTaggedType class is derived from the TaggedType class and provides a basis for all derived objects 
            used to represent values within a SNMP message.
            </para>
            <para>
            Many classes derive from SimpleTaggedType:
            </para>
            <para>
            1. The Counter class specializes the SimpleTaggedType class for SNMP values the represent 32 bit unsigned counter.
            </para>
            <para>
            2. The Counter64 class specializes the SimpleTaggedType class for SNMP values that represent 64 bit unsigned counters.
            </para>
            <para>
            3. The Empty class specializes the SimpleTaggedType class for SNMP values that represent Null value.
            </para>
            <para>
            4. The EndOfMibView class specializes the SimpleTaggedType class for SNMP values used to signal no further values
            available in GetNext and GetBulk requests.
            </para>
            <para>
            5. The Gauge class specializes the SimpleTaggedType class for SNMP values used to represent 32 bit signed values.
            </para>
            <para>
            6. The Id class specializes the SimpleTaggedType class for SNMP values used to represent object id values.
            </para>
            <para>
            7. The Integer class specializes the SimpleTaggedType class for SNMP values used to represent 32 bit signed values.
            </para>
            <para>
            8. The IpAddress class specializes the SimpleTaggedType class for SNMP values used to represent Ip address values.
            </para>
            <para>
            9. The NoSuchInstance class specializes the SimpleTaggedType class for SNMP values used in responses to signal 
            the requested instance does not exist.
            </para>
            <para>
            10. The NoSuchObject class specializes the SimpleTaggedType class for SNMP values used in responses to signal 
            the requests object does not exist.
            </para>
            <para>
            11. The Nsap class specializes the SimpleTaggedType class and should not be used in newly developed applications.
            </para>
            <para>
            12. The OctetString class specializes the SimpleTaggedType class for SNMP values used to represent string values.
            </para>
            <para>
            13. The Opaque class specializes the SimpleTaggedType class for SNMP values used to represent arbitrary lengths of byte value.
            </para>
            <para>
            14. The TickTicks class specializes the SimpleTaggedType class for SNMP values used to represent non-negative counts 
            of time in hundredths of a second.
            </para>
            <para>
            15. The UInteger class specializes the SimpleTaggedType class for SNMP values used to represent 32 bit unsigned values.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SimpleTaggedType.ToArray">
            <summary>
            Returns a byte array representation of the object.
            </summary>
            <returns>The object represented as a byte array.</returns>
        </member>
        <member name="T:Dart.Snmp.SimpleType.Integer">
            <summary>
            A tagged type representing a signed 32-bit value.
            </summary>
            <remarks>
            <para>
            ASN.1 Integer Type. Int32, Universal and Primitive.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Integer.#ctor(System.Byte[],System.Int32@)">
            <summary>
            Decoding constructor.
            </summary>
            <param name="buffer">Contains encoded value.</param>
            <param name="offset">Indicates starting byte of the value (after the tag and size).</param>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Integer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Integer class.
            </summary>
            <param name="value">The initial value given to this object in string form.  
             Converted to an int and assigned to the object.</param>
            <exception cref="T:System.ArgumentNullException">value is a null reference.</exception>
            <exception cref="T:System.FormatException">value does not consist of an option sign followed by a sequence of digits.</exception>
            <exception cref="T:System.OverflowException">value is less than Int32.MinValue or greater than Int32.MaxValue.</exception>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Integer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Integer class.
            </summary>
            <param name="value">The initial value given to this object.</param>
            <exception cref="T:System.ArgumentNullException">The value is a null reference</exception>
            <exception cref="T:System.FormatException">The value does not consist of an option sign followed by a sequence of digits.</exception>
            <exception cref="T:System.OverflowException">The value is less than Int32.MinValue or greater than Int32.MaxValue</exception>
        </member>
        <member name="F:Dart.Snmp.SimpleType.Integer.Value">
            <summary>
            Gets the integer value associated with this object.
            </summary>
            <remarks>
            <para>
            Read-only.
            </para>
            </remarks>
            <value>Returns the Int32 value assigned to this object when it was initialized.</value>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Integer.ToString">
            <summary>
            Converts the object to its string representation.
            </summary>
            <value>The string equivalent of <see cref="F:Dart.Snmp.SimpleType.Integer.Value"/>.</value>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Integer.ToString(System.String)">
            <summary>
            Returns a string formatted using the supplied display-hint.
            </summary>
            <remarks>
            <para>
            The display-hint can be "d" (decimal), "x" (hex), "o" (octal), or "b" (binary).
            If decimal, can include a dash-n, where n is the number of decimal places. For example, a value of
            12345 with a displayHint of "d-2" would return "123.45".
            </para>
            </remarks>
            <param name="displayHint">A pattern indicating how the value should be displayed.</param>
            <returns>A formatted string representation of the value.</returns>
        </member>
        <member name="T:Dart.Snmp.SimpleType.OctetString">
            <summary>
            A tagged type supporting the capability to pass byte arrays or strings.
            </summary>
            <remarks>
            <para>
            ASN.1 OctetString Type. Byte[], Universal and Primitive.
            </para>
            </remarks>
        </member>
        <member name="T:Dart.Snmp.SimpleType.Opaque">
            <summary>
            A tagged type supporting the capability to pass arbitrary binary data or structures.
            </summary>
            <remarks>
            <para>
            ASN.1 Opaque Type. Byte[], Application and Primitive.
            </para>
            <para>
            The XML serializer persists this value as a Base64 encoded string.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Opaque.#ctor(System.Byte[],System.Int32@)">
            <summary>
            Decoding constructor.
            </summary>
            <param name="buffer">Contains encoded value.</param>
            <param name="offset">Indicates starting byte of the value (after the tag and size).</param>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Opaque.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the Opaque class.
            </summary>
            <param name="value">The byte array assigned to this object.</param>
            <exception cref="T:System.ArgumentNullException">value is a null reference.</exception>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Opaque.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Opaque class.
            </summary>
            <param name="value">The initial value given to this object in string form.  
            This value is converted to bytes using the system default encoding.</param>
            <exception cref="T:System.ArgumentNullException">value is a null reference.</exception>
        </member>
        <member name="F:Dart.Snmp.SimpleType.Opaque.Value">
            <summary>
            Gets the byte array associated with this object.
            </summary>
            <remarks>
            <para>
            Read-only.
            </para>
            </remarks>
            <value>Returns the byte array assigned to this object at the time is was initialized.</value>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Opaque.ToString">
            <summary>
            Converts the object to its string representation using the system default encoding.
            </summary>
            <remarks>
            <para>
            Converts the object to its string representation using the system default encoding.
            </para>
            </remarks>
            <value>The string equivalent of <see cref="F:Dart.Snmp.SimpleType.Opaque.Value"/> byte array.</value>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Opaque.ToHexString(System.String)">
            <summary>
            Converts the object to its hex string representation.
            </summary>
            <param name="delimiter">A string to use between each hex pair. May be null.</param>
            <remarks>
            <para>Converts the object to its hex string representation. 
            The string starts with the high 4 bits of the first element, followed by the low 4 bits of the first element,
            followed by the delimiter, and continues with each byte. 
            Possible hex values are { '0', '1','2','3','4','5','6','7','8','9','a','b','c','d','e','f' }.
            </para>
            </remarks>
            <value>A hex string representation of the <see cref="F:Dart.Snmp.SimpleType.Opaque.Value"/> byte array.</value>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Opaque.Encode(System.IO.MemoryStream)">
            <summary>
            Used for encoding bytes in Value.Buffer, and putting into buffer.
            Special case: A constructed sequence already has content types encoded into
            buffer. This is indicated by a null value for Value.Buffer, and a
            valid count provided by Value.Length.
            </summary>
        </member>
        <member name="M:Dart.Snmp.SimpleType.OctetString.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the OctetString class.
            </summary>
            <param name="value">The byte array assigned to this object.</param>
            <exception cref="T:System.ArgumentNullException">The value is a null reference.</exception>
        </member>
        <member name="M:Dart.Snmp.SimpleType.OctetString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the OctetString class.
            </summary>
            <param name="value">The initial value given to this object in string form.  
            This value is converted to byte using the system default encoding.</param>
            <exception cref="T:System.ArgumentNullException">The value is a null reference.</exception>
        </member>
        <member name="M:Dart.Snmp.SimpleType.OctetString.ToString(System.String)">
            <summary>
            Returns a string formatted using the supplied display-hint.
            </summary>
            <remarks>
            <para>
            The displayHint consists of any number of "octet-specifications" which contain five parts:
            <ol>
            <li>An optional repeat indicator ('*') which indicates how many times this octet-spec should be applied.</li>
            <li>A length indicating how many bytes to read.</li>
            <li>A format indicating how the bytes should be formatted.</li>
            <li>An optional separator character to append to the end of the octet-spec.</li>
            <li>An optional repeat terminator character to append after all repeats of the octet-spec.</li>
            </ol>
            The formatted value cannot end with a separator or a repeat terminator. If the end if the display-hint
            is reached without formatted the entire value, the last octet spec is applied as many times as necessary.
            </para>
            <para>
            Here are some examples:
            </para>
            <table>
            <tbody>
            <tr>
            <th>Encoded Value</th><th>Display Hint</th><th>Result</th>
            </tr>
            <tr>
            <td>160 20 243 123</td><td>1x:</td><td>a0:14:f3:7b</td>
            </tr>
            <tr>
            <td>20 10 9 3 11 45 32 8 43 2 30</td><td>2d-1d-1d,1d:1d:1d.1d,1a1d:1d</td><td>2010-9-3,11:45:32.8,+2:30</td>
            </tr>
            <tr>
            <td>02 97 97 97 97 05 98 98 98 98 98 03 99 99 122 122 99 99  100 100</td><td>*2a:!*1a.$*2a-%1a</td><td>aa:aa!b.b.b.b.b$cc-zz-cc%dd</td>
            </tr>
            </tbody>
            </table>
            </remarks>
            <param name="displayHint">A pattern indicating how the value should be displayed.</param>
            <returns>A formatted string representation of the value.</returns>
        </member>
        <member name="T:Dart.Snmp.SimpleType.Empty">
            <summary>
            A tagged type representing a place-holder when no value is desired.
            </summary>
            <remarks>
            <para>
            ASN.1 Null Type. Universal and Primitive.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Empty.#ctor(System.Byte[],System.Int32@)">
            <summary>
            Decoding constructor.
            </summary>
            <param name="buffer">Contains encoded value.</param>
            <param name="offset">Indicates starting byte after the tag indicating this type.</param>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Empty.#ctor">
            <summary>
            Initializes a new instance of the Empty class.
            </summary>
            <remarks>
            <para>
            An instance of this class is used as <see cref="P:Dart.Snmp.Variable.Value"/> when no value exists, such as when a GetMessage request 
            is used to request a value of an IID.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Empty.ToString">
            <summary>
            Converts the object to its string representation.
            </summary>
            <value>String.Empty</value>
        </member>
        <member name="T:Dart.Snmp.SimpleType.Id">
            <summary>
            A tagged type representing a <see cref="T:Dart.Snmp.MibNode"/> (OID representing a MIB node) or instance (IID) in ASN.1 notation. '0.0' is the minimum value that may be encoded.
            </summary>
            <remarks>
            <para>
            Used to pass object and instance identifiers. 
            IIDs, OIDs and OID segments are used in variables in GetNextMessage and GetBulkMessage requests, 
            but only specific IIDs may be used for GetMessage, SetMessage, InformMessage, Trap1Message, 
            Trap2Message and ResponseMessage.
            </para>
            <para>
            ASN.1 Object ID Type. String, Universal and Primitive. '0.0' is the minimum value that may be encoded.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Id.#ctor(System.Byte[],System.Int32@)">
            <summary>
            Decoding constructor.
            </summary>
            <param name="buffer">Contains encoded value.</param>
            <param name="offset">Indicates starting byte after the tag indicating this type.</param>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Id.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Id class.
            </summary>
            <param name="id">The initial value given to this object in string form. '0.0' is the minimum value that may be encoded.</param>
            <remarks>
            <para>
            The string value assigned to an Id object must be in the form n.n.n….n where each n is an unsigned 32-bit integer. The string is limited to 128 n values.
            The encoding requires that the max value of the first sub-id is 107374182, and the max value of the second sub-id is 39. Most Id's start with "1.3".
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">id has less than 2 sub-ids or more than 128 sub-ids, or id does not encode/decode properly.</exception>
            <exception cref="T:System.ArgumentNullException">id is a null reference.</exception>
            <exception cref="T:System.FormatException">id contains a dotted value that is not an optional sign followed by a sequence of digits.</exception>
            <exception cref="T:System.OverflowException">id contains a dotted value that is less than UInt32.MinValue or greater than UInt32.MaxValue</exception>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Id.ToString">
            <summary>
            Converts the object to its string representation.
            </summary>
            <value>A string value of the Id object in the form n.n.n … .n where n is an unsigned 32-bit integer.</value>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Id.GetSid(System.Byte[],System.Int32@)">
            <summary>
            Gets the next sub-id in the buffer. Modified to return a uint32 for issues 556/557.
            </summary>
            <param name="buffer"></param>
            <param name="offset">Indicates starting byte of the value.</param>
            <returns></returns>
        </member>
        <member name="T:Dart.Snmp.SimpleType.Counter">
            <summary>
            A tagged type representing an unsigned 32-bit integer that starts at 0, 
            can only increase in value, and wraps back to 0 when it exceeds its maximum value.
            </summary>
            <remarks>
            <para>
            ASN.1 Counter32 Type. UInt32, Universal and Primitive.
            </para>
            </remarks>
        </member>
        <member name="T:Dart.Snmp.SimpleType.UIntegerBase">
            <summary>
            Base class for unsigned 32-bit integer classes.
            </summary>
        </member>
        <member name="M:Dart.Snmp.SimpleType.UIntegerBase.#ctor(System.Byte[],System.Int32@)">
            <summary>
            Decoding constructor.
            </summary>
            <param name="buffer">Contains encoded value.</param>
            <param name="offset">Indicates starting byte of the value (after the tag and size).</param>
        </member>
        <member name="M:Dart.Snmp.SimpleType.UIntegerBase.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the UInteger class.
            </summary>
            <param name="value">
            The initial value given to this object.
            </param>
            <exception cref="T:System.ArgumentNullException">value is a null reference.</exception>
            <exception cref="T:System.OverflowException">value is less than UInt32.MinValue or greater than UInt32.MaxValue.</exception>
        </member>
        <member name="M:Dart.Snmp.SimpleType.UIntegerBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UInteger class.
            </summary>
            <param name="value">The initial value given to this object in string form.  
            Converted to a UInt32 value and assigned to the object.
            </param>
            <exception cref="T:System.ArgumentNullException">value is a null reference.</exception>
            <exception cref="T:System.OverflowException">value is less than UInt32.MinValue or greater than UInt32.MaxValue.</exception>
        </member>
        <member name="M:Dart.Snmp.SimpleType.UIntegerBase.ToString">
            <summary>
            Converts the object to its string representation.
            </summary>
            <value>The string equivalent of <see cref="P:Dart.Snmp.SimpleType.UIntegerBase.Value"/>.</value>
        </member>
        <member name="P:Dart.Snmp.SimpleType.UIntegerBase.Value">
            <summary>
            Gets the unsigned integer value associated with this object.
            </summary>
            <remarks>
            <para>
            Read-only.
            </para>
            </remarks>
            <value>Returns the value assigned to the object at the time it was initialized.</value>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Counter.#ctor(System.Byte[],System.Int32@)">
            <summary>
            Decoding constructor.
            </summary>
            <param name="buffer">Contains encoded value.</param>
            <param name="offset">Indicates starting byte of the value (after the tag and size).</param>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Counter.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the Counter class.
            </summary>
            <param name="count">The initial value given to this object. An Int64 is used because UInt32 is not CLS-compliant.</param>
            <exception cref="T:System.ArgumentNullException">count  is a null reference.</exception>
            <exception cref="T:System.FormatException">count does not consist of an optional sign followed by a sequence of digits.</exception>
            <exception cref="T:System.OverflowException">count is less than UInt32.MinValue or greater than UInt32.MaxValue.</exception>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Counter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Counter class.
            </summary>
            <param name="count">The initial value given to this object in string form.  
            This value is converted to a UInt32 value and assigned to the object.</param>
            <exception cref="T:System.ArgumentNullException">count  is a null reference.</exception>
            <exception cref="T:System.FormatException">count does not consist of an optional sign followed by a sequence of digits.</exception>
            <exception cref="T:System.OverflowException">count is less than UInt32.MinValue or greater than UInt.MaxValue.</exception>
        </member>
        <member name="T:Dart.Snmp.SimpleType.Gauge">
            <summary>
            A tagged type representing an unsigned 32-bit integer that can increase or decrease in value, 
            but does not wrap to 0 if the maximum value is exceeded. Can be used interchangeably as an Unsigned32 tag type.
            </summary>
            <remarks>
            <para>
            ASN.1 Gauge32 Type. Tag: APPLICATION | 2.
            </para>
            </remarks>
        </member>
        <member name="T:Dart.Snmp.SimpleType.UIntegerBaseDisplayHint">
            <summary>
            Base class for unsigned 32-bit integer classes that support display-hint.
            </summary>
        </member>
        <member name="M:Dart.Snmp.SimpleType.UIntegerBaseDisplayHint.#ctor(System.Byte[],System.Int32@)">
            <summary>
            Decoding constructor.
            </summary>
            <param name="buffer">Contains encoded value.</param>
            <param name="offset">Indicates starting byte of the value (after the tag and size).</param>
        </member>
        <member name="M:Dart.Snmp.SimpleType.UIntegerBaseDisplayHint.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the UIntegerBaseDisplayHint class.
            </summary>
            <param name="value">
            The initial value given to this object.
            </param>
            <exception cref="T:System.ArgumentNullException">value is a null reference.</exception>
            <exception cref="T:System.OverflowException">value is less than UInt32.MinValue or greater than UInt32.MaxValue.</exception>
        </member>
        <member name="M:Dart.Snmp.SimpleType.UIntegerBaseDisplayHint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UIntegerBaseDisplayHint class.
            </summary>
            <param name="value">The initial value given to this object in string form.  
            Converted to a UInt32 value and assigned to the object.
            </param>
            <exception cref="T:System.ArgumentNullException">value is a null reference.</exception>
            <exception cref="T:System.OverflowException">value is less than UInt32.MinValue or greater than UInt32.MaxValue.</exception>
        </member>
        <member name="M:Dart.Snmp.SimpleType.UIntegerBaseDisplayHint.ToString(System.String)">
            <summary>
            Returns a string formatted using the supplied display-hint.
            </summary>
            <remarks>
            <para>
            The display-hint can be "d" (decimal), "x" (hex), "o" (octal), or "b" (binary).
            If decimal, can include a dash-n, where n is the number of decimal places. For example, a value of
            12345 with a displayHint of "d-2" would return "123.45".
            </para>
            </remarks>
            <param name="displayHint">A pattern indicating how the value should be displayed.</param>
            <returns>A formatted string representation of the value.</returns>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Gauge.#ctor(System.Byte[],System.Int32@)">
            <summary>
            Decoding constructor.
            </summary>
            <param name="buffer">Contains encoded value.</param>
            <param name="offset">Indicates starting byte of the value (after the tag and size).</param>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Gauge.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the Gauge class.
            </summary>
            <param name="value">The initial value given to this object. Int64 is used because UInt32 is not CLS-compliant.</param>
            <exception cref="T:System.ArgumentNullException">value is a null reference.</exception>
            <exception cref="T:System.OverflowException">value is less than UInt32.MinValue or greater than UInt32.MaxValue.</exception>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Gauge.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Gauge class.
            </summary>
            <param name="value">The initial value given to this object in string form.  
            This value is converted to a UInt32 value and assigned to the object.</param>
            <exception cref="T:System.ArgumentNullException">value is a null reference.</exception>
            <exception cref="T:System.FormatException">value does not consist of an optional sign followed by a sequence of digits.</exception>
            <exception cref="T:System.OverflowException">value is less than UInt32.MinValue or greater than UInt32.MaxValue.</exception>
        </member>
        <member name="T:Dart.Snmp.SimpleType.TimeTicks">
            <summary>
            A tagged type representing an unsigned 32-bit integer that counts the time in hundredths of a second 
            since some reference epoch.
            </summary>
            <remarks>
            <para>
            ASN.1 TimeTicks Type. UInt32. Tag: APPLICATION | 3.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SimpleType.TimeTicks.#ctor(System.Byte[],System.Int32@)">
            <summary>
            Decoding constructor.
            </summary>
            <param name="buffer">Contains encoded value.</param>
            <param name="offset">Indicates starting byte of the value (after the tag and size).</param>
        </member>
        <member name="M:Dart.Snmp.SimpleType.TimeTicks.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the TimeTicks class.
            </summary>
            <param name="ticks">The initial value given to this object. An Int64 is used because UInt32 is not CLS-compliant.</param>
            <remarks>
            <para>
            This class is typically used to represent the length of time a network entity has been active.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException">ticks is less than UInt32.MinValue or greater than UInt32.MaxValue.</exception>
        </member>
        <member name="M:Dart.Snmp.SimpleType.TimeTicks.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TimeTicks class.
            </summary>
            <param name="ticks">The initial value given to this object.</param>
            <remarks>
            <para>
            This class is typically used to represent the length of time a network entity has been active.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">ticks is a null reference.</exception>
            <exception cref="T:System.OverflowException">ticks is less than UInt32.MinValue or greater than UInt32.MaxValue.</exception>
        </member>
        <member name="T:Dart.Snmp.SimpleType.Nsap">
            <summary>
            An NSAP tagged type.
            </summary>
            <remarks>
            <para>
            ASN.1 Nsap Type. String, Application and Primitive.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Nsap.#ctor(System.Byte[],System.Int32@)">
            <summary>
            Decoding constructor.
            </summary>
            <param name="buffer">Contains encoded value.</param>
            <param name="offset">Indicates starting byte of the value (after the tag and size).</param>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Nsap.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the Nsap class.
            </summary>
            <param name="nsap">The byte array assigned to this object.</param>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Nsap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Nsap class.
            </summary>
            <param name="value">A string that is converted to a byte array using the system default encoding.</param>
        </member>
        <member name="T:Dart.Snmp.SimpleType.Counter64">
            <summary>
            A tagged type representing an unsigned 64-bit integer that starts at 0, can only increase in value, 
            and wraps back to 0 when it exceeds its maximum value.
            </summary>
            <remarks>
            <para>
            ASN.1 Counter64 Type. UInt64, Universal and Primitive.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Counter64.#ctor(System.Byte[],System.Int32@)">
            <summary>
            Decoding constructor.
            </summary>
            <param name="buffer">Contains encoded value.</param>
            <param name="offset">Indicates starting byte of the value (after the tag and size).</param>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Counter64.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the Counter64 class.
            </summary>
            <param name="count">The initial value given to this object. 
            Use the string constructor if UInt64 is not supported in your environment.</param>
            <exception cref="T:System.ArgumentNullException">count is a null reference.</exception>
            <exception cref="T:System.OverflowException">count is less UInt64.MinVal or greater than UInt64.MaxValue.</exception>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Counter64.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Counter64 class.
            </summary>
            <param name="count">The initial value given to this object in string form.  
            This value is converted to a UInt64 value and assigned to the object.</param>
            <exception cref="T:System.ArgumentNullException">count  is a null reference.</exception>
            <exception cref="T:System.FormatException">count does not consist of an optional sign followed by a sequence of digits.</exception>
            <exception cref="T:System.OverflowException">count is less UInt64.MinVal or greater than UInt64.MaxValue.</exception>
        </member>
        <member name="F:Dart.Snmp.SimpleType.Counter64.Value">
            <summary>
            Gets the value associated with this object.
            </summary>
            <remarks>
            <para>
            Read-only. Use the <see cref="M:Dart.Snmp.SimpleType.Counter64.ToString"/> method if UInt64 is not supported in your environment.
            </para>
            </remarks>
            <value>Returns the value assigned to this object.</value>
        </member>
        <member name="M:Dart.Snmp.SimpleType.Counter64.ToString">
            <summary>
            Converts the object to its string representation.
            </summary>
            <value>The string equivalent of <see cref="F:Dart.Snmp.SimpleType.Counter64.Value"/>.</value>
        </member>
        <member name="T:Dart.Snmp.SimpleType.UInteger">
            <summary>
            A tagged type representing an unsigned 32-bit integer. Provided for backwards compatibility with RFC 1442. Not normally used.
            For a Syntax of Unsigned32 <see cref="T:Dart.Snmp.SimpleType.Gauge"/> should be used.
            </summary>
            <remarks>
            <para>
            ASN.1 UInteger32 Type. Tag: APPLICATION | 7.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SimpleType.UInteger.#ctor(System.Byte[],System.Int32@)">
            <summary>
            Decoding constructor.
            </summary>
            <param name="buffer">Contains encoded value.</param>
            <param name="offset">Indicates starting byte of the value (after the tag and size).</param>
        </member>
        <member name="M:Dart.Snmp.SimpleType.UInteger.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the UInteger class.
            </summary>
            <param name="value">
            The initial value given to this object.
            </param>
            <exception cref="T:System.ArgumentNullException">value is a null reference.</exception>
            <exception cref="T:System.OverflowException">value is less than UInt32.MinValue or greater than UInt32.MaxValue.</exception>
        </member>
        <member name="M:Dart.Snmp.SimpleType.UInteger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UInteger class.
            </summary>
            <param name="value">The initial value given to this object in string form.  
            Converted to a UInt32 value and assigned to the object.
            </param>
            <exception cref="T:System.ArgumentNullException">value is a null reference.</exception>
            <exception cref="T:System.OverflowException">value is less than UInt32.MinValue or greater than UInt32.MaxValue.</exception>
        </member>
        <member name="T:Dart.Snmp.SimpleType.NoSuchObject">
            <summary>
            A tagged type representing the fact that the agent has no knowledge of the OID specified by the variable.
            </summary>
            <remarks>
            <para>
            ASN.1 NoSuchObject Type. No value...reports an error, ContextSpecific and Primitive.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SimpleType.NoSuchObject.#ctor(System.Byte[],System.Int32@)">
            <summary>
            Decoding constructor.
            </summary>
            <param name="buffer">Contains encoded value.</param>
            <param name="offset">Indicates starting byte of the value (after the tag and size).</param>
        </member>
        <member name="M:Dart.Snmp.SimpleType.NoSuchObject.#ctor">
            <summary>
            Initializes a new instance of the NoSuchObject class.
            </summary>
            <remarks>
            <para>
            The NoSuchObject value is returned only in Version 2 or greater responses for those variables 
            for which the agent is unable to locate the requested MIB node (the OID indicated by the provided IID is unknown).
            </para>
            </remarks>
        </member>
        <member name="T:Dart.Snmp.SimpleType.NoSuchInstance">
            <summary>
            A tagged type representing the fact that the agent does not manage an instance of the IID specified by the variable.
            </summary>
            <remarks>
            <para>
            ASN.1 NoSuchInstance Type. No value...reports an error, ContextSpecific and Primitive.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SimpleType.NoSuchInstance.#ctor(System.Byte[],System.Int32@)">
            <summary>
            Decoding constructor.
            </summary>
            <param name="buffer">Contains encoded value.</param>
            <param name="offset">Indicates starting byte of the value (after the tag and size).</param>
        </member>
        <member name="M:Dart.Snmp.SimpleType.NoSuchInstance.#ctor">
            <summary>
            Initializes a new instance of the NoSuchInstance class.
            </summary>
            <remarks>
            <para>
            The NoSuchInstance value is returned only in Version 2 or greater responses for those variables 
            in which the agent is able to locate the requested OID, but does not manage the instance variable requested 
            (the OID indicated by the provided IID is known, but the IID does not map to an existing instance specified by the IID).
            </para>
            <para>
            This condition might occur when the OID maps to a valid table column, but no row exists for the specified index (suffix).
            </para>
            </remarks>
        </member>
        <member name="T:Dart.Snmp.SimpleType.EndOfMibView">
            <summary>
            A tagged type representing the fact that end of the MIB has been reached.
            </summary>
            <remarks>
            <para>
            ASN.1 EndOfMibView Type. No value...reports the end of the mib, ContextSpecific and Primitive.
            The EndOfMibView value is returned only in Version 2 or greater messages in response to a GetNext or GetBulk 
            request when there is no lexicographical successor to the provided variable ID.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.SimpleType.EndOfMibView.#ctor(System.Byte[],System.Int32@)">
            <summary>
            Decoding constructor.
            </summary>
            <param name="buffer">Contains encoded value.</param>
            <param name="offset">Indicates starting byte of the value (after the tag and size).</param>
        </member>
        <member name="M:Dart.Snmp.SimpleType.EndOfMibView.#ctor">
            <summary>
            Initializes a new instance of the EndOfMibView class.
            </summary>
        </member>
        <member name="T:Dart.Snmp.SimpleType.IpAddress">
            <summary>
            A tagged type representing an IP address.
            </summary>
        </member>
        <member name="M:Dart.Snmp.SimpleType.IpAddress.#ctor(System.Byte[],System.Int32@)">
            <summary>
            Decoding constructor.
            </summary>
            <param name="buffer">Contains encoded value.</param>
            <param name="offset">Indicates starting byte of the value (after the tag and size).</param>
        </member>
        <member name="M:Dart.Snmp.SimpleType.IpAddress.#ctor(System.String)">
            <summary>
            Initializes a new instance of the IpAddress class.
            </summary>
            <param name="address">The initial value given to this object in string form.  
            This value it to be in the form of n.n.n.n when n is a value between 0 and 255.</param>
            <exception cref="T:System.ArgumentException">value is not in the form of n.n.n.n where n is a value between 0 and 255.</exception>
        </member>
        <member name="M:Dart.Snmp.SimpleType.IpAddress.ToString">
            <summary>
            Converts the object to its string representation.
            </summary>
            <value>A string in the form of n.n.n.n where n is a value between 0 and 255.</value>
        </member>
        <member name="T:Dart.Snmp.ThreadStart">
            <summary>
            Represents the method that will be called on a new worker thread. 
            </summary>
            <param name="socket">A new <see cref="T:Dart.Snmp.SnmpSocket"/> used to send/receive messages.</param>
            <param name="state">The state argument from <see cref="M:Dart.Snmp.SnmpBase.Start(Dart.Snmp.ThreadStart,System.Object)">Manager.Start()</see>.</param>
            <example>
        The following example demonstrates sending an SNMPv1 Get request to an agent and receiving the response.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Create and send request on a worker thread
            manager1.Start(manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact));
        }

        private void button2_Click(object sender, EventArgs e)
        {
            //If you don't have the MIB, retrieve the value by IID:
            manager1.Start(manager1_SendGetRequest, new Variable("1.3.6.1.2.1.1.4.0"));
        }

        private void manager1_SendGetRequest(SnmpSocket managerSocket, object state)
        {
            //Create Get Request
            GetMessage request = new GetMessage();
            request.Variables.Add(state as Variable);

            //Send request and get response
            ResponseMessage response = managerSocket.GetResponse(request, myAgentAddress);

            //Marshal response to the UI thread using the Message event
            manager1.Marshal(new ResponseMessage[] { response }, "", null);
        }

        private void manager1_Message(object sender, MessageEventArgs e)
        {
            //Display info about the first variable in the response, and its value
            Variable vari = e.Messages[0].Variables[0];
            label1.Text += vari.Definition.ToString() + vari.Value.ToString() + "\r\n";
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Create and send request on a worker thread
            manager1.Start(AddressOf manager1_SendGetRequest, manager1.Mib.CreateVariable(NodeName.sysContact))
        End Sub

        Private Sub button2_Click(ByVal sender As Object, ByVal e As EventArgs)
            'If you don't have the MIB, retrieve the value by IID:
            manager1.Start(AddressOf manager1_SendGetRequest, New Variable("1.3.6.1.2.1.1.4.0"))
        End Sub

        Private Sub manager1_SendGetRequest(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'Create Get Request
            Dim request As New GetMessage()
            request.Variables.Add(TryCast(state, Variable))

            'Send request and get response
            Dim response As ResponseMessage = managerSocket.GetResponse(request, myAgentAddress)

            'Marshal response to the UI thread using the Message event
            manager1.Marshal(New ResponseMessage() { response }, "", Nothing)
        End Sub

        Private Sub manager1_Message(ByVal sender As Object, ByVal e As MessageEventArgs)
            'Display info about the first variable in the response, and its value
            Dim vari As Variable = e.Messages(0).Variables(0)
            label1.Text &amp;= vari.Definition.ToString() &amp; vari.Value.ToString() &amp; vbCrLf
        End Sub
        </code>
      </example>
        </member>
        <member name="T:Dart.Snmp.MessageEventArgs">
            <summary>
            Provides data for the <see cref="E:Dart.Snmp.SnmpBase.Message"/> event.
            </summary>
        </member>
        <member name="F:Dart.Snmp.MessageEventArgs.Messages">
            <summary>
            An array of messages derived from <see cref="T:Dart.Snmp.MessageBase"/>.
            </summary>
        </member>
        <member name="T:Dart.Snmp.LogEventArgs">
            <summary>
            Provides data for the <see cref="E:Dart.Snmp.SnmpBase.Log"/> event.
            </summary>
        </member>
        <member name="F:Dart.Snmp.LogEventArgs.Message">
            <summary>
            Gets the SNMP Message sent or received.
            </summary>
        </member>
        <member name="T:Dart.Snmp.ResponseReceived">
            <summary>
            References the method to invoke on an IO completion thread when <see cref="M:Dart.Snmp.SnmpSocket.GetResponseAsync(Dart.Snmp.RequestMessage,System.Net.IPEndPoint,System.Int32,System.Int32,Dart.Snmp.ResponseReceived,System.Object)"/> completes.
            </summary>
            <param name="request">The corresponding <see cref="T:Dart.Snmp.RequestMessage"/>.</param>
            <param name="response">Response from the target agent or manager. Null if a response was not received.</param>
            <param name="exception">Populated with an Exception if the request failed.</param>
            <param name="state">The state argument from <see cref="M:Dart.Snmp.SnmpSocket.GetResponseAsync(Dart.Snmp.RequestMessage,System.Net.IPEndPoint,System.Int32,System.Int32,Dart.Snmp.ResponseReceived,System.Object)"/>.</param>
        </member>
        <member name="T:Dart.Snmp.TrapUserList">
            <summary>
            List of <see cref="T:Dart.Snmp.TrapUser"/> objects used for authenticating and decrypting SNMPv3 traps. Lock on SyncRoot if thread-safety is required.
            </summary>
        </member>
        <member name="M:Dart.Snmp.TrapUserList.Find(System.Byte[],System.String)">
            <summary>
            Provided for later optimization.
            </summary>
            <param name="engineId"></param>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Dart.Snmp.TrapUserList.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Dart.Snmp.TrapUserList.Clone">
            <summary>
            Create a deep copy of the TrapUserList and its Users.
            </summary>
            <returns>A deep copy of the TrapUserList and its Users.</returns>
            <remarks>Locks on <see cref="P:Dart.Snmp.TrapUserList.SyncRoot"/> for thread safety.</remarks>
        </member>
        <member name="P:Dart.Snmp.TrapUserList.SyncRoot">
            <summary>
            Use this object to synchronize threadsafe access.
            </summary>
            <remarks>Lock on this property to provide thread safety.</remarks>
        </member>
        <member name="T:Dart.Snmp.Trap1.coldStart">
            <summary>
            A <see cref="T:Dart.Snmp.Trap1Message"/> that indicates a cold start.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Trap1.coldStart.GenericTrapConst">
            <summary>
            The value to use for the generic trap field of the PDU.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Trap1.coldStart.SpecificTrapConst">
            <summary>
            The value to use for the specific trap field of the PDU.
            </summary>
        </member>
        <member name="M:Dart.Snmp.Trap1.coldStart.#ctor(System.String,System.Int64)">
            <summary>
            Creates a <see cref="T:Dart.Snmp.Trap1Message"/> that indicates a cold start.
            </summary>
            <param name="enterpriseId">The id of the enterprise (usually the value of sysObjectID).</param>
            <param name="sysUpTime">System uptime, usually taken from <see cref="P:Dart.Snmp.Agent.SysUpTime"/>.</param>
        </member>
        <member name="T:Dart.Snmp.Trap1.warmStart">
            <summary>
            A <see cref="T:Dart.Snmp.Trap1Message"/> that indicates a warm start.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Trap1.warmStart.GenericTrapConst">
            <summary>
            The value to use for the generic trap field of the PDU.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Trap1.warmStart.SpecificTrapConst">
            <summary>
            The value to use for the specific trap field of the PDU.
            </summary>
        </member>
        <member name="M:Dart.Snmp.Trap1.warmStart.#ctor(System.String,System.Int64)">
            <summary>
            Creates a <see cref="T:Dart.Snmp.Trap1Message"/> that indicates a warm start.
            </summary>
            <param name="enterpriseId">The id of the enterprise (usually the value of sysObjectID).</param>
            <param name="sysUpTime">System uptime, usually taken from <see cref="P:Dart.Snmp.Agent.SysUpTime"/>.</param>
        </member>
        <member name="T:Dart.Snmp.Trap1.linkDown">
            <summary>
            A <see cref="T:Dart.Snmp.Trap1Message"/> that indicates a link is down.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Trap1.linkDown.GenericTrapConst">
            <summary>
            The value to use for the generic trap field of the PDU.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Trap1.linkDown.SpecificTrapConst">
            <summary>
            The value to use for the specific trap field of the PDU.
            </summary>
        </member>
        <member name="M:Dart.Snmp.Trap1.linkDown.#ctor(System.String,System.Int64)">
            <summary>
            Creates a <see cref="T:Dart.Snmp.Trap1Message"/> that indicates a link is down.
            </summary>
            <param name="enterpriseId">The id of the enterprise (usually the value of sysObjectID).</param>
            <param name="sysUpTime">System uptime, usually taken from <see cref="P:Dart.Snmp.Agent.SysUpTime"/>.</param>
        </member>
        <member name="P:Dart.Snmp.Trap1.linkDown.ifIndex">
            <summary>
            The row index into the interface table.
            </summary>
        </member>
        <member name="T:Dart.Snmp.Trap1.linkUp">
            <summary>
            A <see cref="T:Dart.Snmp.Trap1Message"/> that indicates a link is up.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Trap1.linkUp.GenericTrapConst">
            <summary>
            The value to use for the generic trap field of the PDU.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Trap1.linkUp.SpecificTrapConst">
            <summary>
            The value to use for the specific trap field of the PDU.
            </summary>
        </member>
        <member name="M:Dart.Snmp.Trap1.linkUp.#ctor(System.String,System.Int64)">
            <summary>
            Creates a <see cref="T:Dart.Snmp.Trap1Message"/> that indicates a link is up.
            </summary>
            <param name="enterpriseId">The id of the enterprise (usually the value of sysObjectID).</param>
            <param name="sysUpTime">System uptime, usually taken from <see cref="P:Dart.Snmp.Agent.SysUpTime"/>.</param>
        </member>
        <member name="P:Dart.Snmp.Trap1.linkUp.ifIndex">
            <summary>
            The row index into the interface table.
            </summary>
        </member>
        <member name="T:Dart.Snmp.Trap1.authenticationFailure">
            <summary>
            A <see cref="T:Dart.Snmp.Trap1Message"/> that indicates an authentication failure.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Trap1.authenticationFailure.GenericTrapConst">
            <summary>
            The value to use for the generic trap field of the PDU.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Trap1.authenticationFailure.SpecificTrapConst">
            <summary>
            The value to use for the specific trap field of the PDU.
            </summary>
        </member>
        <member name="M:Dart.Snmp.Trap1.authenticationFailure.#ctor(System.String,System.Int64)">
            <summary>
            Creates a <see cref="T:Dart.Snmp.Trap1Message"/> that indicates an authentication failure.
            </summary>
            <param name="enterpriseId">The id of the enterprise (usually the value of sysObjectID).</param>
            <param name="sysUpTime">System uptime, usually taken from <see cref="P:Dart.Snmp.Agent.SysUpTime"/>.</param>
        </member>
        <member name="T:Dart.Snmp.Trap1.egpNeighborLoss">
            <summary>
            A <see cref="T:Dart.Snmp.Trap1Message"/> that indicates an EGP peer has been marked down.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Trap1.egpNeighborLoss.GenericTrapConst">
            <summary>
            The value to use for the generic trap field of the PDU.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Trap1.egpNeighborLoss.SpecificTrapConst">
            <summary>
            The value to use for the specific trap field of the PDU.
            </summary>
        </member>
        <member name="M:Dart.Snmp.Trap1.egpNeighborLoss.#ctor(System.String,System.Int64)">
            <summary>
            Creates a <see cref="T:Dart.Snmp.Trap1Message"/> that indicates an EGP peer has been marked down.
            </summary>
            <param name="enterpriseId">The id of the enterprise (usually the value of sysObjectID).</param>
            <param name="sysUpTime">System uptime, usually taken from <see cref="P:Dart.Snmp.Agent.SysUpTime"/>.</param>
        </member>
        <member name="P:Dart.Snmp.Trap1.egpNeighborLoss.egpNeighAddr">
            <summary>
            Used to get or set the <see cref="T:Dart.Snmp.SimpleType.IpAddress"/> of the entity that has been marked down.
            </summary>
        </member>
        <member name="T:Dart.Snmp.Trap1.SpecificTrap">
            <summary>
            A <see cref="T:Dart.Snmp.Trap1Message"/> that indicates an extended specific trap.
            </summary>
        </member>
        <member name="F:Dart.Snmp.Trap1.SpecificTrap.GenericTrapConst">
            <summary>
            The value to use for the generic trap field of the PDU.
            </summary>
        </member>
        <member name="M:Dart.Snmp.Trap1.SpecificTrap.#ctor(System.Int32,System.String,System.Int64)">
            <summary>
            Creates any specific trap. The user is responsible for creating any required variables.
            </summary>
            <param name="specificTrap">A value, when combined with the enterprise ID, specifies a unique kind of trap.</param>
            <param name="enterpriseId">The id of the enterprise (usually the value of sysObjectID).</param>
            <param name="sysUpTime">System uptime, usually taken from <see cref="P:Dart.Snmp.Agent.SysUpTime"/>.</param>
        </member>
        <member name="T:Dart.Snmp.IdComparer">
            <summary>
            Used to sort ID's
            </summary>
        </member>
        <member name="T:Dart.Snmp.VariableList">
            <summary>
            Used to hold the MIB data managed by the Agent.
            </summary>
            <remarks>
            <para>
            The Agent class uses <see cref="F:Dart.Snmp.Agent.Variables"/> to generate a response for each request it processes.
            </para>
            <para>
            This collection is lexicographically sorted by instance id (IID); each IID must be unique. 
            The IID is used as the key to lookup variables in the list.
            </para>
            <para>
            Users should synchronize access by using the lock construct on the SyncRoot property.
            </para>
            </remarks>
            <example>
        The following example demonstrates how to walk a MIB and display the response variables.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Perform MIB walk on a worker thread
            manager1.Start(walkMib, manager1.Mib.GetByNodeName(NodeName.system).Oid);
        }

        private void walkMib(SnmpSocket managerSocket, object state)
        {
            //The state contains the OID to walk (in this case, the system group)
            string oid = state as string;

            //Walk the MIB from the specified root OID
            VariableList variables = managerSocket.Walk(oid, myAgentAddress);

            //Marshal variables returned to the UI thread using the Walk event
            manager1.Marshal(oid, variables, "", null);
        }

        private void manager1_Walk(object sender, WalkEventArgs e)
        {
            //Populate a treeview control with the returned variables
            e.Variables.Populate(tvwVariables, e.Oid, manager1.Mib);
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Perform MIB walk on a worker thread
            manager1.Start(AddressOf walkMib, manager1.Mib.GetByNodeName(NodeName.system).Oid)
        End Sub

        Private Sub walkMib(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'The state contains the OID to walk (in this case, the system group)
            Dim oid As String = TryCast(state, String)

            'Walk the MIB from the specified root OID
            Dim variables As VariableList = managerSocket.Walk(oid, myAgentAddress)

            'Marshal variables returned to the UI thread using the Walk event
            manager1.Marshal(oid, variables, "", Nothing)
        End Sub

        Private Sub manager1_Walk(ByVal sender As Object, ByVal e As WalkEventArgs)
            'Populate a treeview control with the returned variables
            e.Variables.Populate(tvwVariables, e.Oid, manager1.Mib)
        End Sub
        </code>
      </example>
        </member>
        <member name="M:Dart.Snmp.VariableList.#ctor">
            <summary>
            Creates a new instance of the VariableList class.
            </summary>
            <remarks>
            <para>
            An application will not typically need to create a new VariableList because <see cref="F:Dart.Snmp.Agent.Variables"/> can be used directly.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Snmp.VariableList.#ctor(System.Collections.Generic.IDictionary{System.String,Dart.Snmp.Variable})">
            <summary>
            For high-performance applications, this constructor adds initial values without sorting.
            </summary>
            <param name="dictionary">Variables to be added before sorting.</param>
        </member>
        <member name="M:Dart.Snmp.VariableList.Add(Dart.Snmp.Variable)">
            <summary>
            Add a new Variable to the list.
            </summary>
            <param name="variable"><see cref="T:Dart.Snmp.Variable"/> to add.</param>
        </member>
        <member name="M:Dart.Snmp.VariableList.GetNext(System.String)">
            <summary>
            Returns the next Variable after the specified id.
            </summary>
            <param name="id">An object or instance id of the Variable immediately preceding the returned Variable.</param>
            <returns>The next Variable in the list, indexed by id.</returns>
        </member>
        <member name="M:Dart.Snmp.VariableList.Populate(System.Windows.Forms.TreeView,System.String,Dart.Snmp.MibNodes)">
            <summary>
            Populates a TreeView from the VariableList.
            </summary>
            <param name="treeView">The TreeView object to populate.</param>
            <param name="rootOid">The root Oid of the variable tree.</param>
            <param name="mibNodes">A sorted collection of <see cref="T:Dart.Snmp.MibNode"/> objects used to 
            populate the treeView.</param>
            <remarks>
            <para>This function populates a TreeView with the Variables in the VariableList using the rootOid
            as the root TreeNode. Variables are represented as leaves in the tree.</para>
            <para>
            To use images for the node, set the treeView's ImageList property to an ImageList with the 
            following image indices:
            </para>
            <para>
            0 = leaf, 1 = selected leaf, 2 = branch, 3 = selected branch</para>
            <para>Each TreeNode.Tag corresponding to a Variable will contain the Variable.</para>
            </remarks>
            <example>
        The following example demonstrates how to walk a MIB and display the response variables.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Perform MIB walk on a worker thread
            manager1.Start(walkMib, manager1.Mib.GetByNodeName(NodeName.system).Oid);
        }

        private void walkMib(SnmpSocket managerSocket, object state)
        {
            //The state contains the OID to walk (in this case, the system group)
            string oid = state as string;

            //Walk the MIB from the specified root OID
            VariableList variables = managerSocket.Walk(oid, myAgentAddress);

            //Marshal variables returned to the UI thread using the Walk event
            manager1.Marshal(oid, variables, "", null);
        }

        private void manager1_Walk(object sender, WalkEventArgs e)
        {
            //Populate a treeview control with the returned variables
            e.Variables.Populate(tvwVariables, e.Oid, manager1.Mib);
        }
        </code>
        <code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            'Perform MIB walk on a worker thread
            manager1.Start(AddressOf walkMib, manager1.Mib.GetByNodeName(NodeName.system).Oid)
        End Sub

        Private Sub walkMib(ByVal managerSocket As SnmpSocket, ByVal state As Object)
            'The state contains the OID to walk (in this case, the system group)
            Dim oid As String = TryCast(state, String)

            'Walk the MIB from the specified root OID
            Dim variables As VariableList = managerSocket.Walk(oid, myAgentAddress)

            'Marshal variables returned to the UI thread using the Walk event
            manager1.Marshal(oid, variables, "", Nothing)
        End Sub

        Private Sub manager1_Walk(ByVal sender As Object, ByVal e As WalkEventArgs)
            'Populate a treeview control with the returned variables
            e.Variables.Populate(tvwVariables, e.Oid, manager1.Mib)
        End Sub
        </code>
      </example>
        </member>
        <member name="P:Dart.Snmp.VariableList.SyncRoot">
            <summary>
            Use this object to synchronize threadsafe access.
            </summary>
            <remarks>Lock on this property to provide thread safety.</remarks>
        </member>
    </members>
</doc>
